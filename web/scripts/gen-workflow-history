#!/usr/bin/env python
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
from datetime                           import datetime
import json

from ktl.utils                          import stdo, stde, error, dump, string_to_date, json_load, file_load, date_to_string, string_to_date
from ktl.dbg                            import Dbg
from ktl.cfg                            import Cfg, CfgError
from ktl.kernel_series                  import KernelSeries
from ktl.bugs                           import DeltaTime

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error("%s\n" % e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--debug=<dbg options>] <database-file>                               \n" % defaults['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("                         Recognized debug options:                                           \n")
        stdo("                             enter                                                           \n")
        stdo("                             leave                                                           \n")
        stdo("                             verbose                                                         \n")
        stdo("                             cfg                                                             \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --debug=\"enter,leave,verbose\" kernel-sru-workflow.json                          \n" % defaults['app_name'])

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        result = True
        try:
            cfg = defaults
            optsShort = ''
            optsLong  = ['help', 'verbose', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    cfg['verbose'] = True
                    if 'verbose' not in Dbg.levels:
                        Dbg.levels.append('verbose')

                elif opt in ('--debug'):
                    cfg['debug'] = val.split(',')
                    for level in cfg['debug']:
                        if level not in Dbg.levels:
                            Dbg.levels.append(level)

            if result: # No errors yet
                # There might be some bugs listed on the command line.
                #
                if len(args) > 0:
                    cfg['database-file'] = args[0]

        except GetoptError, error:
            raise CmdlineError(error)

        return cfg


# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# GenWorkflowReport
#
class GenWorkflowReport():
    """
    This class/script examines all 'open' bugs. If a given bug was filed against a
    version of Ubuntu that is no longer supported, change the status of that bug
    to "Won't Fix" and add a comment explaining why it was marked as such.
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("GenWorkflowReport.__init__")

        self.cfg    = cfg
        self.importance_color = {
                "Unknown"       : "importance-unknown",
                "Critical"      : "importance-critical",
                "High"          : "importance-high",
                "Medium"        : "importance-medium",
                "Low"           : "importance-low",
                "Wishlist"      : "importance-wishlist",
                "Undecided"     : "importance-undecided"
            }
        self.status_color     = {
                "New"           : "ksw-new",
                "Incomplete"    : "ksw-incomplete",
                "Confirmed"     : "ksw-confirmed",
                "Triaged"       : "ksw-triaged",
                "In Progress"   : "ksw-in_progress",
                "Fix Committed" : "ksw-fix_committed",
                "Fix Released"  : "ksw-fix_released",
                "Invalid"       : "ksw-invalid",
                "Won't Fix"     : "ksw-wont_fix",
                "Opinion"       : "ksw-opinion",
                "Expired"       : "ksw-expired",
                "Unknown"       : "ksw-unknown"
            }


        Dbg.leave("GenWorkflowReport.__init__")

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        Dbg.enter("GenWorkflowReport.initialize")

        try:
            # Process the command line arguments, and any configuration file options. Make sure
            # that any required parameters have been provided.
            #
            self.cfg = Cfg.merge_options(defaults, self.cfg)

            self.html_template = file_load('%ssru-workflow-template.html' % argv[0].replace('gen-workflow-history', ''))
            self.bugs_db = json_load(self.cfg['database-file'])
            self.ubuntu  = Ubuntu()

        except CfgError as e:
            error(e)
            Dbg.leave("GenWorkflowReport.initialize")
            raise Exit()

        Dbg.leave("GenWorkflowReport.initialize")
        return

    def time_delta(self, date1, date2):
        ago = DeltaTime(date1, date2)
        when = '%d days, %d hours' % (ago.days, ago.hours)
        when_style = ''
        if ago.days == 0:
            if ago.hours == 0:
                when_style = 'class="date-age-1"'
            else:
                when_style = 'class="date-age-2"'

        return when_style, when

    # duration
    #
    def duration(self, started, ended):
        start_timestamp = string_to_date(started)
        end_timestamp = string_to_date(ended)
        delta = DeltaTime(start_timestamp, end_timestamp)
        if delta.days == 0:
            retval = delta.hours
        else:
            retval = (delta.days * 24) + delta.hours

        return float(retval) / 24.0

    # main
    #
    def main(self):
        Dbg.enter("GenWorkflowReport.main")

        try:
            self.initialize()

            stats = {}
            kernel_series = KernelSeries()
            series = [ series.codename for series in sorted(kernel_series.series, key=KernelSeries.key_series_name) if series.supported ]

            for ss in series:
                for b in self.bugs_db['bug-collections']['kernel-sru-workflow']['bugs']:
                    bug = self.bugs_db['bug-collections']['kernel-sru-workflow']['bugs'][b]
                    title = bug['title']
                    if 'Ignore this bug' in title: continue
                    title = title.replace('-proposed tracker', '')

                    try:
                        package, other = title.split(':')
                        other = other.strip()
                        if bug['series name'] == ss:
                            if ss not in stats:
                                stats[ss] = {}

                            if package not in stats[ss]:
                                stats[ss][package] = {}

                            stats[ss][package][other] = {}

                            for task in bug['tasks']:
                                name = task['name']
                                if 'Ubuntu' in name: continue

                                if name == 'Kernel SRU Workflow':
                                    #duration = self.duration(bug['date created'], bug['date last updated'])
                                    start_property_key = 'kernel-stable-Prepare-package-start'
                                    end_property_key = 'kernel-stable-Promote-to-updates-end'

                                    try:
                                        duration = self.duration(bug['properties'][start_property_key], bug['properties'][end_property_key])
                                    except KeyError:
                                        duration = 0.0
                                else:
                                    name = name.replace('Kernel SRU Workflow', '')
                                    name = name.strip()
                                    start_property_key = 'kernel-stable-%s-start' % name.capitalize()
                                    end_property_key = 'kernel-stable-%s-end' % name.capitalize()

                                    try:
                                        duration = self.duration(bug['properties'][start_property_key], bug['properties'][end_property_key])
                                    except KeyError:
                                        duration = 0.0

                                stats[ss][package][other][name] = '%.1f' % duration

                    except ValueError:
                        Dbg.verbose("ValueError: Missing ':' from '%s'\n" % (title))

            dump(stats)


        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("GenWorkflowReport.main")
        return


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]

    # The cmdline processing is done here partially so the debug options
    # can be processed right away.
    #
    cmdline = Cmdline()
    try:
        app = GenWorkflowReport(cmdline.process(argv, defaults))
        app.main()
    except CmdlineError as e:
        cmdline.error(e.msg, defaults)

# vi:set ts=4 sw=4 expandtab:

