#!/usr/bin/python3

import json
import logging
import os
import time
import requests
import socket
import ssl
import threading
import time

from argparse import ArgumentParser
from string import punctuation

from ktl.msgq import MsgQueueService, MsgQueueCredentials

from secrets import Secrets


class IrcEvents(threading.Thread):
    # __init__
    #
    def __init__(self, exiting, cfg={}):
        super().__init__()

        self.daemon = True
        self.name = 'IrcEvents'

        self.exiting = exiting
        self.cfg = cfg

        self.announce = None
        self.alive = threading.Event()
        self.socket = None

        cfg['channels'] = cfg['channels'].split()

        self.irc_register = [
            'PASS ' + self.cfg['password'] + '\r\n',
            'NICK ' + self.cfg['nick'] + '\r\n',
            'USER %s 0 * :%s\r\n' % (self.cfg['user'], self.cfg['name']),
        ]
        self.irc_joins = [ 'JOIN ' + channel + '\r\n' for channel in self.cfg['channels'] ]

    # run
    #
    def run(self):
        try:
            self._connect(self.cfg['host'], self.cfg['port'], self.cfg['ssl'])

            self.send_registration()

            while True:
                data = self.socket.recv(4096)
                if not data:
                    raise Exception('IrcClientReader: lost connection')
                logger.debug(data)
                data = data.decode('utf-8')
                lines = data.split('\r\n')
                logger.debug(lines)
                for line in lines:
                    # Ignore blank lines
                    if line == "":
                        continue

                    #line = line.decode('utf-8')
                    logger.debug('line: "%s"' % line)

                    # We only care about 3 commands. PING, JOIN and PRIVMSG.
                    (who, cmd) = self.irc_decode(line)
                    logger.debug(cmd)
                    if cmd[0] == '001':
                        logger.debug('Registration Successful')
                        self.send_join()

                    if cmd[0] == 'PING':
                        self.on_ping(line)

                    elif cmd[0] == 'JOIN':
                        self.on_join(line)
                        self.send_join()

                    elif cmd[0] == 'PRIVMSG':
                        # We care that the other end is alive, their version request is sufficient.
                        self.on_privmsg(line)

        except Exception as e:
            logger.info("{} exploding".format(self.name))
            with self.exiting:
                self.exiting.notify()
            raise e

    # _connect
    #
    def _connect(self, host, port, use_ssl):
        self.raw_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.raw_socket.connect((host, port))
        self.socket = ssl.wrap_socket(self.raw_socket)
        #self.client_socket.settimeout(15)

    # irc_decode
    #
    def irc_decode(self, line):
        who = 'UNKNOWN'
        if line[0] == ':':
            (who, line) = line.split(' ', 1)
            who = who[1:].split('!')[0]

        bits = line.split(' :')
        cmd = bits[0].split(' ')
        if len(bits) > 1:
            cmd.append(bits[1])

        return who, cmd

    # on_ping
    #
    def on_ping(self, line):
        sent = self.raw_send('PONG %s\r\n' % (line.replace('PING :', '')))
        logger.debug('sending PONG')
        self.sent_pong = True

    # on_join
    #
    def on_join(self, line):

        (who, cmd) = self.irc_decode(line)

        logger.debug('line: "%s"' % line)
        logger.debug('who: "%s"' % who)
        logger.debug('cmd: "%s"' % str(cmd))

        if who == self.cfg['nick']:
            logger.debug('I just joined')
            sent = self.raw_send('PRIVMSG %s :%s\r\n' % (cmd[1], '\o/'))
        else:
            logger.debug('%s just joined' % who)

    # privmsg_parse
    #
    def privmsg_parse(self, line):
        cmd  = None
        chan = None
        msg  = None
        who  = None
        me   = False

        s1 = line.split(':', 2)
        logger.debug('s1: %s' % str(s1))

        # If it's not for me, ignore it
        #
        s2 = s1[1].split(' ')
        if s1[2].startswith(self.cfg['nick']) or s2[2] == self.cfg['nick']:
            logger.debug('s2: %s' % str(s2))
            logger.debug('line: "%s"' % line)

            cmd  = s2[1]
            chan = s2[2]
            msg  = s1[2].replace(self.cfg['nick'], '', 1).strip(punctuation + ' ')

            who = line.split('!')[0].replace(':', '')
            logger.debug('     cmd: %s' % cmd)
            logger.debug('    chan: %s' % chan)
            logger.debug('     msg: "%s"' % msg)
            logger.debug('     who: %s' % who)

            me = True

        logger.debug(' ')

        return [me, cmd, chan, msg, who]

    # on_privmsg
    #
    def on_privmsg(self, line):
        logger.info("INCOMING PRIVMSG" + line)
        (forme, cmd, chan, msg, who) = self.privmsg_parse(line)

        logger.debug('      me: %s' % forme)
        logger.debug('     cmd: %s' % cmd)
        logger.debug('    chan: %s' % chan)
        logger.debug('     msg: "%s"' % msg)
        logger.debug('     who: %s' % who)

        if forme:
            # XXX: conve
            sender = who
            channel = chan
            message = msg
            if message is None:
                return

            logger.info("{}: POST {} {} {}".format(self.name, sender, channel, message))

            nick = self.cfg['nick']
            if sender in ('StatServ', nick):
                logger.info("WORKER: POST ignored")
                return

            if channel == nick:
                channel = sender

            command = message
            if command.startswith(nick + ',') or command.startswith(nick + ':'):
                command = command[len(nick)+1:].strip()

            source = {'type': 'irc', 'channel': channel}
            destination = {'type': 'shankbot'}
            message = {'subject': command}

            payload = {'source': source, 'destination': destination, 'message': message}
            logger.info("{}: deliver_to payload={}".format(self.name, payload))
            self.announce.deliver_to(payload)

    def raw_send(self, data):
        return self.socket.send(data.encode())

    # privmsg
    #
    def privmsg(self, chan, msg):
        sent = self.raw_send('PRIVMSG %s :%s\r\n' % (chan, msg))

    # send_registration
    #
    def send_registration(self):
        logger.debug('Registration Start')
        for cmd in self.irc_register:
            logger.debug('send_registration: ' + cmd.split(' ')[0])
            sent = self.raw_send(cmd)
            logger.debug('send_registration: ' + cmd + " = " + str(sent))


    # send_join
    #
    def send_join(self):
        # If we have successfully joined all of our channels we can allow
        # messages to be posted to them.
        if len(self.irc_joins) == 0:
            self.alive.set()

        if len(self.irc_joins) > 0:
            cmd = self.irc_joins.pop(0)
            logger.debug('send_join: ' + cmd.strip())
            sent = self.raw_send(cmd)

    def send(self, channel, line):
        self.alive.wait()
        logger.info("PRIVMSG {} :{}".format(channel, line))
        sent = self.raw_send('PRIVMSG %s :%s\r\n' % (channel, line))
        #sent = self.raw_send('NOTICE %s :%s\r\n' % (channel, line))


class MsgqReader(threading.Thread):

    def __init__(self, exiting, args, mq=None, secrets=None):
        super().__init__()

        self.daemon = True
        self.name = 'MsgqReader'

        self.exiting = exiting
        self.mq = mq
        self.secrets = secrets

        self.irc = None

        self.queue = args.queue
        self.aname = args.name
        self.direct = self.queue + '--' + self.aname
        self.local = args.local

    # _handler
    #
    def _handler(self, payload):
        #print("MsgqReader _handler", payload)
        logger.info("{}: payload={}".format(self.name, payload))

        what = payload.get('type', 'message')

        if what == 'quit':
            self.listen_stop()

        elif what == 'message':
            destination = payload.get('destination', {})
            message = payload.get('message', {})

            text = message.get('summary', message.get('subject', '??'))
            self.irc.send(destination.get('channel'), text)

    # run
    #
    def run(self):
        try:
            if self.mq is None:
                # Pass in credentials if we have them, else use the limited defaults.
                hostname = self.secrets.data.get('amqp-hostname')
                username = self.secrets.data.get('amqp-username')
                password = self.secrets.data.get('amqp-password')
                credentials = None
                if username is not None and password is not None:
                    credentials = MsgQueueCredentials(username, password)

                self.mq = MsgQueueService(service='announce', local=self.local, host=hostname, credentials=credentials, exchange='announce-todo', heartbeat_interval=60)
            logger.info("{}: msgq={}".format(self.name, self.mq))

            self.mq.listen_worker(self.queue, 'announce.irc', self._handler)
            self.mq.listen_worker(self.direct, 'direct.{}.announce.irc'.format(self.aname), self._handler, auto_delete=True)
            logger.debug("{}: Listening", self.name)
            self.mq.listen_start()

            logger.info("{} exiting".format(self.name))
            with self.exiting:
                self.exiting.notify()

        except Exception as e:
            logger.info("{} exploding".format(self.name))
            with self.exiting:
                self.exiting.notify()
            raise e

    def deliver_to(self, payload):
        key = 'announce.' + payload['destination']['type']
        self.mq.publish_threadsafe(key, payload)


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(self, args):
        '''
        '''
        self.args = args

    # main
    #
    def main(self):

        retval = 1

        try:
            exiting = threading.Condition()

            irc_cfg = {
                "host"  : "irc.canonical.com",
                "port"    : 6697,
                'ssl'     : True,
                "password": None,
                "user"    : "kernel-bot",
                "nick"    : "shiv",
                "name"    : 'Kernel Bot',
                "channels": None,
            }

            secrets = Secrets(os.path.join(os.environ['HOME'], '.kernel-announcer-secrets.yaml'))
            for key in list(irc_cfg.keys()):
                value = secrets.data.get('irc-' + key)
                if value is None:
                    continue
                irc_cfg[key] = value

            irc = IrcEvents(exiting, irc_cfg)
            mq = MsgqReader(exiting, args, secrets=secrets)

            irc.announce = mq
            mq.irc = irc

            irc.start()
            mq.start()

            with exiting:
                exiting.wait()
            time.sleep(2)

            logger.info("Exiting")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            logger.error("Aborting ...")

        return retval

if __name__ == '__main__':
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    parser = ArgumentParser(description=app_description)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('--name', default=os.uname().nodename, help='Name of this instance in the admin domain')
    parser.add_argument('--queue', default='announce-irc', help='Name of the queue to use')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    logging.basicConfig(format="%(levelname)05s - %(message)s", level=logging.DEBUG if args.debug else logging.INFO)
    logger = logging.getLogger('announce-irc')
    #logging.setLevel(level=logging.DEBUG if args.debug else logging.INFO)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

