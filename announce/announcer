#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import traceback
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING, error
import socket
import threading
from ktl.cfg                            import Cfg
from ktl.log                            import cdebug, center, cleave, cerror, cwarn
from ktl.messaging                      import Email
from ktl.msgq                           import MsgQueue, MsgQueueService
import time
from subprocess                         import Popen


class AnnounceDeliver:

    def __init__(self, config=None):
        defaults = {}
        paths = []
        if 'HOME' in os.environ:
            paths.append(os.path.join(os.environ['HOME'], '.ktl-announce.yaml'))
        paths.append(os.path.join(os.path.dirname(__file__), 'announce.yaml'))
        for path in paths:
            if os.path.exists(path):
                defaults['configuration_file'] = path
                break

        if config == None:
            config = dict()
        self.cfg = Cfg.merge_options(defaults, config)

        self.routing = self.cfg.get('routing', {})

        self.mq = None

        self.announce_mq = None

    def onward_deliver_to(self, destination, message):
        if not self.announce_mq:
            self.announce_mq = MsgQueueService(service='kernel-announce', local=self.cfg.get('local', False), exchange='announce-todo', heartbeat_interval=60)

        key = 'announce.' + destination['type']
        payload = {'destination': destination, 'message': message}
        self.announce_mq.publish(key, payload)

    def __message(self, key, message, lcfg):
        cfg = self.cfg.get('message', {})
        cfg.update(lcfg)

        if not self.mq:
            self.mq = MsgQueue(local=self.cfg.get('local', False))

        msg = {
            "key"            : "kernel.irc",
            "op"             : cfg['type'],
            "channel"        : cfg['channel'],
            "msg"            : message,
        }
        self.mq.publish(msg['key'], msg)

    def __email(self, key, subject, body, lcfg):
        cfg = self.cfg.get('email', {})
        cfg.update(lcfg)

        email = Email(smtp_server=cfg['smtp_server'], smtp_port=cfg['smtp_port'])
        email.send(cfg['from'], cfg['to'], subject, body)

    def __mattermost(self, destination, message, lcfg):
        cfg = self.cfg.get('mattermost', {})
        cfg.update(lcfg)

        self.onward_deliver_to(cfg, message)

    def deliver_to(self, destination, message):
        if destination.get('type') != 'key' or 'key' not in destination:
            raise ValueErorr('invalid destination')

        # XXX: legacy route drivers take various components.
        subject = message.get('subject')
        summary = message.get('summary')
        body = message.get('body')
        if summary is None:
            summary = subject
        if body is None:
            body = subject

        key = str(destination['key'])
        routing = self.routing.get(key, [])
        cwarn("key {} routing {}".format(key, routing))
        for route in routing:
            cwarn("route {}".format(route))
            if route.get('type') == 'email':
                self.__email(key, subject, body, route)
            elif route.get('type') in ('notice', 'message'):
                self.__message(key, summary, route)
            elif route.get('type') == 'mattermost':
                self.__mattermost(destination, message, route)


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args

        s.queue = s.args.queue
        s.direct = s.args.queue + '--' + s.args.name
        #s.admin = 'admin-' + s.args.name

    # _announce
    #
    def _announce(s, to, message):
        message = to + " " + s.args.name + " " + message

        destination = {'type': 'key', 'key': to}
        message = {'subject': message}

        s.deliver_to(destination, message)

    def deliver_to(s, destination, message):
        announce = AnnounceDeliver()
        announce.deliver_to(destination, message)

    # _handler
    #
    def _handler(s, payload):
        cdebug("TheApp::_handler")

        try:
            # Old format ...
            if 'key' in payload:
                payload = {
                        'destination': {
                            'type': 'key',
                            'key': payload['key'],
                        },
                        'message': payload,
                    }
                del payload['message']['key']
            if 'destination' not in payload or 'message' not in payload:
                raise ValueError("invalid message")

            destination = payload.get('destination')
            message = payload.get('message')

            summary = message.get('summary')
            if summary is None:
                summary = message.get('subject')

            cerror("payload {}".format(payload))
            cwarn("announcing {} ({})".format(destination, summary))
            s.deliver_to(destination, message)

        except Exception as e:
            error("announcement failed: {}".format(str(e)))
            raise
            #print(sys.exc_info()[0])
            print(traceback.format_exc())

            s._announce('announce-control', 'exploded')

        cdebug(payload)


    # main
    #
    def main(s):
        '''
        '''
        retval = 1

        try:
            s.mq = MsgQueueService(service='kernel-announce', local=s.args.local, exchange='announce-todo', heartbeat_interval=60)

            #s.mq.queue_delete(s.args.queue)
            #raise "FOO"

            s._announce('announce-control', 'start')

            q_args = {'x-max-priority': 7}
            s.mq.listen_worker(s.queue, 'announce', s._handler, queue_arguments=q_args)
            s.mq.listen_worker(s.direct, 'direct.{}.announce'.format(s.args.name), s._handler, queue_arguments=q_args, auto_delete=True)

            s.mq.listen_start()

            s._announce('announce-control', 'quit')

            print("Exiting")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    KernelMQ --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('name', help='Name of this instance in the admin domain')
    parser.add_argument('queue', help='Name of the queue to use')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

