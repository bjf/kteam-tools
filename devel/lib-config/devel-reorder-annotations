#!/bin/bash

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

if [ "$#" -ne 3 ]; then
	echo "Usage: $0 <base> <annotations-in> <annotations-out>" 1>&2
	exit 1
fi
base="$1"
annot_in="$2"
annot_out="$3"

list="/tmp/list.$$"
{
	echo "M ROOT"
	"$here/devel-config-tree" "$base/CONFIGS-parser-x86" genorder "$base/CONFIGS-renames"
	"$here/devel-config-tree" "$base/CONFIGS-parser-arm" genorder "$base/CONFIGS-renames"
	"$here/devel-config-tree" "$base/CONFIGS-parser-powerpc" genorder "$base/CONFIGS-renames"
} | LANG=C sort | uniq >"$list"

copy_raw() {
	local menu="$1"

	patn=`echo "$menu *" | sed \
		-e 's/ROOT>>//g' \
		-e 's@/@\\\\/@g' \
		-e 's@(@\\\\(@g' \
		-e 's@)@\\\\)@g' \
		-e 's@ *>> *@ *>> *@g'
	`
	awk '
		/^# Menu: '"$patn"'$/		{ found=1; print; next }
		/^# Menu:/			{ found=0; last }
		(found == 1)			{ print }
	' <"$annot_in"
}

copy_menu() {
	local menu="$1"
	local what

	name=`echo "$menu" | sed \
		-e 's/ROOT>>//g' \
		-e 's/ *>> */ >> /g'
	`
	patn=`echo "$menu *" | sed \
		-e 's/ROOT>>//g' \
		-e 's@/@\\\\/@g' \
		-e 's@(@\\\\(@g' \
		-e 's@)@\\\\)@g' \
		-e 's@ *>> *@ *>> *@g'
	`
	#echo "$name ... " 1>&2

	{
		echo "# Menu: $name"
		# Copy over anything which is _not_ a configuration option.
		awk '
			/^# Menu: '"$patn"'$/		{ found=1; next }
			/^# Menu:/			{ found=0; last }
			/^CONFIG_/			{ next }
			(found == 1)			{ print }
		' <"$annot_in" 
		echo ""
	} | sed -e '
		:a
		/^\n*$/{$d;N;ba
		}
	'
	# Copy over any configuration option listed.
	what=`cat "$list" | grep "^E $menu>>>" | 
		awk -F'>' '{ print $NF }' |
		tr '\n' '|' | sed -e 's/^/CONFIG_(/' -e 's/|$/)[ 	]/'`
	[ "$what" != "" ] && egrep -h "^$what" "$annot_in"
	echo ""
}

copy_raw "HEADER" >"$annot_out"

cat "$list" | grep '^M ' | \
while read junk menu
do
	copy_menu "$menu"
done >>"$annot_out"

# Work out if we lost any configuration options on the way.
grep ^CONFIG_ "$annot_in" | sort >"$list.in"
grep ^CONFIG_ "$annot_out" | sort >"$list.out"

join -t '' -v1 "$list.in" "$list.out" >"$list.awol_config"

cp "$list.in" APW-in
cp "$list.out" APW-out
cp "$list.awol_config" APW-awol

if [ $(wc -l <"$list.awol_config") != "0" ]; then
	{
		echo ""
		echo "## v- UNMATCHED CONFIGS"
		echo ""
		cat "$list.awol_config"
		echo ""
		echo "## ^- UNMATCHED CONFIGS"
		echo ""
	} >>"$annot_out"
fi

# Validate we have copied over every non empty section.
<"$annot_in" \
awk '
	/^# Menu: /			{ which=$0; next }
	/^$/				{ next }
	(which != "")			{ print which; which=""}
' | sed -e 's/  *$//' -e 's/ *>> */ >> /g' | sort >"$list.in"

<"$annot_out" \
awk '
	/^# Menu: /			{ if (which != "") { print which; }; which=$0; next }
	/^$/				{ next }
	(which != "")			{ print which; which=""}
' | sed -e 's/  *$//' -e 's/ *>> */ >> /g' | sort >"$list.out"
join -t '' -v1 "$list.in" "$list.out" | grep -v '^# Menu: FOOTER' >"$list.missing"

# Work out which sections are missing -- and copy it over.
if [ $(wc -l <"$list.missing") != "0" ]; then
	{
		what=`awk '{ print $1 }' <"$list.awol_config" | \
			tr '\n' '|' | sed -e 's/^/(/' -e 's/|$/)[ 	]/'`
		[ "$what" = "" ] && what="__pattern_not_found__"

		echo ""
		echo "## v- UNMATCHED MENUS"
		echo ""
		while read a b menu
		do
			echo "WARNING: unknown -- $menu" 1>&2
			copy_menu "$menu"
			copy_raw "$menu" | egrep -h "^$what"
			echo ""
		done <"$list.missing"
		echo "## ^- UNMATCHED MENUS"
		echo ""
	} >>"$annot_out"
fi

# Drop the bottom back on the bottom.
copy_raw "FOOTER" >>"$annot_out"

# De-duplicate the result.
awk '
	/^$/		{ print; next }
	/^#/		{ print; next }
	($0 in seen)	{ next }
			{ seen[$0] = 1; print }
' <"$annot_out" >"$list"
mv "$list" "$annot_out"
rm -f "$list" "$list.in" "$list.out" "$list.missing" "$list.awol_config"
