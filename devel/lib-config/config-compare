#!/usr/bin/perl

use strict;

use FindBin;                # where was script installed?
use lib $FindBin::Bin;      # use that dir for libs, too

my $P0 = 'config-compare';
my $P = $P0;

#my %values;

use PredicateEngine qw(policy_check %values);

my %options;
my @options;
my @ioptions;

my $policy = 1;

my $info;
my %flags;
my %marks;
my %expected;
my %policy;
my %desc;
my %choice;

my $sort = 0;
my $colour = 0;
my $format = 'wiki';
my $interesting = 0;
my $worthy = 0;
my $worthy_seen = 0;

my $limit_want = "";
my $limit_not = "";

while (1) {
	if ($ARGV[0] eq '--required') {
		open(RQRD, "<$ARGV[1]") || die "$0: $ARGV[1]: open failed - $!\n";
		while (<RQRD>) {
			chomp;

			if (!defined $options{$_}) {
				$options{$_} = 1;
				push(@options, $_);
			}
		}
		close(RQRD);
		shift @ARGV;
		shift @ARGV;

	}  elsif ($ARGV[0] eq '--no-policy') {
		$policy = 0;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--info') {
		$info = $ARGV[1];
		shift @ARGV;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--sort') {
		$sort = 1;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--colour') {
		$colour = 1;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--format') {
		$format = $ARGV[1];
		shift @ARGV;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--interesting') {
		$interesting = 1;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--worthy') {
		$worthy = 1;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--limit-want') {
		$limit_want = $ARGV[1];
		shift @ARGV;
		shift @ARGV;

	} elsif ($ARGV[0] eq '--limit-not') {
		$limit_not = $ARGV[1];
		shift @ARGV;
		shift @ARGV;

	} else {
		last;
	}
}

sub all_noop {
	'';
}

if ($format eq 'wiki') {
	my %f__row_map = (
		'normal'	=> '',
		'build'		=> '<#baffc8>',
		'warning'	=> '<#eee8aa>',
		'inconsistent'	=> '<#ffbac8>',
	);
	my $f__row_colour;
	sub wiki_em {
		"'''" . $_[0] . "'''";
	}
	sub wiki_table_row_colour {
		$f__row_colour = $f__row_map{$_[0]};
	}
	sub wiki_table_row_start {
		"||";
	}
	sub wiki_table_cell {
		$f__row_colour . " " . $_[0] . " ||";
	}
	sub wiki_table_row_end {
		"\n";
	}

	no strict;

	*f_em			= \&wiki_em;
	*f_table_start		= \&all_noop;
	*f_table_row_colour	= \&wiki_table_row_colour;
	*f_table_row_start	= \&wiki_table_row_start;
	*f_table_cell		= \&wiki_table_cell;
	*f_table_row_end	= \&wiki_table_row_end;
	*f_table_end		= \&all_noop;

} elsif ($format eq 'text') {
	my $f__cell_separator;
	sub text_em {
		$_[0];
	}
	sub text_table_row_start {
		$f__cell_separator = '';
	}
	sub text_table_cell {
		my $res = $f__cell_separator . $_[0];
		$f__cell_separator = "\t";
		$res;
	}
	sub text_table_row_end {
		"\n";
	}

	no strict;

	*f_em			= \&text_em;
	*f_table_start		= \&all_noop;
	*f_table_row_colour	= \&all_noop;
	*f_table_row_start	= \&text_table_row_start;
	*f_table_cell		= \&text_table_cell;
	*f_table_row_end	= \&text_table_row_end;
	*f_table_end		= \&all_noop;

} elsif ($format eq 'html') {
	my $id = int(rand(1000000));
	sub html_em {
		if ($_[1] eq 'i') {
			"<i>" . $_[0] . "</i>";
		} else {
			"<b>" . $_[0] . "</b>";
		}
	}
	sub html_table_start {
"<style>
.configtable$id table {
	border-collapse: collapse;
	border: 1px solid #bbbbbb;
}
.configtable$id td {
	border: 1px solid #bbbbbb;
}
.configtable$id .build0, .configtable$id .build1 {
	background-color: #baffc8;
}
.configtable$id .inconsistent0, .configtable$id .inconsistent1 {
	background-color: #ffbac8;
}
.configtable$id .warning0, .configtable$id .warning1 {
	background-color: #eee8aa;
}
.configtable$id .normal1 {
	background-color: #eeeeee;
}
</style>
<div class=\"configtable$id\">
<table>\n";
	}
	my $f__row_class;
	sub html_table_row_colour {
		$f__row_class = " class=\"" . $_[0] . "%R%\"";
	}
	sub html_table_row_start {
		"<tr$f__row_class>";
	}
	sub html_table_cell {
		$_[0] =~ s@LP[:#]+([0-9]+)@<a href="http://bugs.launchpad.net/bugs/\1">LP:\1</a>@g;
		if ($_[1]) {
			"<td title=\"" . $_[1]. "\">" . $_[0];
		} else {
			"<td>" . $_[0]
		}
	}
	sub html_table_row_end {
		"</tr>\n";
	}
	sub html_table_end {
		"</table>\n</div>\n";
	}

	no strict;

	*f_em			= \&html_em;
	*f_table_start		= \&html_table_start;
	*f_table_row_colour	= \&html_table_row_colour;
	*f_table_row_start	= \&html_table_row_start;
	*f_table_cell		= \&html_table_cell;
	*f_table_row_end	= \&html_table_row_end;
	*f_table_end		= \&html_table_end;

} else {
	die "$P: $format: invalid output format\n";
}

if ($info) {
	my ($config, $maybe, $default, $expected, $options, $option, $value, $policy);
	open(INFO, "<$info") || die "$0: $info: open failed - $!\n";
	while (<INFO>) {
		chomp;
		($config, $maybe, $default, $expected, $options) = split(' ', $_, 5);
		push(@ioptions, $config);
		while ($options =~ /\s*(\S+)<(.*?)?>/g) {
			($option, $value) = ($1, $2);
			if ($option eq 'flag') {
				$flags{$config} .= " " . f_em($value);
				$flags{$config, $value} = 1;
			} elsif ($option eq 'mark') {
				$marks{$config, $value} = 1;
			} elsif ($option eq 'note') {
				$flags{$config} .= " $value";
			} elsif ($option eq 'choice') {
				$flags{$config} .= " " . f_em($value, 'i');
				$choice{$config} = 1;
			} elsif ($option eq 'policy') {
				#$policy{$config} = $value;
				#$flags{$config} .= " " . f_em("policy=$value");
				$policy = $value;
			} elsif ($option eq 'desc') {
				$desc{$config} .= $value;
			}
		}
		$values{'Policy', $config} = $expected;
		if ($expected eq 'p') {
			$policy{$config} = $policy;
			if ($policy =~ /^{/) {
				$policy =~ s/'//g; $policy =~ s/: */:/g;
				$policy =~ s/^{//; $policy =~ s/}$//;
			}
			$values{'Policy', $config} = $policy;
		} elsif ($expected ne 'c' && $expected ne '-') {
			$policy{$config} = "value $expected";
		} else {
			delete $policy{$config};
		}
	}
	close(INFO);
}

# No info, no policy checks...
if (!$info) {
	$policy = 0;
}

my @columns = @ARGV;

my $opt;
my $is;
for my $column (@columns) {
	open(CONFIG, "<$column") || die "$0: $column: open failed - $!\n";
	while (<CONFIG>) {
		chomp;

		if ($_ =~ /^# (\S+) is not set/) {
			$opt = $1;
			$is = 'n';
		} elsif ($_ =~ /(\S+?)=(\S+)/) {
			$opt = $1;
			$is = $2;
		} else {
			next;
		}

		next if ($limit_want ne "" && $opt !~ /$limit_want/);
		next if ($limit_not  ne "" && $opt =~ /$limit_not/);

		$values{$column, $opt} = $is;

		if (!defined $options{$opt}) {
			$options{$opt} = 1;
			push(@options, $opt);
		}
	}
	close(CONFIG);
}

if ($sort) {
	@options = sort(@options);
} elsif ($info) {
	@options = @ioptions;
}
	

push(@columns, "Policy") if ($policy);

print f_table_start();

my $titles;

f_table_row_colour('normal');
$titles  = f_table_row_start();
$titles .= f_table_cell(f_em('Option'));
for my $column (@columns) {
	$titles .= f_table_cell(f_em($column));
}
$titles .= f_table_cell(f_em('Comments'));
$titles .= f_table_row_end();
my $entry;
my $cmt;
my $seen;
my $nopolicy;
my $no;

my $ok;
my %ok;

my @interesting = ();
my @normal = ();

if (!$policy) {
	%policy = ();
}
for my $option (@options) {
	next if (!defined $options{$option});
	next if ($flags{$option, 'IGNORE'});
	$seen = '';
	$cmt = '';
	$ok = 1;
	%ok = ();
	$no = 1;
	
	$nopolicy = (!defined $policy{$option} || $policy{$option} eq '-');

	for my $column (@columns) {
		$is = (defined $values{$column, $option})?
				$values{$column, $option} : '-';
		# If we have no policy at all then pick the first valid entry.
		if (!defined $policy{$option} && $is ne '-') {
			$policy{$option} = "value $is";
		}
		if ($policy{$option} &&
		    $policy{$option} ne 'value ?' && 
		    $column ne 'Policy' &&
		    defined $values{$column, $option} &&
		    !policy_check($column, $option, $policy{$option})) {
			$ok = 0;
			$ok{$column} = 0;
		} else {
			$ok{$column} = 1;
		}
		$seen++ if ($is ne '-' && $column ne 'Policy');
		if ($is ne '-' and $is ne 'n') {
			$no = 0;
		}
	}

	if ($colour) {
		if ($seen == 0 || $marks{$option, 'ignore'}) {
			f_table_row_colour('normal');

		} elsif ($flags{$option} =~ /BUILD FAILURE/) {
			f_table_row_colour('build');
			$worthy_seen = 1;

		} elsif (!$ok) {
			f_table_row_colour('inconsistent');
			$worthy_seen = 1;

		} elsif ($nopolicy) {
			f_table_row_colour('warning');
			$worthy_seen = 1;

		} else {
			f_table_row_colour('normal');
		}
	}
	$entry  = f_table_row_start();
	$entry .= f_table_cell($option, $desc{$option});
	for my $column (@columns) {
		$is = (defined $values{$column, $option})?
				$values{$column, $option} : '-';
		if ($ok{$column}) {
			$entry .= f_table_cell($is);
		} else {
			$entry .= f_table_cell(f_em($is));
		}
	}
	if ($seen == 0) {
		$cmt .= " ". f_em('GONE');
	}
	if (!$ok) {
		$cmt .= " " . f_em('Inconsistent');
	}
	if ($flags{$option}) {
		$cmt .= $flags{$option};
	}
	#if ($choice{$option} && $no) {
	#	$cmt .= " " . f_em('ELIDE');
	#}
	$entry .= f_table_cell($cmt);
	$entry .= f_table_row_end();

	if ($interesting && $cmt ne '') {
		push(@interesting, $entry);
	} else {
		push(@normal, $entry);
	}
}

my $cnt = 0;
my $which;
my $row;
my $trow;
for $row (@interesting, @normal) {
	if (($cnt % 35) == 0) {
		$which = int(($cnt++ % 6) / 3);
		$trow = $titles;
		$trow =~ s/%R%/$which/g;
		print $trow;
	}
	$which = int(($cnt++ % 6) / 3);
	$row =~ s/%R%/$which/g;

	print $row;
}
print f_table_end();

if ($worthy == 0 || $worthy_seen == 0) {
	exit(0);
} else {
	exit(1);
}
