#!/usr/bin/python3

import sys
import re
import shlex
import os
import pickle

def child_find(parent, prompt):
    for entry in parent['children']:
        if 'prompt' in entry and entry['prompt'] == prompt:
            return entry
        if 'config' in entry and entry['config'] == prompt:
            return entry
    return None


def children(parent, prefix, toplevel=False, menu=False, config=False):
    for entry in parent['children']:
        if menu and 'menu' not in entry and 'menuconfig' not in entry:
            continue
        if config and 'config' not in entry:
            continue

        if 'config' in entry:
            print(prefix + entry['config'])
        elif 'prompt' in entry:
            print(prefix + entry['prompt'])
        if 'children' in entry and not toplevel:
            children(entry, prefix + '  ', toplevel, menu, config)


def children_list(root, selector_list, toplevel=False, menu=False, config=False):
    parent = root
    for selector in selector_list:
        parent = child_find(parent, selector)
        if not parent:
            raise ValueError(selector + ":selector not found")
    children(parent, '', toplevel=toplevel, menu=menu, config=config) 


def children_scan_iter(parent, toplevel):
    for entry in parent['children']:
        #print("AT", entry.get('config', ''), entry.get('prompt', ''))
        yield entry
        if 'children' in entry and not toplevel:
            for ent in children_scan_iter(entry, toplevel):
                yield ent

def children_scan(root, selector_list, toplevel=False, menu=False):
    parent = root
    for selector in selector_list:
        if "Architecture: " in selector:
            if "Architecture: " + arch == selector:
                continue
            else:
                raise ValueError(selector + ":selector not found")
        parent = child_find(parent, selector)
        if not parent:
            raise ValueError(selector + ":selector not found")
    if menu:
        yield parent
    for entry in children_scan_iter(parent, toplevel):
        yield entry
    

def entry_default(entry):
    default = entry.get('default', '-')
    if default in ('y', 'n', 'm') or default.isdigit():
        pass
    else:
        default = '-'

    return default


def menu_material(entry):
    if 'menu' in entry or \
       'menuconfig' in entry or \
       'choice' in entry or \
       ('config' in entry and 'prompt' in entry and len(entry['children']) > 2):
        return True
    else:
        return False


(cache, cmd) = sys.argv[1:3]
args = sys.argv[3:]

with open(cache, "rb") as cfd:
    params = pickle.load(cfd)
    root = params['root']
    entries = params['entries']
    arch = params['architecture']
    byname = params['byname']

if cmd == 'debug':
    for entry in entries:
        if 'config' in entry:
            name = entry['config']
        else:
            name = entry['prompt']

        pname = ''
        if 'parent' in entry:
            parent = entry['parent']
            while True:
                if 'config' in parent:
                    pname = "'" + parent['config'] + "' " + pname
                else:
                    pname = "'" + parent['prompt'] + "' " + pname
                if 'parent' not in parent:
                    break
                parent = parent['parent']

        print(name, " : ", entry['deps'], " : ", pname, " : ", entry['file'])

elif cmd == 'menus':
    children_list(root, [], toplevel=True, menu=True) 

elif cmd == 'geninfo':
    for entry in entries:
        if 'config' not in entry:
            continue
        if 'prompt' not in entry:
            continue

        name = entry['config']
        prompt = entry['prompt']
        info = entry.get('info', '')

        if entry['type'] == 'bool':
            (options, default, expected) = ('y/n', 'y', '-')
        elif entry['type'] == 'tristate':
            (options, default, expected) = ('y/m/n', 'm', '-')
        else:
            (options, default, expected) = ('-', '-', '-')

        misc = ''

        # Work out if we are a choice.
        if 'parent' in entry and 'choice' in entry['parent']:
            #choices = []
            #for entry in entry['parent']['children']:
            #    #print("ENDCHOICE: child -- " + entry['config'])
            #    choices.append("CONFIG_" + entry['config'])
            #choice_string = ' '.join(choices)
            #misc += ' choice<' + ' '.join(choices) + '>'
            if 'prompt' in entry['parent']:
                misc += ' choice<' + entry['parent']['prompt'] + '>'
            else:
                misc += ' choice<UNKNOWN>'

            expected = 'c'

        print("CONFIG_{0} {1} {2} {3} {4}desc<{5}>{6}".format(name, options, default, expected, entry.get('info', ''), prompt, misc))

elif cmd == 'genrenames':
    print("RESET")
    for entry in entries:
        if 'prompt' in entry:
            mname = entry['prompt']
        else:
            mname = entry['config']
        if 'config' in entry:
            cname = entry['config']
        else:
            cname = entry['prompt']

        # Calculate the menu path.
        pname = list()
        if 'parent' in entry:
            parent = entry['parent']
            while True:
                if menu_material(parent):
                    if 'prompt' in parent:
                        pname.insert(0, parent['prompt'])
                    else:
                        pname.insert(0, parent['config'])
                    #if 'config' in parent:
                    #    pname.insert(0, parent['config'])
                    #else:
                    #    pname.insert(0, parent['prompt'])
                if 'parent' not in parent:
                    break
                parent = parent['parent']

        # Special case menuconfig options such that they are in their own menus.
        if ('menu' in entry or 'menuconfig' in entry) and len(entry['children']) > 0:   
            pname.append(mname)

        print('>>'.join(pname) + "\t" + cname + "\t" + entry['file'] + "\t" + arch)

elif cmd == 'genorder':
    (renames) = args[0]

    menu_rename = []
    config_generic = {}

    with open(renames, "r") as rfd:
        for line in rfd:
            rargs = line.strip().split('\t')
            cmd = rargs[0]

            if cmd == 'menu-rename':
                menu_rename.append((rargs[1], rargs[2]))
            elif cmd == 'config-generic':
                config_generic[rargs[1]] = True


    out_seen = {}
    def out_rename(prefix, menu, element=None):
        if menu not in out_seen:
            out_seen[menu] = True
            if prefix != 'M':
                out_rename('M', menu)

        entry = menu
        if element:
            entry += '>>>' + element
        for replace in menu_rename:
            if entry.startswith(replace[0]):
                length = len(replace[0])
                if len(entry) == length or entry[length:length+1] == '>':
                    entry = entry.replace(replace[0], replace[1], 1)
        print(prefix, entry)
        

    out_rename('M', 'ROOT')
    for entry in entries:
        if 'prompt' in entry:
            mname = entry['prompt']
        else:
            mname = entry['config']
        if 'config' in entry:
            cname = entry['config']
        else:
            cname = entry['prompt']

        pname = list()
        if 'parent' in entry:
            parent = entry['parent']
            while True:
                if menu_material(parent):
                    if 'prompt' in parent:
                        pname.insert(0, parent['prompt'])
                    else:
                        pname.insert(0, parent['config'])
                if 'parent' not in parent:
                    break
                parent = parent['parent']

        if entry['is_arch'] and cname not in config_generic:
            akey = [ "Architecture: " + arch ]
        else:
            akey = []

        if menu_material(entry) and len(entry['children']) > 0:
            out_rename('M', '>>'.join(pname + [ mname ] + akey))
            if 'config' in entry:
                out_rename('E', '>>'.join(pname + [ mname ] + akey), entry['config'])
        elif 'choice' in entry:
            pass
        else:
            out_rename('E', '>>'.join(pname + akey), cname)

elif cmd == 'dump-toplevel':
    children_list(root, args, toplevel=True)

elif cmd == 'dump':
    children_list(root, args)

elif cmd == 'expand':
    menu_rename = []
    config_generic = {}

    if len(args) > 0:
        (renames) = args[0]
        with open(renames, "r") as rfd:
            for line in rfd:
                rargs = line.strip().split('\t')
                cmd = rargs[0]

                if cmd == 'menu-rename':
                    # NOTE: we use these in the opposite order, and ROOT is implied.
                    menu_rename.append((rargs[2].split('>>')[1:], rargs[1].split('>>')[1:]))

    for line in sys.stdin:
        if line.startswith('set '):
            a = shlex.split(line)
            a.pop(0)
            result = {}
            while len(a) >= 1:
                cmd = a.pop(0)
                if cmd in ('+all', '+tree', '!tree', '+tree-top', '!tree-top', '+tree-menu', '!tree-menu', '+tree-menu-top', '!tree-menu-top'):
                    if cmd == '+all':
                        position = []
                    elif '>>' in a[0]:
                        position = a.pop(0).split('>>')
                    else:
                        position = a.pop(0).split(',')

                    if cmd[1:] in ('tree-top', 'tree-menu-top'):
                        toplevel = True
                    else:
                        toplevel = False

                    if cmd[1:] in ('tree-menu', 'tree-menu-top'):
                        menu = True
                    else:
                        menu = False


                    found = False
                    try:
                        for entry in children_scan(root, position, toplevel, menu):
                            if 'config' in entry:
                                #print("ADD", entry['config'])
                                if cmd[0] == '+':
                                    result[entry['config']] = entry
                                elif entry['config'] in result:
                                    del result[entry['config']]
                        found = True
                    except ValueError:
                        #print('WARNING: ' + ':'.join(position) + ' not found', file=sys.stderr)
                        pass

                    if not found:
                        for others in menu_rename:
                            (one, two) = others
                            if len(position) >= len(one) and position[0:len(one)] == one:
                                position2 = two + position[len(one):]
                                try:
                                    for entry in children_scan(root, position2, toplevel, menu):
                                        if 'config' in entry:
                                            #print("ADD", entry['config'])
                                            if cmd[0] == '+':
                                                result[entry['config']] = entry
                                            elif entry['config'] in result:
                                                del result[entry['config']]
                                    found = True
                                except ValueError:
                                    #print('WARNING: ' + ':'.join(position2) + ' not found', file=sys.stderr)
                                    pass
                            if found:
                                break
                    if not found:
                        print('WARNING: ' + ':'.join(position) + ' not found', file=sys.stderr)

                elif cmd == '+pattern':
                    pattern = a.pop(0)
                
                    for entry in children_scan(root, []):
                        if 'config' in entry and re.search(pattern, entry['config']):
                            #print("PATTERN", pattern, entry.get('config',''))
                            result[entry['config']] = entry

                elif cmd in ('?pattern', '!pattern'):
                    pattern = a.pop(0)

                    keys = list(result.keys())
                    for key in keys:
                        if cmd[0] == '?':
                            if not re.search(pattern, key):
                                del result[key]
                        else:
                            if re.search(pattern, key):
                                del result[key]

                elif cmd == '?type':
                    pattern = a.pop(0)

                    keys = list(result.keys())
                    for key in keys:
                        if result[key]['type'] != pattern:
                            del result[key]

                elif cmd in ('?flag', '!flag', '?mark', '!mark'):
                    pattern = cmd[1:] + "<" + a.pop(0) + ">"

                    keys = list(result.keys())
                    for key in keys:
                        if 'info' in result[key] and pattern in result[key]['info']:
                            if cmd[0] == '!':
                                del result[key]
                        else:
                            if cmd[0] == '?':
                                del result[key]

                elif cmd == '=':
                    to = a[0]
                    for key in sorted(result.keys()):
                        result[key]['info'] = result[key].get('info', '') + " " + ' '.join(a[1:])
                        if to == 'D':
                            a[0] = entry_default(result[key])
                            if a[0] != '-':
                                result[key]['info'] = result[key].get('info', '') + " note<default>"
                        if a[0] != '-':
                            result[key]['info'] = result[key].get('info', '') + " mark<annotated>"
                        default = entry_default(result[key])
                        if to == 'D' and default != '-':
                            print("CONFIG_" + key + " " + ' '.join(a) + " note<default:" + default + ">")
                        else:
                            print("CONFIG_" + key + " " + ' '.join(a))

                        entry = result[key]
                        if 'parent' in entry and 'choice' in entry['parent'] and \
                           entry['type'] == 'bool':
                                print("CONFIG_" + entry['config'] + " C")
                    break

                else:
                    print("ERROR: " + cmd + ": invalid set", file=sys.stderr)
                    print(line, end='', file=sys.stderr)
                    break

            continue

        # Pull the info updates off the config lines so they can be checked
        # in the other rules.
        if line.startswith("CONFIG_"):
            a = line.split(None, 2)
            name = a[0][7:]

            if len(a) < 2:
                print("ERROR: " + name + ": badly formed line", file=sys.stderr)
                print("ERROR: " + line, end='', file=sys.stderr)

            if name in byname:
                if len(a) >= 3:
                    byname[name]['info'] = byname[name].get('info', '') + ' ' + (' '.join(a[2:])).strip()
                if a[1] == 'D':
                    a[1] = entry_default(byname[name])
                    if a[1] != '-':
                        byname[name]['info'] = byname[name].get('info', '') + ' note<default>'
                if a[1] != '-':
                    byname[name]['info'] = byname[name].get('info', '') + ' mark<annotated>'
                print(' '.join(a))

            if name in byname:
                entry = byname[name]
                if 'parent' in entry and 'choice' in entry['parent'] and \
                   entry['type'] == 'bool':
                    for entry in entry['parent']['children']:
                        print("CONFIG_" + entry['config'] + " C")
            continue

        print(line, end='')
