#!/usr/bin/python3

import sys
import os
import re
import shlex
import pickle

comment_re       = re.compile(r'^(\s*#.*|\s*)$')

experimental_re = re.compile(r'\bEXPERIMENTAL(=n)?\b')
staging_re      = re.compile(r'\bSTAGING(=n)?\b')
debug_re        = re.compile(r'\bDEBUG_KERNEL(=n)?\b')
broken_re       = re.compile(r'\bBROKEN(=n)?\b')

def join(a, parent):
    global root

    a['parent'] = parent
    parent['children'].append(a)

    while True:
        add_deps(a, parent['deps'])
        if 'parent' not in parent:
            break
        parent = parent['parent']

entries = []
byname = {}
def emit(a):
    global entries

    if not a:
        return
    a['children'] = list()

    if 'prompt' not in a or 'comment' in a:
        return

    D = None
    if 'config' in a and a['config'] == 'NET_VENDOR_ADAPTEC':
        D = a['config']
    #if 'config' in a and a['config'] == 'IWLWIFI_UAPSD':
    #    D = a['config']

    #if 'menu' in a and 'prompt' in a and a['file'].startswith('arch/'):
    #    arch = a['file'].split('/')[1]
    #    a['prompt'] += ' (' + arch + ')'
    if a['file'].startswith('arch/'):
        a['is_arch'] = True
    else:
        a['is_arch'] = False

    # Your parent is the preceeding menu items if you are directly dependant
    # on them, or the surrounding menu otherwise.
    for parent in menu:
        if 'menu' in parent:
            if D:
                print(D, "join: menu")
            join(a, parent)
            break
        elif 'choice' in parent:
            if D:
                print(D, "join: choice")
            if 'choice' in a:
                raise ValueError('choice in choice')
            join(a, parent)
            break
        elif 'config' in parent:
            match = re.search(r'\b' + parent['config'] + r'(=n)?\b', a['deps'])
            if match:
                if D:
                    print(D, "join: config dep", parent['config'], a['deps'])
                #print("PARENT: ", parent['config'])
                join(a, parent)
                break

    # Flagging.
    if 'DANGEROUS' in a['prompt']:
        a['info'] = a.get('info', '') + "flag<DANGEROUS> "
    if 'DEPRECATED' in a['prompt']:
        a['info'] = a.get('info', '') + "flag<DEPRECATED> "
    match = experimental_re.search(a['deps'])
    if match or 'EXPERIMENTAL' in a['prompt']:
        a['info'] = a.get('info', '') + "flag<EXPERIMENTAL> "
    match = staging_re.search(a['deps'])
    if match:
        a['info'] = a.get('info', '') + "flag<STAGING> "
    match = debug_re.search(a['deps'])
    if match:
        a['info'] = a.get('info', '') + "flag<DEBUG> "
    #match = broken_re.search(a['deps'])
    #if match or 'BROKEN' in a['prompt']:
    #    a['info'] = a.get('info', '') + "flag<BROKEN> "

    menu.insert(0, a)
    entries.append(a)

    if 'config' in a:
        byname[a['config']] = a


def add_deps(a, deps):
    if deps == '':
        return
    if a['deps'] != '':
        a['deps'] += " && "
    a['deps'] += "( " + deps + " )"


def add_deps_list(a, deps_list):
    for deps in deps_list:
        add_deps(a, deps)


var_ref_re = re.compile(r'\$(?:\(([^\)]+)\)|([\w\-]+))')
def expand_vars(filename, arch):
    vars = {'SRCARCH': arch}
    new_filename = var_ref_re.sub(
			lambda match: vars[match.group(1) or match.group(2)],
			filename)
    return new_filename


root = {'prompt': 'ROOT', 'menu': True, 'deps': '', 'children': list()}
menu = [ root ]
ifs = list()
def read_kconfig(arch, base, filename):
    global menu
    global ifs

    #print("FILE:" + filename)
    A = None
    with open(os.path.join(base, filename)) as fd:
        text = 0
        current = None
        for line in fd:
            #print(line, end='')

            # Drop comments and blank lines.
            match = comment_re.match(line)
            if match:
                continue

            # Drop text blocks -- these end when the indent reduces
            # blank lines do not count!  But hitting indent of 0 _otherwise_
            # does.
            if text:
                # Work out effective indent.
                indent = 0
                for char in line:
                    if char == ' ':
                        indent += 1
                    elif char == '\t':
                        indent = (indent & ~7) + 8
                    else:
                        break

                if text == True:
                    text = indent
                if (indent  != 0 or line[1] in (' ', '\t')) and indent >= text:
                    continue
            text = 0

            # Pull the command lines apart.
            #print(text, line, end='')
            try:
                a = shlex.split(line, comments=True)
            except:
                print("bad line in " + filename + "<" + line + ">")
                raise

            #if filename == 'kernel/Kconfig.hz':
            #    print(a)

            if a[0] == 'source':
                emit(A)
                A = None
                menu_keep = list(menu)
                ifs_keep = list(ifs)
                fname = expand_vars(a[1], arch)
                read_kconfig(arch, base, fname)
                ifs = ifs_keep
                menu = menu_keep

                #print("FILE:" + filename)
            elif a[0] == 'config':
                emit(A)
                A = {'file': filename, 'config': a[1], 'deps': ''}
                add_deps_list(A, ifs)
            elif a[0] == 'menuconfig':
                emit(A)
                A = {'file': filename, 'config': a[1], 'menuconfig': True, 'deps': ''}
                add_deps_list(A, ifs)
            elif a[0] == 'choice':
                emit(A)
                A = {'file': filename, 'choice': True, 'deps': ''}
                add_deps_list(A, ifs)
            elif a[0] == 'menu':
                emit(A)
                A = {'file': filename, 'prompt': a[1], 'menu': True, 'deps': ''}
                add_deps_list(A, ifs)
            elif a[0] == 'comment':
                emit(A)
                A = {'file': filename, 'prompt': a[1], 'comment': True, 'deps': ''}
            elif a[0] == 'endmenu':
                emit(A)
                A = None
                while True:
                    x = menu.pop(0)
                    #print("ENDMENU: ", x)
                    if 'menu' in x:
                        break
            elif a[0] == 'endchoice':
                emit(A)
                A = None
                #print(filename, '  ', line, end='')
                while True:
                    x = menu.pop(0)
                    #print("ENDCHOICE: ", x['prompt'])
                    if 'choice' in x:
                        break
            elif a[0] == 'if':
                ifs.insert(0, a[1])
            elif a[0] == 'endif':
                ifs.pop(0)

            # config attributes
            if a[0] == 'help' or a[0] == '---help---':
                text = True
            elif a[0] in ('boolean', 'bool', 'tristate', 'int', 'string'):
                if a[0] == 'boolean':
                    a[0] = 'bool'
                A['type'] = a[0]
                if len(a) > 1:
                    A['prompt'] = a[1].strip()
                if len(a) > 2 and a[2] == 'if':
                    add_deps(A, ' '.join(a[3:]))
            elif a[0] == 'def_bool':
                A['type'] = 'bool'
            elif a[0] == 'def_tristate':
                A['type'] = 'tristate'
            elif a[0] == 'prompt':
                A['prompt'] = a[1].strip()
                if len(a) > 2 and a[2] == 'if':
                    add_deps(A, ' '.join(a[3:]))
            elif a[0] == 'depends' and a[1] == 'on':
                add_deps(A, ' '.join(a[2:]))
            elif a[0] == 'default':
                A['default'] = a[1];
    emit(A)

(arch, directory, filename, cache) = sys.argv[1:5]

root['file'] = filename
#root_arch['file'] = filename
#root_arch['prompt'] = arch

read_kconfig(arch, directory, filename)

#def flatten(parent):
#    new_children = []
#    promoted = False
#    for entry in parent['children']:
#        if 'children' in entry:
#            flatten(entry)
#        new_children.append(entry)
#        if 'menu' not in entry and 'menuconfig' not in entry and \
#            'choice' not in entry and 'choice' not in parent and \
#           len(entry['children']) < 2:
#            for child in entry['children']:
#                print("FLATTEN: promoting", child.get('config', entry.get('prompt', '??')))
#                child['parent'] = parent
#                new_children.append(child)
#                promoted = True
#            entry['children'] = []
#    if promoted:
#        print("FLATTEN2:", len(parent['children']), len(new_children))
#    parent['children'] = new_children
            

def fake_menu(parent):
    is_menu = False
    for entry in parent['children']:
        if 'children' in entry:
            if fake_menu(entry):
                if 'menu' not in entry and 'menuconfig' not in entry:
                    #print('FAKEMENU', entry.get('config', ''), entry.get('prompt', ''))
                    entry['menu'] = True
                
        if 'menu' in entry or 'menuconfig' in entry:
            is_menu = True

    return is_menu

#flatten(root)
#fake_menu(root)

with open(cache, "wb+") as cfd:
    pickle.dump({
        'directory': directory,
        'filename': filename,
        'architecture': arch,
        'root': root,
        'entries': entries,
        'byname': byname
    }, cfd)
