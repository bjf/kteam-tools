#!/usr/bin/python3

import sys
import os
import re

(fmt, prefix, order, annotations) = sys.argv[1:5]
config_files = sys.argv[5:]


# Load up the annotations, extracting the policy specifiers.
info_option = re.compile(r'\s*(\S+)<(.*?)>')
annot = {}
note = {}
with open(annotations) as annotationsf:
    for line in annotationsf:
        line = line.strip()

        if not line.startswith('CONFIG_'):
            continue

        a = line.split(None, 2)
        while len(a) < 3:
            a.append('')
        (config, value, options) = a

        tmp = annot.setdefault(config, {})

        # Compatibility
        if value not in ('-', 'p', 'C'):
            options += " policy<{'*': '" + value + "'}>"
        
        for match in info_option.finditer(options):
            cmd = match.group(1)
            if cmd == 'policy':
                try:
                    pol = eval(match.group(2))
                    if cmd in tmp and tmp[cmd] != pol:
                        print("ERROR: {}: duplicate policy '{}' '{}'".format(config, tmp[cmd], match.group(2)))
                    tmp[cmd] = pol
                except SyntaxError:
                    print("ERROR: {}: invalid policy '{}'".format(config, match.group(2)))
                    tmp[cmd] = None

            elif cmd not in tmp:
                tmp[cmd] = match.group(2)


def policy_lookup(policy, arch, flavour):
    want = '-'
    for which in [arch + '-' + flavour, arch + '-*', '*-' + flavour, arch, '*']:
        if which in policy:
            want = policy[which]
            break
    return want 


# Load up the per flavour configs.
values = {}
configs = []
for config in config_files:
    name = os.path.basename(config.replace('-config.flavour.', ' '))
    (arch, flavour) = name.split(' ')
    configs.append((arch, flavour))

    with open(config) as configf:
        for line in configf:
            if line.startswith('CONFIG_'):
                (config, value) = line.strip().split('=', 1)
            elif line.startswith('# CONFIG_'):
                (config, value) = (line.strip().split()[1], 'n')
            else:
                continue
            values[(arch, flavour, config)] = value


def emit_header_html():
    res =  """\
<html>
<head>
<title>{title}</title>
<style>
#.row_bad {{ background-color: red; }}
.cell_bad {{ color: red; }}
table.matrix {{
    border-collapse: collapse;
}}
table.matrix th {{
    text-align: left;
}}
table.matrix td {{
    padding: 5px;
}}
.row:nth-child(6n+1) {{ background-color: #eeeeee; }}
.row:nth-child(6n+2) {{ background-color: #eeeeee; }}
.row:nth-child(6n+3) {{ background-color: #eeeeee; }}
#.row:nth-child(even) {{ background-color: lightgrey }}
.pointer {{ cursor: pointer; }}
</style>
</head>""".format(title='Config Summary')

    return res


def emit_html(entries):
    title = entries.pop(0)
    title = title.replace('>>', ' >> ')
    interesting = False

    res  = "<h2>" + title + "</h2>\n"

    res += "<table class=\"matrix\">\n"
    res += "<tr class=\"row\"><th>Option"
    for config in configs:
        res += "<th>" + ' '.join(config)
    res += "<th>Notes</tr>\n"

    for entry in entries:
        (config, vals) = (entry[0], entry[1:])
        tmp = annot.setdefault(config, {})

        rcls = "row_good"
        cells = ''
        for (column, entry) in zip(configs, vals):
            (arch, flavour) = column
            cls = "cell_good"
            if 'policy' in tmp and tmp['policy']:
                want = policy_lookup(tmp['policy'], arch, flavour)
                if want != entry:
                    cls = "cell_bad"
                    rcls = "row_bad"
                    entry += "&nbsp;(&rarr;" + want + ")"
                    interesting = True
            cells += "<td class=\"" + cls + "\">" + entry
        res += "<tr class=\"row " + rcls + "\"><td>" + config 
        res += cells
        res += "<td>" + tmp.get('note', '') + "</tr>\n"
    
    res += "</table>"

    return (interesting, res)


if fmt == 'html':
    emit_header = emit_header_html
    emit = emit_html


else:
    print("UKNOWN FORMAT")
    sys.exit(1)


out_full = open(prefix + "." + fmt, "w")
out_issues = open(prefix + "-issues." + fmt, "w")


def emit_record(record):
    (interesting, data) = emit(entries)

    if interesting:
        print(data, file=out_issues)
    print(data, file=out_full)


print(emit_header(), file=out_full)
print(emit_header(), file=out_issues)

# Emit the menus in order.
entries = []
with open(order) as orderf:
    for line in orderf:
        if line[0] == 'M':
            if len(entries):
                emit_record(entries)

            title = line.strip()[8:]
            entries = [ title ]

        elif line[0] == 'E':
            which = 'CONFIG_' + line.strip().split('>>>')[1]
            columns = [ which ]
            for config in configs:
                (arch, flavour) = config
                columns.append(values.get((arch, flavour, which), '-'))

            entries.append(columns)

if len(entries):
    emit_record(entries)


out_issues.close()
out_full.close()
