#!/usr/bin/python3

import sys
import re

info_option = re.compile(r'\s*(\S+)<(.*?)>')

# Load in the tree annotations.
negatives = {}
annotations = {}
for line in sys.stdin:
    if line[0] in ('#', '\n'):
        continue

    line = line.rstrip()
    a = line.split(None, 1)
    if len(a) != 2:
        a.append('')
    if len(a) != 2:
        sys.stderr.write(line + '\n')
    (config, info) = a

    if info == 'C':
        negatives[config] = True
        continue

    if config not in annotations:
        annotations[config] = info
    else:
        oinfo = annotations[config]
        info = oinfo + ' ' + info

        # Elide duplicate flags and marks.
        ninfo = ''
        flags = {}
        matches = info_option.finditer(info)
        for match in matches:
            flag_type = match.group(1)
            flag_value = match.group(2)
            flag_key = match.group(1) + match.group(2)
            if flag_type in ('flag', 'mark', 'note'):
                if flag_key in flags:
                    continue
                flags[flag_key] = True
            
            ninfo += match.group(0).strip() + ' '

        annotations[config] = ninfo.strip()

# Handle any pending negatives from 'choices'.
#for config in negatives.keys():
#    if config in annotations:
#        nvalue = annotations[config]
#        if nvalue == '-':
#            annotations[config] = ('n', annotations[config])
#    else:
#        annotations[config] = 'value n'

# Load in the various architecture lists, take the first one for each option.
# Apply annotations as above as we go.
seen = {}
for config in annotations:
    info = annotations[config]

    print(config + ' ' + info.strip())
