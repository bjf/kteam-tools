#!/usr/bin/env python3
import yaml
import argparse
import os
import re
from datetime   import datetime, timedelta

# the so-trello root dir needs to be on PYTHONPATH
from trellotool.trellotool              import TrelloTool
from ktl.kernel_series                  import KernelSeries
from ktl.utils                          import run_command

class TrelloError(Exception):
    pass


class UpstreamBoard:
    def __init__(self, tt, name, dryrun=False):
        """
        :param tt: TrelloTool object
        :param name: name of the board
        """
        self.dryrun = dryrun
        self.tt = tt
        self.name = name
        self.id = None
        self.url = None
        self.default_list_name = None

    def lookup_board_id(self):
        if self.dryrun:
            self.id = 0
            self.url = 'http://this.is.a.dryrun.info'
            return

        for board in self.tt.trello.member_boards('me'):
            if board['name'] == self.name:
                self.id = board['id']
                self.url = board['url']
                return
        raise TrelloError("Could not find id for board '%s'" % self.name)

    def lookup_list_id(self, list_name):
        if self.dryrun:
            return 'http://this.is.a.dryrun.info'

        for board_list in self.tt.trello.board_lists(self.id):
            if board_list['name'] == list_name:
                list_id = board_list['id']
                return list_id
        raise TrelloError("Could not find id for list '{}'".format(list_name))

    def add_card(self, name, desc=None, list_name=None):
        """
        Add the given card to the default list board

        :param name: card name
        :param desc: card description
        :param list_name: optional alternative list target
        :return: None
        """
        if list_name is None:
            list_name = self.default_list_name
        list_id = self.lookup_list_id(list_name)

        params = {
            'name': name,
            'pos': 'bottom',
        }
        if desc:
            params['desc'] = desc

        if self.dryrun:
            print('DRY: Add "{}" card to "{}" on board "{}"'.format(name, list_name, self.name))
            if desc:
                print('DRY:     "{}"'.format(desc))
        else:
            print('Adding card: {}'.format(name))
            self.tt.trello.list_addcard(list_id, **params)


class RCCardsCreator:
    def __init__(self, args):
        """
        :param args: argparse args object
        """

        self.args = args
        match = re.fullmatch('v?([0-9]+\.[0-9]+(?:-rc[0-9]+)?)', args.version)
        if match is None:
            print('Error: Invalid version {}'.format(args.version))
            exit(1)
        self.version = match.group(1)
        self.config_file = args.config
        self.config = {}
        self.config_load()

        self.tt = TrelloTool()
        self.tt.assert_authenticated()

    def config_load(self):
        with open(self.config_file, 'r') as cfd:
            self.config = yaml.safe_load(cfd)

    def create(self):
        """
        Create the board, the lists and the cards and add the initial members
        of the board, taking the info from the config file

        :return: None
        """
        # create the board with the lists on the organization
        board_title = self.config['board']['prefix_name'] + self.version
        board = UpstreamBoard(self.tt, board_title, dryrun=self.args.dry_run)
        board.lookup_board_id()

        # add the cards to the board, under the default list
        for card in self.config['cards']:
            card_desc = None
            if 'description' in card:
                # Fields in the yaml file get encoded with escapes when it's loaded.
                # Un-escape the card description so they have the desired formatting.
                card_desc = card['description'].encode().decode('unicode_escape')

            card_list = None
            if 'list' in card:
                card_list = card['list']

            card_name = card['name'].replace('%v', self.version)
            card_desc = card_desc.replace('%v', self.version)
            board.add_card(card_name, card_desc, card_list)

        if self.args.dry_run:
            print("This was a dry-run - cards were NOT created")
        else:
            print("Board '{}' created cards".format(self.name))


if __name__ == '__main__':
    retval = 0
    default_config = '%s/create-rc-tasks.yaml' % os.path.dirname(__file__)
    description = 'Add release candidate tasks to upstream board'
    epilog = '''
The script reads the configuration from a yaml file yaml and adds tasks
to the upstream board for the specified kernel version.

Examples:
    Run with the default options:
    $ create-rc-tasks 5.7-rc1

    Do not create anything, just print what would be done:
    $ create-rc-tasks --dry-run 5.7-rc1
'''.format(default_config)
    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('version', metavar='VERSION', help='upstream kernel version',
                        action='store')
    parser.add_argument('--config', metavar='CONFIG',
                        help='config yaml file (default: {0})'.format(default_config),
                        required=False, action='store', default=default_config)
    parser.add_argument('--dry-run', help='only print steps, no action done', required=False,
                        action='store_true', default=False)
    args = parser.parse_args()
    try:
        RCCardsCreator(args).create()
    except TrelloError as e:
        retval = 1
        print('Error: {}'.format(e))

    exit(retval)
