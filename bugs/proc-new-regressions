#!/usr/bin/env python
#
# Find any and all Launchpad bugs that have a status of "New" and have one of the
# regression tags ("regression-potential", "regression-release", "regression-update").
# After this script is run, there should not be any bugs that match those conditions.
# The bugs should have a different status, whether that is "Confirmed" or "Incomplete"
# depending on the logs attached by the original submitter to the bug.
#

from sys                                import argv
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error
from ktl.std_app                        import StdApp
from lpltk.LaunchpadService             import LaunchpadService
from ktl.kernel_bug                     import KernelBug
from ktl.kernel_series                  import KernelSeries
from datetime                           import datetime
import re

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--config=<cfg file>] [--debug=<dbg options>]                         \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location. The configuration file is used by the         \n")
        stdo("                         underlying LP library (lpltk).                                      \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("        --bugs=<bug-list>                                                                    \n")
        stdo("                         Use a comma separated list of bug id's and use that list            \n")
        stdo("                         instead of doing a LP task search for 'New' bugs with one           \n")
        stdo("                         of the regressions tags. This is a handy debugging aid.             \n")
        stdo("                                                                                             \n")
        stdo("        --package                                                                            \n")
        stdo("                         This must accompany any use of the --bugs command line switch.      \n")
        stdo("                         When a search is done, it is done for a source package, when        \n")
        stdo("                         specific bugs are processed, we need to know which tasks are        \n")
        stdo("                         to be targeted.                                                     \n")
        stdo("                                                                                             \n")
        stdo("        --show                                                                               \n")
        stdo("                         A less verbose, verbose for when you just want to know what         \n")
        stdo("                         changes the script is making to bugs.                               \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])
        stdo("        %s --bugs=519841 --package=linux                                                     \n" % self.cfg['app_name'])
        stdo('        %s --bugs="519841,743907" --package=linux                                            \n' % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=', 'bugs=', 'package=', 'show' ]
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif (opt == '--show'):
                    self.cfg['show'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

                elif opt in ('--bugs'):
                    self.cfg['bug ids'] = []
                    for v in val.split(','):
                        self.cfg['bug ids'].append(v.strip())

                elif opt in ('--package'):
                    self.cfg['package'] = val

        except GetoptError as e:
            print(e, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):

        if 'bug ids' in cfg and 'package' not in cfg:
            raise CmdlineError('You must specify a source package for the bugs specified.')
        return

# ProcessNewRegressionBugsErrors
#
class ProcessNewRegressionBugsErrors(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# ProcessNewRegressionBugs
#
class ProcessNewRegressionBugs(StdApp):
    """
    This class is for finding all bugs that have a status of "New" and contain one of
    the regression tags.
    """

    # __init__
    #
    def __init__(self):
        self.defaults = {}
        self.defaults['show'] = False
        self.defaults['search_tags'] = [   # A list of the tags we care about
            'regression-potential',
            'regression-release',
            'regression-update'
        ]
        StdApp.__init__(self)

        self.toshow = ''

    # __initialize
    #
    # A separate initialize that we can control when it gets called (not
    # when the object is instantiated).
    #
    def __initialize(self):
        self.kernel_series = KernelSeries()

        if 'staging' in self.cfg:
            self.defaults['launchpad_services_root'] = 'qastaging'
        self.verbose(" . Connecting to Launchpad\n")
        self.lp = LaunchpadService(self.defaults)

        # The service.distributions property is a collection of distributions. We
        # pretty much only care about one, 'ubuntu'.
        #
        self.distro = self.lp.distributions['ubuntu']

        if 'debug' in self.cfg and 'kbug' in self.cfg['debug']:
            KernelBug.debug = True

        return

    # __get_relevant_task
    #
    def __get_relevant_task(self, bug, pkg):
        retval = None
        for t in bug.tasks:
            task       = t.bug_target_name
            p = task.replace(' (Ubuntu)', '')
            if pkg == p:
                retval = t
                break
        return retval

    # __verbose_bug_info
    #
    def __verbose_bug_info(self, bug):
        if 'verbose' in self.cfg and self.cfg['verbose']:
            self.cfg['verbose'] = False
            print(" ")
            print("    %s: %s" % (bug.id, bug.title))
            print(" ")

            #print("        Series: %s (%s)" % self.determine_series(bug))
            tags = ""
            for t in bug.tags:
                tags += t
                tags += " "
            print("        Tags:")
            print("            %s" % (tags))

            tasks = bug.tasks
            print("        Tasks:")
            for task in tasks:
                print("            %45s %20s %20s" % (task.bug_target_name, task.status, task.importance))
            self.cfg['verbose'] = True

    # main
    #
    def main(self):
        cmdline = Cmdline()
        using_search_since = False
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.__initialize()

            if 'bug ids' in self.cfg:
                for bug_id in self.cfg['bug ids']:
                    self.toshow = ''

                    task = self.__get_relevant_task(self.lp.get_bug(bug_id), self.cfg['package'])
                    self.bug_task_process(task)

                    if self.cfg['show']:
                        print(self.toshow)

            else:
                # All source projects the kernel team are interesed in.
                #
                interested_source_packages = Ubuntu.kernel_source_packages
                interested_source_packages = ['linux'] # FIXME bjf - for development we are only interested in one package

                for package_name in interested_source_packages:
                    self.verbose('%s\n' % package_name)

                    source_package = self.distro.get_source_package(package_name)

                    # Searching for bug tasks, the search can be quite complicated and made up
                    # of several components. The following can be combined in many ways to get
                    # the search you want. The search happens on the server and returns a
                    # collection of bug tasks that match the search criteria.
                    #
                    # tasks = pkg.search_tasks(tags=search_tags, tags_combinator=search_tags_combinator,
                    #                          status=self.cfg['task_search_status'], modified_since=search_since)
                    #
                    search_tags_combinator = "Any"
                    search_status          = ["New"] # A list of the bug statuses that we care about

                    try:
                        self.verbose(" . Searching ...")
                        self.verbose("   since: The Beginning")
                        tasks = source_package.search_tasks(status=search_status, tags=self.cfg['search_tags'], tags_combinator=search_tags_combinator)
                        self.verbose("\n")

                        limit = 5
                        this_package_bugs = None
                        for task in tasks:
                            self.toshow = ''

                            self.bug_task_process(task)

                            if self.cfg['show'] and self.toshow != '':
                                print(self.toshow)

                            self.verbose('\n\n')
                            if limit == 0:
                                break
                            limit -= 1

                    except:
                        raise

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Keyboard interrupt")
            pass

        # Handle application errors.
        #
        except ProcessNewRegressionBugsErrors as e:
            error(e.msg)

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

    #--------------------------------------------------------------------------
    # process_bug
    #
    def bug_task_process(self, task):
        try:
            self.verbose('----------------------------------------------------------------------------------------------\n')
            bug = KernelBug(task.bug)
            self.__verbose_bug_info(bug)
            self.verbose("        Checks:\n")

            bi = Bugs.bug_info(bug, datetime.utcnow(), task)   # FIXME bjf: should this be "bug_task_info"?

            # Series
            #
            # Is the bug filed against a series we no longer support?
            #
            (series_name, series_version) = bug.series
            if series_name != '':
                series = kernel_series.lookup_series(series_name)
                if not series:
                    self.verbose("           - Unknown series identified (%s).\n" % (series_name,))
                elif series.supported:
                    self.verbose("           - Supported series.\n")
                else:
                    self.verbose("           - Filed against a series that is no longer supported.\n")
            else:
                self.verbose("           - Unable to determine the series the bug was filed against.\n")

            # Logs
            #
            if bug.has_required_logs:
                if self.toshow == '':
                    self.toshow += 'Bug: %s  ' % bug.id
                self.toshow += 'Status: "%s" -> "Confirmed"; ' % (bi['status'])
                self.verbose("           - Has the required logs.\n")

                #if task.status == "New":
                #    task.status = "Confirmed"  # Make the status change
            else:
                self.verbose("           - Does not have the required logs.\n")

        except:
            raise
            msg  = "An exception whas caught.\n"
            msg += "            bug-id: %d.\n" % (bug.id)
            if task is not None:
                msg += "            %s" % (task.bug_target_name)
            error(msg)

            raise

        return


if __name__ == '__main__':
    app = ProcessNewRegressionBugs()
    app.main()

# vi:set ts=4 sw=4 expandtab:

