#!/usr/bin/python3

import ast
import urllib.request
import re
import os
import sys

from operator import itemgetter

#url = 'http://jenkins.qa.ubuntu.com/view/DKMS/view/U%20-generic'
#url = 'http://jenkins.qa.ubuntu.com/view/DKMS/view/T%20Proposed%20-generic/'

versions = zip(sys.argv[1::2], sys.argv[2::2])

jstate = {}
jseen = {}
count = 0
for (url, vreport) in versions:
    count += 1
    tree = ast.literal_eval(urllib.request.urlopen(url + '/api/python?depth=2').read().decode('utf-8'))

    for job in tree['jobs']:
        #print(job['name'])
        #print(job['description'])
        name = job['name'].split('-').pop()

        if name not in jseen:
            jseen[name] = count

        #print(job['builds'][0])
        seen = False
        # Ensure we treat runs in latest build in the latest kernel first order.
        for build in sorted(job['builds'], key=itemgetter('number', 'timestamp'), reverse=True):
            if 'description' not in build or not build['description']:
                continue
            (kver, pver) = build['description'].split(' ')

            if vreport == 'latest':
                vreport = kver

            if kver != vreport and not seen:
                continue
            seen = True

            if build['result'] == 'SUCCESS':
                status = 'GOOD'
            elif build['result'] == None:
                status = 'MISSING'
            else:
                status = 'FAIL-ALWAYS'

            ##print(name, kver, pver, status)

            if name not in jstate:
                jstate[name] = status
                continue

            # If this is the latest report, and we are missing a job, call it all
            # missing
            if kver == vreport and jstate[name] == 'GOOD' and status == 'MISSING':
                jstate[name] = 'MISSING'

            # Work out if this has ever worked, if so it is a regression.
            if jstate[name] == 'FAIL-ALWAYS' and status == 'GOOD':
                jstate[name] = 'FAIL-REGRESSION(' + kver + ')'
                break

        if name not in jstate:
            jstate[name] = 'MISSING'

for package in jstate:
    if jseen[package] > 1:
        jstate[package] = 'REMOVED?'
                
for package in sorted(jstate):
    print(package, jstate[package], jseen[package])
