#!/usr/bin/python
from __future__ import print_function

import json
import sys

# Read in the package/architecture relationships.
with open("package-relation.json") as seedf:
    package_cache = json.load(seedf)

(series, ppa) = sys.argv[1:3]
triggers = sys.argv[3:]

(master_package, master_version) = triggers[0].split('/')

# Read in the series cache.
with open(series + ".cache") as cachef:
    series_cache = json.load(cachef)

# Generate commands to retrigger all missing tests.
for (states, message) in ((None, 'all'), (['MISS'], 'missing'), (['MISS-REPL'], 'missing (package updated)'), (['REGR'], 'regressing'), (['REGN'], 'newly regressing')):
    print("# " + series + " " + master_package + " retrigger " + message)

    mkey = '-'.join((series, master_package))
    if mkey not in series_cache['current']:
        continue

    if not states:
        states = series_cache['current'][mkey].keys()

    package_proposed = {}
    package_arch = {}
    for state in states:
        if state not in series_cache['current'][mkey]:
            continue
        for tpkg in series_cache['current'][mkey][state]:
            for arch in series_cache['current'][mkey][state][tpkg]:
                package_arch.setdefault(tpkg, {})[arch] = True
                if state == 'MISS-REPL':
                    package_proposed[tpkg] = True

        
    #print(package_arch)
    #print(package_proposed)
    want = {}
    for trigger in triggers:
        (package, version) = trigger.split('/')
        key = '-'.join((series, package))
        #print(package, version, key)

        if mkey in package_cache['cache-latest'] and package in package_cache['cache-latest'][mkey]:
            for tpkg in package_arch:
                #print(package, mpkg, tpkg)
                if tpkg in package_arch:
                    archs = sorted(package_arch[tpkg])
                    if len(archs) > 0:
                        tmp = want.setdefault(' '.join(archs), {}).setdefault(tpkg, [])
                        if trigger not in tmp:
                            tmp.append(trigger)
                            if tpkg in package_proposed:
                                tmp.append(tpkg + '/' + series_cache['latest'][' '.join((tpkg, archs[0]))])

    #print(want)
    for archs in want:
        forms = {}
        for key in want[archs]:
            forms[' '.join(want[archs][key])] = True

        packages_form = {}
        for form in forms:
            for key in want[archs]:
                if ' '.join(want[archs][key]) == form:
                    packages_form.setdefault(form, []).append(key)

        for form in forms:
            if form in packages_form:
                cmd = "run-autopkgtest -s " + series
                if ppa != '-':
                    cmd += ' --ppa ' + ppa
            
                for arch in archs.split():
                    cmd += ' -a ' + arch
                for trigger in form.split():
                    cmd += ' --trigger ' + trigger
                cmd += ' ' + ' '.join(sorted(packages_form[form]))

                print(cmd)

    print("")
