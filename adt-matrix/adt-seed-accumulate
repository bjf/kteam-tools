#!/usr/bin/python
from __future__ import print_function

import sys
import os
import yaml
import json


class AdtMatrixSeed(object):
    def __init__(self, cache):
        self.cache_file = cache
        self.cache = {}
        self.latest = {}

        self.britney_cache = {}

        if os.path.exists(cache):
            with open(cache) as cachef:
                tmp = json.load(cachef)

            self.cache = tmp['cache']
            self.latest = tmp['cache-latest']

    def save(self):
        with open(self.cache_file + '.new', 'w') as cfd:

            # seeds: make a list based output for adt-matrix.
            seeds = {}
            for seriespkg in self.cache:
                seeds[seriespkg] = []
                for pkg in sorted(self.cache[seriespkg]):
                    tmp_arch = []
                    for arch in sorted(self.cache[seriespkg][pkg]):
                        tmp_arch.append(arch)
                    seeds[seriespkg].append((pkg, tmp_arch))
                        
            # seeds: make a list based output for adt-matrix.
            latest_merged = {}
            for master in self.latest:
                latest_merged[master] = {}
                for member in self.latest[master]:
                    for key in self.latest[master][member]:
                        tmp = latest_merged[master].setdefault(key, [])
                        new = list(set(tmp + self.latest[master][member][key].keys()))
                        latest_merged[master][key] = new

            out = {
                'cache':            self.cache,
                'cache-latest':     self.latest,
                'seeds':            seeds,
                'seeds-latest':     latest_merged,
            }
            json.dump(out, cfd, indent=2)
        os.rename(self.cache_file + '.new', self.cache_file)


    def britney_hierachy(self, state, record, seen=None):    
        if seen == None:
            seen = {}
        if record['source'] in seen:
            return []
        seen[record['source']] = True

        hier = [ record ]

        if 'excuses' in record:
            for line in record['excuses']:
                if line.startswith('Depends:'):
                    bits = line.strip().split()
                    for record2 in state['sources']:
                        if record2['source'] == bits[2]:
                            hier += self.britney_hierachy(state, record2, seen)

        return hier


    def britney_load(self, series, britney):
        if series not in self.britney_cache:
            with open(britney) as britneyf:
                self.britney_cache[series] = yaml.load(britneyf)

        return self.britney_cache[series]


    def accumulate(self, series, package, britney):
        state = self.britney_load(series, britney)
        for record in state['sources']:
            if record['source'] != package:
                continue;

            # The persistant list holds any package we ever tested against.
            pcache = self.cache.setdefault(series + '-' + package, {})
            # The current lists holds those we tested on in the most recent test run.
            lcache = self.latest.setdefault(series + '-' + package, {})

            debug = [ record['source'] ]
            for record2 in self.britney_hierachy(state, record):
                if record2['source'] not in debug:
                    debug.append(record2['source'])
                if 'tests' in record2 and 'autopkgtest' in record2['tests']:
                    # If we have a list, this becomes the new list.
                    tcache = lcache[record2['source']] = {}
                    for pkg in record2['tests']['autopkgtest']:
                        for arch in record2['tests']['autopkgtest'][pkg]:
                            (package, version) = pkg.split()
                            pcache.setdefault(package, {})[arch] = True
                            tcache.setdefault(package, {})[arch] = True

            print('hierachy ' + series + ' ' + ' '.join(debug))


matrix_seed = AdtMatrixSeed('package-relation.json')
for line in sys.stdin:
    (series, package, parent, britney) = line.strip().split()
    matrix_seed.accumulate(series, package, britney)
matrix_seed.save()
