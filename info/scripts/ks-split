#!/usr/bin/python3

import argparse
import copy
import os
import stat
import string
import sys
import json
import yaml


def json_dumper(data, path):
    path = os.path.join(out, path)
    #print("PATH", path)
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w") as wfd:
        json.dump(data, fp=wfd, separators=(',', ':'))

parser = argparse.ArgumentParser(description='Convert kernel-series.yaml to split json form.')
parser.add_argument('input', help="Path to kernel-series.yaml")
parser.add_argument('output', help="Path to split json directory")
args = parser.parse_args()

ks_file = args.input
out = args.output
os.makedirs(out, exist_ok=True)

# Make us a version directory to hold sub-components.
for version in string.ascii_lowercase:
    if not os.path.exists(os.path.join("split", version)):
        break
else:
    raise ValueError()

with open(ks_file) as kfd:
    raw = yaml.safe_load(kfd)

routing_tables = []
top_rest = {}

for series_name, series_data in raw.items():
    if series_name == 'defaults':
        continue
    series_codename = series_name

    series_rest = copy.deepcopy(series_data)
    if 'sources' in series_rest:
        # For supported series include the supported status of the 'sources'.
        if True: #series_rest.get('supported', False) or series_rest.get('development', False):
            for source_name, source_data in series_data['sources'].items():
                data = {
                    '__k': "{}/{}/sources".format(version, series_codename),
                    'supported': source_data.get('supported'),
                    'development': source_data.get('development')}
                series_rest['sources'][source_name] = data
        else:
            series_rest['sources'] = {
                    '__l': "{}/{}/sources".format(version, series_codename)}

    # Drop the routing-table data -- it is duplicated into each
    # and every series.
    if 'routing-table' in series_rest :
        routing_table = series_rest['routing-table']
        try:
            index = routing_tables.index(routing_table)
        except ValueError:
            index = len(routing_tables)
            routing_tables.append(routing_table)
        routing_file = 'routing-table{}'.format(index)
        del series_rest['routing-table']
        series_rest['routing-table'] = {'__l': "{}/{}".format(version, routing_file)}

    series_rest['name'] = series_name
    # Accumulate the series set.
    top_rest[series_name] = series_rest

    # Dump the full sources list.
    if 'sources' in series_data:
        json_dumper(series_data['sources'], os.path.join(version, series_codename, "sources.json"))

index = 0
for routing_table in routing_tables:
    json_dumper(routing_table, os.path.join(version, "routing-table{}.json".format(index)))
    index += 1
json_dumper(top_rest, "kernel-series.json.new")
top = os.path.join(out, "kernel-series.json")
os.rename(top + ".new", top)
