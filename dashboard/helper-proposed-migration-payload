#!/usr/bin/python
from __future__ import print_function;

import os
import os.path
import sys
import yaml
import re
from datetime import datetime

re_extract = re.compile(r'^autopkgtest for (\S+) (\S+):.*?<span .*?>(.*?)</span>')

now = datetime.now()
epoch = datetime.utcfromtimestamp(0)
now_ts = int((now - epoch).total_seconds())
host = os.uname()[1]

for line in sys.stdin:
    (yfile, needed) = line.strip().split()
    needed_ts = int(needed)

    state = None
    if not os.path.exists(yfile):
        continue

    name = os.path.basename(yfile)
    if name.endswith('.migration'):
        name = name[0:-10]

    with open(yfile) as yfd:
            state = yaml.load(yfd)

    dt = state['generated-date']
    run_ts = int((dt - epoch).total_seconds())

    if run_ts > needed_ts:
        tstate = "G"
    elif (now_ts - needed_ts) < 2100:
        tstate = "W"
    else:
        tstate = "A"

    for source in state['sources']:
        for excuse in source['excuses']:
            if excuse.startswith('autopkgtest'):
                if 'Test in progress' in excuse:
                    needed_ts = now_ts
                if source['source'] == 'linux':
                    match = re_extract.match(excuse)
                    if match:
                        (test, state) = (match.group(1), match.group(3))

                        if state == 'Pass':
                            tstate = 'G'
                        elif state ==  'Regression':
                            tstate = 'A'
                        else:
                            tstate = 'W'

                        print('Proposed%sMigration', host, 'Test%s(dep-8)%s' + source['source'] + '-' + source['new-version'] + '%s' + test, tstate, '-', '-', state)

    print("Proposed%sMigration", host, "Proposed%sMigration%s(" + name + ")", tstate, '-', '-', "needed={0} run={1}".format(needed_ts, run_ts))


print("Proposed%sMigration", host, "Update%sWatcher", now_ts, 1200, 1800)
