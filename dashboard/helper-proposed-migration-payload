#!/usr/bin/python
from __future__ import print_function;

import os
import os.path
import sys
import yaml
import re
from datetime import datetime

re_extract_adt = re.compile(r'^autopkgtest for (\S+) (\S+):.*?(<a.*?>.*)')
re_extract_adt_result = re.compile(r'<a.*?>(.*?):\s*<span.*?>(.*?)</span>')
re_extract_force = re.compile(r'^Should wait for (\S+) (\S+) test, but forced')

now = datetime.now()
epoch = datetime.utcfromtimestamp(0)
now_ts = int((now - epoch).total_seconds())
host = os.uname()[1]

def encode(a):
    return str(a).replace('%', '%p').replace(' ', '%s')


def emit(record):
    row = 'V2'
    for key, value in record.items():
        row += " {0}={1}".format(key, encode(value))
    print(row)


state_order = ('PASS', 'ALWAYSFAIL', 'IGNORED', 'DEPENDS', 'RUNNING', 'NBS', 'REGRESSION')
def result(arg):
    if arg[3] in ('linux', 'linux-meta', 'linux-signed') or \
       arg[3].startswith('linux-lts-') or arg[3].startswith('linux-meta-lts-') or arg[3].startswith('linux-signed-lts-') or \
       arg[3].startswith('linux-backports-modules-'):
        key1 = arg[3]
        key2 = arg[4]
        key3 = arg[0] + '_' + arg[1]
        if key1 not in results:
            results[key1] = {}
        if key2 not in results[key1]:
            results[key1][key2] = {}
        results[key1][key2][key3] = arg

        # Record per package state.
        key = (arg[5], arg[3], arg[4])
        cstate = package_results.get(key, [ 'PASS', [] ])
        if state_order.index(arg[2]) > state_order.index(cstate[0]):
            cstate[0] = arg[2]
        if arg[2] not in ('PASS', 'ALWAYSFAIL', 'RUNNING', 'DEPENDS'):
            cstate[1].append(arg[0] + ' ' + arg[1] + ' ' + arg[2])
        
        package_results[key] = cstate


def get_status(state, record):
    if record['is-candidate']:
        return "PASS"
    if 'cruft-arch' in record['reason']:
        return "NBS"
    if 'build-arch' in record['reason']:
        return "BUILDING"
    if 'tests' in record and 'autopkgtest' in record['tests']:
        for pkg in record['tests']['autopkgtest']:
            for arch in record['tests']['autopkgtest'][pkg]:
                if record['tests']['autopkgtest'][pkg][arch][0] == 'RUNNING':
                    return "RUNNING"
                elif record['tests']['autopkgtest'][pkg][arch][0] == 'REGRESSION':
                    return "REGRESSION"
    if 'depends' in record['reason']:
        for line in record['excuses']:
            if line.startswith('Depends:'):
                bits = line.strip().split()
                for record2 in state['sources']:
                    if record2['source'] == bits[2]:
                        status = get_status(state, record2)
                        if status != "PASS":
                            return status

    if 'block' in record['reason']:
        return "PASS"

    return "UNKNOWN"


def get_hierachy(state, record, seen={}):
    if record['source'] in seen:
        return []
    seen[record['source']] = True

    hier = [ record['source'] ]

    if 'excuses' in record:
        for line in record['excuses']:
            if line.startswith('Depends:'):
                bits = line.strip().split()
                for record2 in state['sources']:
                    if record2['source'] == bits[2]:
                        hier += get_hierachy(state, record2, seen)

    return hier
 

(package_result, overall_result) = sys.argv[1:]

britney = []
package_results = {}
for line in sys.stdin:
    (series, yfile, needed) = line.strip().split()
    needed_ts = int(needed)

    state = None
    if not os.path.exists(yfile):
        continue

    name = os.path.basename(yfile)
    if name.endswith('.migration'):
        name = name[0:-10]

    with open(yfile) as yfd:
        state = yaml.load(yfd)

    results = {}

    title = name + ': Migration'

    run = state['generated-date']
    run_ts = int((run - epoch).total_seconds())

    tests_running = 'idle'
    for source in state['sources']:
        if 'cruft-arch' in source['reason']:
            result([source['source'], source['new-version'], 'NBS', source['source'], source['new-version'], series])

        forced_reasons = []
        if 'forced-reason' in source:
            for reason_str in source['forced-reason']:
                forced_reasons.append(reason_str.split())

        # If we ran tests then we are installable.
        if 'tests' in source:
            result([source['source'], source['new-version'], 'PASS', source['source'], source['new-version'], series])
        elif 'reason' in source and 'depends' in source['reason']:
            result([source['source'], source['new-version'], 'DEPENDS', source['source'], source['new-version'], series])

        if 'tests' in source:
            if 'autopkgtest' in source['tests']:
                for test_ver in source['tests']['autopkgtest']:
                    test_result = source['tests']['autopkgtest'][test_ver]
                    (test, tversion) = test_ver.split()

                    tstate = 'PASS'

                    for arch in test_result:
                        cstate = test_result[arch][0]
                        if state == 'RUNNING':
                            needed_ts = run_ts
                            tests_running = 'running'
                        if state_order.index(cstate) > state_order.index(tstate):
                            tstate = cstate

                    for reason_arg in forced_reasons:
                        if reason_arg[0] == 'skiptest' or \
                           reason_arg[0] == 'badtest' and reason_arg[1] == test and reason_arg[2] == tversion:
                            if tstate in ('ALWAYSFAIL', 'RUNNING', 'REGRESSION'):
                                tstate = 'IGNORED'
                    result([test, tversion, tstate, source['source'], source['new-version'], series])
            else:
                 if source['is-candidate']:
                    result([source['source'], source['new-version'], 'PASS', source['source'], source['new-version'], series])


#    for key1 in sorted(results.keys()):
#        keyl = sorted(results[key1].keys(), reverse=True)
#        if len(keyl) > 0:
#            key2 = keyl[0]
#            for key3 in results[key1][key2]:
#                arg = results[key1][key2][key3]
#
#                if arg[2] in ('REGRESSION', 'NBS'):
#                    tstate = 'W'
#                else:
#                    tstate = 'G'
#
#                emit({
#                    'group':    'Proposed Migration',
#                    'host':     host,
#                    'title':    name + ': ' + arg[3] + '_' + arg[4] + ' test ' + arg[0] + '_' + arg[1],
#                    'state':    tstate,
#                    'note':     arg[2],
#                })

    # Work out the britney status for kernel packages.
    emitted = []
    for record in state['sources']:
        if record['source'].startswith('linux-meta'):
            britney.append((series, record['source'], record['new-version'], get_status(state, record)))
            emitted.append(record['source'])

    # Rescan for non abi bumpers.
    for record in state['sources']:
        if record['source'].startswith('linux') and \
           not record['source'].startswith('linux-meta') and \
           not record['source'].startswith('linux-signed'):
            source = record['source'].replace('linux', 'linux-meta')
            if source not in emitted:
                britney.append((series, source, record['new-version'], get_status(state, record)))

    # If the run completed since it was triggered, all is good, else give it an 
    # hour to get there, after that warn for a further hour, then alert.
    if run_ts > needed_ts:
        tstate = "G"
    elif (now_ts - needed_ts) < (125*60):
        tstate = "G"
    elif (now_ts - needed_ts) < (185*60):
        tstate = "W"
    else:
        tstate = "A"

    needed = datetime.fromtimestamp(needed_ts)

    needed_str = str(now - needed).split('.')[0]
    run_str = str(now - run).split('.')[0]
    emit({
        'group':    'Proposed Migration',
        'host':     host,
        'title':    title,
        'state':    tstate,
        'note':     'needed={0} run={1} tests={2}'.format(needed_str, run_str, tests_running),
        'order':    40,
    })

with open(package_result, 'w') as rfd:
    for result in package_results:
        (series, package, version) = result
        (state, notes) = package_results[result]

        print(series, package, version, state, ','.join(notes), file=rfd)

with open(overall_result, 'w') as ofd:
    for result in britney:
        (series, package, version, state) = result
        print(series, package, version, state, '', file=ofd)

        if state in ('REGRESSION', 'NBS'):
            tstate = 'W'
        else:
            tstate = 'G'

        emit({
            'group':    'Proposed Migration',
            'host':     host,
            'title':    series + ': ' + package + '_' + version + ' migration status',
            'state':    tstate,
            'note':     state,
        })

emit({
    'group':    'Proposed Migration',
    'host':     host,
    'title':    'Update Watcher',
    'stamp':    now_ts,
    'warning':  1200,
    'alert':    1800,
    'order':    10,
})
