#!/usr/bin/env python3
#
# cranky-rmadison: An rmadison-like script for querying the Ubuntu archives
#                  and private PPAs.
#
# Copyright (C) 2018, Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.

import argparse
import logging
import os
import sys

from launchpadlib.launchpad import Launchpad

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__),
                                              os.pardir, 'libs')))

from crl.handle import Handle
from ktl.debian import DebianError
from ktl.git import GitError
from ktl.log import cerror


PPAS = {
    "precise": {
        "any_source": [
            ["esm", "~ubuntu-esm/ubuntu/esm"],
            ["esm-proposed", "~canonical-kernel-esm/ubuntu/proposed"],
        ]
    },
    "bionic": {
        "linux-ibm-gt": [
            ["ibm-test", "~ibm-cloud/ubuntu/test"],
        ],
    },
}


def pocket_weight(val):
    """
    Return a weight based on the pocket name for sorting lists
    """
    if "-proposed" in val[2]:
        return 3
    if "-updates" in val[2]:
        return 2
    if "-security" in val[2]:
        return 1
    return 0


def rmadison_ppa(handle_set):
    """
    Query Launchpad for source package information
    """
    series = handle_set.series.codename
    source = handle_set.source.name
    packages = [package.name for package in handle_set.source.packages]

    # Get the PPA(s) for this series/source
    ppas = [["", "ubuntu"]]   # The default is the distro archive
    if series in PPAS:
        for key in (source, "any_source"):
            if key in PPAS[series]:
                ppas = PPAS[series][key]
                break

    # Temporarily disable logging of level INFO to silence launchpadlib and
    # then reenable logging again
    logging.disable(logging.INFO)
    lp = Launchpad.login_with("cranky", "production", version="devel")
    logging.disable(logging.NOTSET)

    lp_series = lp.distributions["ubuntu"].getSeries(name_or_version=series)

    result = []
    for package in sorted(packages):
        unsorted = []
        for ppa in ppas:
            lp_archive = lp.archives.getByReference(reference=ppa[1])
            lp_sources = lp_archive.getPublishedSources(source_name=package,
                                                        distro_series=lp_series,
                                                        exact_match=True,
                                                        order_by_date=True,
                                                        status="Published")

            for lp_source in lp_sources:
                if ppa[0] == "":
                    # This is a distro archive
                    if lp_source.pocket.lower() == "release":
                        pocket = series
                    else:
                        pocket = "%s-%s" % (series, lp_source.pocket.lower())
                else:
                    # This is a private PPA
                    pocket = "%s-%s" % (series, ppa[0])

                unsorted.append([package, lp_source.source_package_version,
                                 pocket, "source"])

        # Sort the temporary list by pocket names and add it to the result
        result.extend(sorted(unsorted, key=pocket_weight))

    return result


def print_table(data):
    """
    Print the package list
    """
    # Determine the max width of each column
    widths = [len(max(col, key=len)) for col in zip(*data)]

    # Print the formatted data
    for row in data:
        print('|'.join((" {:%d} " % w).format(r) for w, r in zip(widths, row)))


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    desc = """
Query the Ubuntu archives and private PPAs for kernel source package
information and print the data in an 'rmadison'-like format.

For regular distribution packages, the standard Ubuntu archive is queried. For
special kernel packages like ESM or private packages, the relevant private PPAs
are queried.

Note: That the user who runs this script needs to have sufficient Launchpad
privileges to query the various private PPAs.
"""

    epilog = """
Examples:
  $ cranky-rmadison bionic:linux
      Print information for the source packages that make up the set of Bionic
      linux kernel packages.
"""

    parser = argparse.ArgumentParser(description=desc, formatter_class=
                                     argparse.RawDescriptionHelpFormatter,
                                     epilog=epilog)
    parser.add_argument("handle", nargs='?', help="A kernel package handle "
                        "in the form of <series>:<source>. If not specified, "
                        "the information is retrieved from the current git "
                        "repo.")
    args = parser.parse_args()

    try:
        handle_set = Handle().lookup_set(args.handle if args.handle else
                                         os.getcwd())
    except (ValueError, GitError, DebianError) as e:
        cerror(e)
        sys.exit(1)

    # Query the Launchpsd PPAs for the packages referenced by the provided
    # handle and print the result in an 'rmadison'-like table
    print_table(rmadison_ppa(handle_set))
