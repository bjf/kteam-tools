#!/usr/bin/python3

import sys
import argparse

from crl.config import Config
from crl.handle import Handle, HandleError

from ktl.kernel_series import KernelSeries

def tree_package_type(tree):
    ptype = tree.package.type
    return "main" if ptype is None else ptype

def handle_to_series_source(args):
    try:
        handle = Handle().lookup_set(args.handle, validate=False)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    print(handle.series.codename, handle.source.name)

def series_codename(args):
    try:
        handle = Handle().lookup_set(args.handle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    print(handle.series.codename)

def source_packages_path(args):
    try:
        handle = Handle().lookup_set(args.handle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    for tree in handle.trees:
        if args.type:
            type = tree_package_type(tree)
            print("%s " % (type), end='')
        print(tree.directory)

def print_configs(args):
    # Lookup the config options for the given command
    config = Config().lookup(args.command, {})
    if args.key:
        # Print the specified config key
        if args.key in config:
            print(config[args.key])
    else:
        # Print all configs
        for key in sorted(config):
            print("{}: {}".format(key, config[key]))

def tree_type(args):
    try:
        tree = Handle().lookup_tree(args.handle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    print(tree_package_type(tree))

def tree_main_path(args):
    try:
        handle = Handle().lookup_set(args.handle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    for tree in handle.trees:
        ptype = tree.package.type
        if ptype in (None, "main"):
            print(tree.directory)
            break

def list_handles(args):
    for series in KernelSeries(use_local=True).series:
        if not series.supported:
            continue
        for source in series.sources:
            if not source.supported or source.copy_forward is not None:
                continue
            print("{}:{}".format(series.codename, source.name))

def list_variants(args):
    try:
        handle = Handle().lookup_set(args.handle)
    except HandleError as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
    if handle.source.variants is not None:
        for variant in handle.source.variants:
            print(variant)

if __name__ == "__main__":
    desc = """
Helper program for getting cranky config and handle data from shell scripts.
"""
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(help="commands", dest="command")
    subparsers.required = True

    # handle-to-series-source subparser
    subparser = subparsers.add_parser("handle-to-series-source",
                                      help="Print series codename and source name for the given handle")
    subparser.add_argument("handle",
                           help="<series>:<package> handle, or path to source tree.")
    subparser.set_defaults(func=handle_to_series_source)

    # series-codename subparser
    subparser = subparsers.add_parser("series-codename",
                                      help="Print series codename for the given handle")
    subparser.add_argument("handle",
                           help="<series>:<package> handle, or path to source tree.")
    subparser.set_defaults(func=series_codename)

    # source-packages-path subparser
    subparser = subparsers.add_parser("source-packages-path",
                                      help="Print source packages' paths")
    subparser.add_argument("handle",
                           help="<series>:<package> handle, or path to source tree.")
    subparser.add_argument("-t", "--type", action="store_true", default=False,
                           help="Also print package type.")
    subparser.set_defaults(func=source_packages_path)

    # tree-type subparser
    subparser = subparsers.add_parser("tree-type",
                                      help="tree-type: dump source tree type")
    subparser.add_argument("handle",
                           help="<series>:<package> handle, or path to source tree.")
    subparser.set_defaults(func=tree_type)

    # tree-main-path subparser
    subparser = subparsers.add_parser("tree-main-path",
                                      help="tree-main-path: dump source tree main tree path")
    subparser.add_argument("handle",
                           help="<series>:<package> handle, or path to source tree.")
    subparser.set_defaults(func=tree_main_path)

    # list-handles
    subparser = subparsers.add_parser("list-handles",
                                      help="Print the list of supported handles")
    subparser.set_defaults(func=list_handles)

    # list variants
    subparser = subparsers.add_parser("list-variants",
                                      help="Print variants for the given handle")
    subparser.add_argument("handle",
                           help="<series>:<package> handle, or path to source tree.")
    subparser.set_defaults(func=list_variants)

    # cranky-<foo> config options subparser
    for command in ("clone", "test-build", "review-master-changes"):
        subparser = subparsers.add_parser(command,
                                          help="Print config options for cranky-%s" % command)
        subparser.add_argument("key", nargs='?', help="Print only the specified config key")
        subparser.set_defaults(func=print_configs)

    args = parser.parse_args()
    args.func(args)
