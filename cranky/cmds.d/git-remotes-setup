#!/usr/bin/env python3
#

from argparse                           import ArgumentParser, RawTextHelpFormatter
from subprocess                         import run, PIPE, STDOUT

from crl.handle                         import Handle, HandleError

def sh(cmd, quiet=False):
    '''
    A small wrapper around subprocess.run because I always run it the same way.
    '''
    results = run(cmd, check=True, stdout=PIPE, stderr=STDOUT)
    output = results.stdout.decode('utf-8').split('\n')
    if not quiet:
        if len(output) > 1 or output[0] != '':
            for line in output:
                print(line)
    return output

class RemotesSetup(object):
    '''
    '''
    def __init__(self):
        '''
        '''
        self.builders = ['sita', 'kathleen', 'gloin']
        self.handle = Handle()

    def execute(self, args):
        '''
        '''
        try:
            # 'git remote add <builder> ssh://<builder>/home/bradf/stable/<series>/<package>'
            hs = self.handle.lookup_set(args.handle)
            codename = hs.series.codename

            for builder in self.builders:
                try:
                    cmd = ['git', 'remote', 'remove', builder]
                    sh(cmd)
                except:
                    pass # eat the exception and move along

                package = hs.trees[0].package.name
                cmd = ['git', 'remote', 'add', builder, f'ssh://{builder}/home/bradf/stable/{codename}/{package}']
                sh(cmd, quiet=True)

                cmd = ['ssh', builder, 'cranky', 'remote-git-remotes-setup', args.handle]
                sh(cmd, quiet=True)

        except HandleError:
            print('** Error: The handle is not recognised. The handle format is: <series>:<package>.')

        return 0


if __name__ == '__main__':
    app_description = '''
Setup git remotes in the local git repository and on the remote builder. These
are configured to use the git build functionality in kteam-tools.
    '''
    app_epilog = '''
Examples:
    cranky git-remotes-setup bionic:linux
    '''

    help_handle = """
Handle to a kernel source tree in <series>:<package> format.
"""

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawTextHelpFormatter)
    parser.add_argument('handle', help=help_handle)
    args = parser.parse_args()

    retval = RemotesSetup().execute(args)

    exit(retval)
