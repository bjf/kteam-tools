#!/usr/bin/python3

# This script generates update.conf used by in-tree helper scripts used to
# produce Ubuntu kernel commits.

import glob
import os
import sys

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, 'libs')))

from ktl.debian import Debian
from ktl.shell import sh

# Identify parental package if we are derived.
source = Debian.get_source_from_kernel_series()
parent_source = source.derived_from
if parent_source is None:
    print("  not a derived package", file=sys.stderr)
    sys.exit(0)

# Find the primary package for this source.
for parent_package in parent_source.packages + [ None ]:
    if parent_package is None or parent_package.type is None:
        break
if parent_package is None:
    print("  parent package has no main package?!?", file=sys.stderr)
    sys.exit(0)

if parent_package.repo is None:
    print("  parent main package has no repository listed", file=sys.stderr)
    sys.exit(0)

# Emit the parental repository configuration.
print("RELEASE_REPO=" + parent_package.repo.url)
if parent_package.repo.branch:
    print("SOURCE_RELEASE_BRANCH=" + parent_package.repo.branch)

# Retrieve DEBIAN_MASTER directly kernel-series.yaml instead
# of spinning over the debian.*/ directories. Checking the local
# directories doesn't work well, since we might need to rebase the
# kernel first to get the updated DEBIAN_MASTER value and we need to
# update DEBIAN_MASTER in order to rebase it with cranky-rebase.
#
# We check the parent kernel's name and assume "debian.master" for
# "linux" and "debian.BRANCH" for "linux-BRANCH":
parent_name=parent_source.name.split("-", 1) # ['linux', 'BRANCH']
if len(parent_name) <= 1:
    master_branch="master"
else:
    master_branch=parent_name[1]
print("DEBIAN_MASTER=debian." + master_branch)

# Dump the version suffix that should be used for backports. "fdr
# startnewrelease" will use it to build the new release version
# following the format "${PARENT_VERSION}~${BACKPORT_SUFFIX}.N":
if source.backport:
    print("BACKPORT_SUFFIX={}".format(source.series.name))
