#!/bin/bash

# TODO:
#  - error handling
#  - parameters
#  - config for mapping 'bionic/main' -> git2/ubuntu-bionic
#  - -v needs to be something ... sometimes
#  - -sa too
#  - unstable is not the series
#  - --meta-option v=<sometihg>
#  - --profile <override> in concert with series-linux as "overrides"

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

create_chroot()
{
	local series="$1"
	local arch="$2"

	local chroot="$series-$arch"

	# Validate the chroot.
	schroot --directory / -c "$chroot" /bin/true >/dev/null 2>&1 && {
		echo "II: $chroot base chroot available"
		RET="$chroot"
		return
	}

	# Create the base chroot.
	echo "II: $chroot base chroot needed -- creating"

	mk-sbuild --skip-updates --skip-proposed --distro="ubuntu" --arch="$arch" "$series" </dev/null
	sudo sed -i -e 's/^profile=sbuild/profile=default/g' "/etc/schroot/chroot.d/sbuild-$series-$arch"

	RET="$chroot"
}

create_session()
{
	local series="$1"
	local arch="$2"
	local package="$3"

	local session="srcpkg-$series-$arch-$package"

	# Validate the session.
	schroot --directory / -r -c "$session" /bin/true >/dev/null 2>&1 && {
		echo "II: $session session available"
		RET="$session"
		return
	}

	# Validate the chroot.
	create_chroot "$series" "$arch"
	local chroot="$RET"

	# Create the base session.
	echo "II: $session sesssion needed -- creating"

	schroot -b -n "$session" -c "$chroot"

	schroot -u root -r -c "$session" -- apt-get update
	schroot -u root -r -c "$session" -- apt-get -y -o APT::Get::Only-Source=true build-dep --no-install-recommends "$package"
	schroot -u root -r -c "$session" -- apt-get -y install fakeroot
	
	RET="$session"
}

update_session() {
	local series="$1"
	local arch="$2"
	local package="$3"

	create_session "$series" "$arch" "$package"
	local session="$RET"

	schroot -u root -r -c "$session" -- apt-get update
	schroot -u root -r -c "$session" -- apt-get -y dist-upgrade
}

build_src()
{
	local dir="$1"
	local session="$2"
	
	(
		cd "$dir" || exit 1

		git clean -x -f -d
		schroot -r -c "$session" -- fakeroot debian/rules clean
		schroot -r -c "$session" -- dpkg-buildpackage -S -i -I -uc -us -d
	)
}

# MAIN:
if [ "$#" -ne 2 ]; then
	echo "Usage: $P <series> <source>" 1>&2
	exit 1
fi

series="$1"
package="$2"

sources=$( "$here/lib/config" 'source-packages-path' "$series" "$package" )

# Ensure we have the updated session -- use amd64/linux for all packages as that
# is a superset.
update_session "$series" "amd64" "linux"
session="$RET"

# Build the source.
for source in $sources
do
	build_src "$source" "$session"
done
