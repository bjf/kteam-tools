#!/bin/bash -eu
#
# Perform a test build on a remote builder using Kamal's git-build-kernel
# post-receive git hook
#
# Juerg Haefliger <juergh@canonical.com>
#

function cleanup()
{
	trap "" EXIT INT TERM HUP

	if [ -n "${TEMP_FILE:-}" ] ; then
		rm -f  "${TEMP_FILE:-}"
	fi

	if [ -n "${BUILD_BRANCH:-}" ] ; then
		git branch -D "${BUILD_BRANCH}"
	fi
}

function pr_error()
{
    echo -e "\e[31m${*}\e[0m"
}

function pr_note()
{
    echo -e "\e[32m${*}\e[0m"
}

function pr_info()
{
    echo -e "\e[33m${*}\e[0m"
}

function usage()
{
	cat <<EOF
Usage: cranky-test-build [-h] [-d] [-f] [-c COMMIT] [-t TARGET] [-a ARCH[,ARCH,...]] HOST

Build kernel binary packages using Kamal's git-build-kernel build script.

Positional arguments:
  HOST  Build host (kathleen, gloin, tangerine, ...).

Optional arguments:
  -a, --arch ARCH[,ARCH,...]  Comma-separated list of kernel architectures to
                              build. If not specified, defaults to the host
                              architecture. If the special architecture 'all'
                              is used, build all architectures listed under
                              debian.master/config/.
  -c, --commit COMMIT         Build from commit COMMIT instead of 'HEAD'.
  -d, --dry-run               Do everything except push to the builder, i.e.,
                              don't trigger the build(s).
  -f, --fail                  Fail the build after the first error. If
                              specified, the script will terminate immediately
                              after the first build error rather than continue
                              building the remaining architectures.
  -h, --help                  Show this help message and exit.
  -t, --target TARGET         Build target TARGET instead of 'binary'.

Examples:
  Build binary packages for the host architecture from the current commit:
    $ cranky-test-build kathleen

  Build packages for all supported architectures:
    $ cranky-test-build -a all kathleen

  Build binary packages of kernel flavor 'generic' from branch 'testing' for
  architecture ppc64el:
    $ cranky-test-build -c testing -t binary-generic -a ppc64el kathleen

Current limitations:
  1) The build host must be accessible using password-less SSH.

Notes:
  The script should perform all the necessary steps to setup the build host
  when it is run for the first time. Specifcally, it clones the kernel repo
  into the user's home directory on the builder, installs the git hook that
  triggers the actual build and adds a git remote to the local repo.
EOF
	exit 2
}

host=
arches=($(dpkg-architecture -q DEB_HOST_ARCH))
commit=HEAD
dry_run=0
fail=0
target=binary

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-a|--arch)
			shift
			IFS=',' read -r -a arches <<< "${1}"
			;;
		-c|--commit)
			shift
			commit=${1}
			;;
		-d|--dry-run)
			dry_run=1
			;;
		-f|--fail)
			fail=1
			;;
		-h|--help)
			usage
			;;
		-t|--target)
			shift
			target=${1}
			;;
		*)
			if [ -n "${host}" ] ; then
				usage
			fi
			host=${1}
			;;
	esac
	shift
done

remote="${host}"

if [ -z "${host}" ] ; then
	usage
fi

if ! [ -d .git ] ; then
	pr_error "No such directory '.git'"
	exit 1
fi

# Check if the commit exists
if ! git rev-parse "${commit}" >/dev/null ; then
	pr_error "No such git revision '${commit}'"
	exit 1
fi

# Install an exit handler to clean up temporary files and branches
# shellcheck disable=SC2064
trap cleanup EXIT INT TERM HUP

# Check if the debian.<variant> directory should be used
debian_d=$(git show "${commit}:debian/debian.env" 2>/dev/null | \
			   sed -e 's,DEBIAN=,,')
debian_d=${debian_d:-debian.master}

# Get the correct changelog
TEMP_FILE=$(mktemp)
if ! git show "${commit}:${debian_d}/changelog" > "${TEMP_FILE}" ; then
	pr_error "Failed to get '${commit}:${debian_d}/changelog'"
	exit 1
fi

# Get the source and series from the changelog
source=$(dpkg-parsechangelog -l "${TEMP_FILE}" -S Source)
series=$(dpkg-parsechangelog -l "${TEMP_FILE}" -S Distribution)
if [ "${series}" = "UNRELEASED" ] ; then
	series=$(dpkg-parsechangelog -l "${TEMP_FILE}" -S Distribution -o 1 -c 1)
fi

# Get the list of supported architectures
abi=$(git ls-tree -d "${commit}" "${debian_d}/abi/" | sed -e 's,.*/,,')
readarray -t all_arches < <(git ls-tree -d "${commit}" \
								"${debian_d}/abi/${abi}/" | sed -e 's,.*/,,')

if [ "${arches[0]}" = "all" ] ; then
	# shellcheck disable=SC2012
	arches=("${all_arches[@]}")
else
	# Verify that the specified arch(es) is/are valid
	for arch in "${arches[@]}" ; do
		if ! printf "%s\n" "${all_arches[@]}" | grep -q "^${arch}$" ; then
			pr_error "Unsupported arch '${arch}' (supported: ${all_arches[*]})"
			exit 1
		fi
	done
fi

# The remote URL
remote_url=$(git remote get-url --push "${host}" || true)

# Get the git directory from the remote URL
if [ -z "${remote_url}" ] ; then
	git_dir=$(pwd)
	pr_info "${host} is not a git remote, adding it..."
	git remote add "${host}" "ssh://${host}${git_dir}"

	remote_url=$(git remote get-url --push "${host}" || true)
fi

# Purge ssh://host from the remote URL and prepend a /
git_dir="${remote_url#*://}"
host="${git_dir%%/*}"
git_dir="/${git_dir#*/}"

pr_note "Build host:   ${host}"
pr_note "Build remote: ${remote}"
pr_note "Build source: ${source}"
pr_note "Build series: ${series}"
pr_note "Build arches: ${arches[*]}"
pr_note "Build commit: $(git log --format='%h ("%s")' "${commit}" -1)"

# Verify we can talk to the host
if ! ssh -o ConnectTimeout=5 "${host}" whoami >/dev/null ; then
	pr_error "Unable to ssh to host '${host}'"
	exit 1
fi

# Check if the git-build-kernel git hook exists
# shellcheck disable=SC2029
if ! ssh "${host}" "test -e ${git_dir}/.git/hooks/post-receive" ; then

	# Create the repo on the remote, if necessary
	if ! ssh "${host}" "test -d ${git_dir}" ; then
		pr_info "Repo doesn't exist on ${host}, creating it..."
		ssh "${host}" "git clone /usr3/ubuntu/ubuntu-${series} ${git_dir}"
	fi

	# Create the git-build-kernel post-commit hook
	pr_info "git-build-kernel hook doesn't exist on ${host}, creating it..."
	ssh "${host}" "ln -s /usr3/ubuntu/kteam-tools/git-build-kernel/post-receive ${git_dir}/.git/hooks/post-receive"
fi

# Create a temporary build branch that we push for the build. This ensures that
# we build the different arches from the same commit in case someone mucks
# around with the local repo in the meantime.
BUILD_BRANCH="gbk-$(git rev-parse --short "${commit}")"
pr_info "Creating a temporary build branch ${BUILD_BRANCH}"
git branch "${BUILD_BRANCH}" "${commit}"

# Possible build results
build_passed=0
build_failed=1
build_skipped=2

# The results array for the build summary
declare -A result
for arch in "${arches[@]}" ; do
	result[${arch}]=${build_skipped}
done

# Get the logdir from the config file and create it if it doesn't exist
logdir=$(cranky-shell-helper test-build logdir)
logdir=${logdir/#\~\//${HOME}/}   # Replace ~/ with ${HOME}/
logdir=${logdir:-.}
if ! [ -d "${logdir}" ] ; then
	mkdir -p "${logdir}"
fi

# Finally cycle through the arches and do the builds
for arch in "${arches[@]}" ; do
	logfile=${logdir}/gbk_${series}_${source}_${arch}_${BUILD_BRANCH#gbk-}.log

	pr_info "Doing a test build for arch '${arch}', target '${target}'," \
			"logfile '${logfile}'"

	if [ ${dry_run} -eq 1 ] ; then
		pr_info "Build SKIPPED"
		continue
	fi

	# Trigger the remote build
	git push --force "${remote}" "${BUILD_BRANCH}:${arch}-${target}" 2>&1 | \
		tee /dev/stderr 2> >(tr '\r' '\n' | \
		sed '/  elapsed: .* load average: .*/d' > "${logfile}") || true

	# Print the build result
	if grep -q 'build completed OK' "${logfile}" 2>/dev/null ; then
		pr_note "Build PASSED"
		result[${arch}]=${build_passed}
	else
		pr_error "Build FAILED"
		result[${arch}]=${build_failed}

		# Pull the remote logfile
		rlogfile=$(grep '/build\.log' "${logfile}" 2>/dev/null | \
					   sed -e 's,.*:,,' -e 's, ,,g' || echo)
		if [ -n "${rlogfile}" ] ; then
			echo >> "${logfile}"
			# shellcheck disable=SC2029
			ssh "${host}" cat "${rlogfile}" >> "${logfile}"
		fi

		# Bail out if -f, --fail is specified
		if [ ${fail} -eq 1 ] ; then
			break
		fi
	fi
done

# Print the build summary
echo
pr_info "Build summary:"
for arch in "${arches[@]}" ; do
	logfile=${logdir}/gbk_${series}_${source}_${arch}_${BUILD_BRANCH#gbk-}.log
	pad=$(printf " %.0s" $(seq ${#arch} 7))
	arch_target="${arch}-${target}:${pad:1}"

	case "${result[${arch}]}" in
		${build_passed})
			pr_note "  ${arch_target} PASSED"
			;;
		${build_skipped})
			pr_info "  ${arch_target} SKIPPED"
			;;
		*)
			pr_error "  ${arch_target} FAILED    (see ${logfile})"
			;;
	esac
done
