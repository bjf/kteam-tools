#!/bin/bash -eu
#
# Perform a test build on a remote builder using Kamal's git-build-kernel
# post-receive git hook
#
# Juerg Haefliger <juergh@canonical.com>
#

function out()
{
	trap "" EXIT INT TERM HUP

	git branch -D "${BUILD_BRANCH}"
}

function usage()
{
	cat <<EOF
usage: cranky-test-build [-h] [-c COMMIT] -t [TARGET] host [arch [arch ...]]

Build kernel binary packages using Kamal's git-build-kernel build script.

Positional arguments:
  host  build host (kathleen, gloin, tangerine, ...)
  arch  kernel architecture to build. If not specified, build all architecures
        as listed under debian.master/config/.

Optional arguments:
  -c, --commit COMMIT  build from commit COMMIT instead of HEAD
  -t, --target TARGET  build target TARGET instead of <arch>-binary
  -h, --help           show this help message and exit

Examples:
  Build packages for a single architecture from the current commit:
    $ cranky-test-build kathleen amd64

  Build packages for all supported architectures:
    $ cranky-test-build kathleen

  Build binary packages of kernel flavor 'generic' from branch 'testing' for
  architecture ppc64el:
    $ cranky-test-build -c testing -t binary-generic kathleen ppc64el

Current limitations:
  1) The username on the build host must be identical to the username on the
     machine where the script is run.
  2) The build host must be accessible using password-less SSH.

Notes:
  The script should perform all the necessary steps to setup the build host
  when it is run for the first time. Specifcally, it clones the kernel repo
  into the user's home directory on the builder, installs the git hook that
  triggers the actual build and adds a git remote to the local repo.
EOF
	exit 2
}

host=
arches=
commit=HEAD
target=binary

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-c|--commit)
			shift
			commit=${1}
			;;
		-h|--help)
			usage
			;;
		-t|--target)
			shift
			target=${1}
			;;
		*)
			if [ -z "${host}" ] ; then
				host=${1}
			else
				arches=${*}
				break
			fi
			;;
	esac
	shift
done

if [ -z "${host}" ] ; then
	usage
fi

if ! [ -d .git ] ; then
	echo "Error: No such directory '.git'"
	exit 1
fi

# Check if the commit exists
if ! git rev-parse "${commit}" >/dev/null 2>&1 ; then
	echo "Error: No such git reference '${commit}'"
	exit 1
fi

changelog=debian.master/changelog
if ! [ -e "${changelog}" ] ; then
	echo "Error: No such file '${changelog}'"
	exit 1
fi

if [ -z "${arches}" ] ; then
	# shellcheck disable=SC2012
	arches=$(ls -d debian.master/config/*/ | sed -e 's,/$,,' -e 's,.*/,,' | \
				 tr '\n' ' ')
else
	# Verify that the specified arch(es) is/are valid
	for arch in ${arches} ; do
		if ! [ -d "debian.master/config/${arch}" ] ; then
			echo "Error: Unsupported arch '${arch}'"
			exit 1
		fi
	done
fi

# Get the series from the changelog
series=$(dpkg-parsechangelog -l "${changelog}" -S Distribution)
if [ "${series}" = "UNRELEASED" ] ; then
	series=$(dpkg-parsechangelog -l "${changelog}" -S Distribution -o 1 -c 1)
fi

echo "Build host:   ${host}"
echo "Build series: ${series}"
echo "Build arches: ${arches}"
echo "Build commit: $(git log --format='%h ("%s")' "${commit}" -1)"

# Verify we can talk to the host
if ! ssh -o ConnectTimeout=5 "${host}" whoami >/dev/null ; then
	echo "Error: Unable to ssh to host '${host}'"
	exit 1
fi

# The remote URL
remote_url=$(git config "remote.${host}.url" || true)

# Get the git directory from the remote URL
if [ -z "${remote_url}" ] ; then
	git_dir=$(pwd)
	echo "Info: ${host} is not a git remote, adding it..."
	git remote add "${host}" "ssh://${host}${git_dir}"
else
	# Purge ssh://host from the remote URL and prepend a /
	git_dir="${remote_url#*://}"
	git_dir="/${git_dir#*/}"
fi

# Check if the git-build-kernel git hook exists
# shellcheck disable=SC2029
if ! ssh "${host}" "test -e ${git_dir}/.git/hooks/post-receive" ; then

	# Create the repo on the remote, if necessary
	if ! ssh "${host}" "test -d ${git_dir}" ; then
		echo "Info: Repo doesn't exist on ${host}, creating it..."
		ssh "${host}" "git clone /usr3/ubuntu/ubuntu-${series} ${git_dir}"
	fi

	# Create the git-build-kernel post-commit hook
	echo "Info: git-build-kernel hook doesn't exist on ${host}, creating it..."
	ssh "${host}" "ln -s /usr3/ubuntu/kteam-tools/git-build-kernel/post-receive ${git_dir}/.git/hooks/post-receive"
fi

# Create a temporary build branch that we push for the build. This ensures that
# we build the different arches from the same commit in case someone mucks
# around with the local repo in the meantime.
BUILD_BRANCH="tmp-$(git rev-parse --short "${commit}")"
echo "Info: Creating a temporary build branch ${BUILD_BRANCH}"
git branch "${BUILD_BRANCH}" "${commit}"

# Install an exit handler
# shellcheck disable=SC2064
trap out EXIT INT TERM HUP

# Finally cycle through the arches and do the builds
for arch in ${arches} ; do
	echo "Info: Doing a test build for arch '${arch}', target '${target}'"
	git push --force "${host}" "${BUILD_BRANCH}:${arch}-${target}" || true
done
