#!/usr/bin/env python3
#
# Perform checks on source packages and generate diffs for review
#

import argparse
import logging
import subprocess
import os
import sys
import signal
from glob import glob
import tempfile
import re

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'libs')))

from ktl.log import cerror

def dpkg_compare_versions(v1, op, v2):
    cmd = ["dpkg", "--compare-versions", v1, op, v2]
    ret = subprocess.run(cmd)
    return ret.returncode == 0

def review(prev_dsc_dir='', changes_files=[]):
    prev_dscs = glob("%s/*.dsc" % prev_dsc_dir)

    for changes_file in changes_files:
        if not os.path.exists(changes_file):
            cerror("%s does not exist" % changes_file)
            sys.exit(1)

        basename = os.path.basename(changes_file)
        (source_pkg, version) = basename.split('_')[0:2]

        prev_version = None
        for dsc_file in prev_dscs:
            basename = os.path.basename(dsc_file)
            basename = os.path.splitext(basename)[0]
            (dsc_source, dsc_version) = basename.split('_')[0:2]

            # Don't consider files for other source packages ...
            if dsc_source != source_pkg:
                continue
            # ... or files with the same or a newer version
            if dpkg_compare_versions(version, "le", dsc_version):
                continue

            if not prev_version or dpkg_compare_versions(dsc_version, "gt", prev_version):
                prev_version = dsc_version

        if not prev_version:
            cerror("Previous dsc file not found for %s" % changes_file)
            sys.exit(1)

        verabi_re = re.compile("([0-9]+\.[0-9]+\.0)[-.]([0-9]+)\.([0-9])+")
        m = verabi_re.match(version)
        verabi = m.group(1) + '-' + m.group(2)
        fullver = verabi + '.' + m.group(3)
        m = verabi_re.match(prev_version)
        prev_verabi = m.group(1) + '-' + m.group(2)
        prev_fullver = prev_verabi + '.' + m.group(3)

        prev_dsc_file = "%s/%s_%s.dsc" % (prev_dsc_dir, source_pkg, prev_version)
        cmd = ["dcmd", "--dsc", changes_file]
        dsc_file = subprocess.check_output(cmd).decode().strip()

        diff_dir = os.path.dirname(os.path.realpath(changes_file))
        diff_path = os.path.join(diff_dir, "%s_%s.debdiff" % (source_pkg, version))
        outfile = open(diff_path, "w")

        print("Generating %s" % diff_path)

        with tempfile.TemporaryDirectory() as tmpdir:
            prev_dir = source_pkg + '_' + prev_version
            new_dir = source_pkg + '_' + version
            prev_path = os.path.join(tmpdir, prev_dir)
            new_path = os.path.join(tmpdir, new_dir)

            cmd = ["dpkg-source", "-x", prev_dsc_file, prev_path]
            sp = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            stderr = sp.communicate()[1].decode()
            if sp.returncode != 0:
                cerror("Failed to extract %s." % prev_dsc_file)
                cerror("Output from dpkg-source:")
                print(stderr, end='')
                sys.exit(1)

            # Normalize package versions in debian/control
            with open(os.path.join(prev_path, "debian", "control"), "r") as cfile:
                cfile_data = cfile.read()
            cfile_data = cfile_data.replace(prev_fullver, "FULLVER")
            cfile_data = cfile_data.replace(prev_verabi, "VERABI")
            with open(os.path.join(prev_path, "debian", "control"), "w") as cfile:
                cfile.write(cfile_data)

            cmd = ["dpkg-source", "-x", dsc_file, new_path]
            sp = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            stderr = sp.communicate()[1].decode()
            if sp.returncode != 0:
                cerror("Failed to extract %s." % dsc_file)
                cerror("Output from dpkg-source:")
                print(stderr, end='')
                sys.exit(1)

            # Normalize package versions in debian/control
            with open(os.path.join(new_path, "debian", "control"), "r") as cfile:
                cfile_data = cfile.read()
            cfile_data = cfile_data.replace(fullver, "FULLVER")
            cfile_data = cfile_data.replace(verabi, "VERABI")
            with open(os.path.join(new_path, "debian", "control"), "w") as cfile:
                cfile.write(cfile_data)

            cwd = os.getcwd()
            os.chdir(tmpdir)
            cmd = ["git", "diff", "--no-index", "--no-prefix", "--stat", "-p",  prev_dir, new_dir]
            sp = subprocess.Popen(cmd, stdout=outfile, stderr=subprocess.PIPE)
            stderr = sp.communicate()[1].decode()
            os.chdir(cwd)
            if sp.returncode != 0 and sp.returncode != 1:
                cerror("Failed to diff trees. Output from 'git diff':")
                print(stderr, end='')
                sys.exit(1)

        outfile.close()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    desc = """
Run final checks on a source package set, and generate a set of diffs from the
previous package versions for review.
"""

    epilog = """
Examples:
  $ cranky review *.changes
      Run final checks against the specified .changes files. Debdiffs will be
      generated in the current directory for reviewing changes made since the
      previous package version. The source packages for previous package
      versions are expected to be in the current directory.

  $ cranky review --prev-dsc-dir=/path/to/prev *.changes
      Same as the above, but looks for previous source package versions in the
      specified path.
"""

    parser = argparse.ArgumentParser(description=desc, formatter_class=
                                     argparse.RawDescriptionHelpFormatter,
                                     epilog=epilog)
    parser.add_argument("changes_files", nargs="+",
                        help=".changes files for the package set")
    parser.add_argument("-p", "--prev-dsc-dir", default=".",
                        help="Path to previous source packages")

    review(**vars(parser.parse_args()))
