#!/bin/bash -eu
export LC_ALL=C.UTF-8

cranky_cmd="${P:-$(basename "$0")}"
usage() {
	cat << EOF
Usage: ${cranky_cmd} [-h|--help]

List all the relevant changes since the last release in the
debian.BRANCH directory of the base kernel of a derivative. This list
should be used as a guide for things that might need to be ported to a
derivative.

Optional arguments:
  -h, --help            Show this help message and exit.

Examples:
  List changes in the base kernel since the last release:
    \$ ${cranky_cmd}

EOF
}

while [ "$#" -gt 0 ]; do
	case "$1" in
		-h|--help)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
	shift
done


DEBIAN=
# shellcheck disable=SC1091
. debian/debian.env

# Check if the "$DEBIAN" directory exists.
if [ ! -d "$DEBIAN" ]; then
	echo "You must run this script from the top directory of this repository."
	exit 1
fi

CONF="$DEBIAN/etc/update.conf"
if ! [ -f "$CONF" ]; then
	echo "\"$CONF\" is missing! Skipping non derivative kernel."
	exit 0
fi

RELEASE_REPO=
DEBIAN_MASTER=
# shellcheck disable=SC1090
. "$CONF"

# Check if changelog is open
series=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SDistribution)
if [ "$series" != 'UNRELEASED' ]; then
	echo "The last entry of the changelog is already released."
	echo "You should run \"$cranky_cmd\" before closing the release."
	exit 1
fi

if [ "$DEBIAN_MASTER" = "" ]; then
	echo "DEBIAN_MASTER should be defined either in $DEBIAN/etc/update.conf or the environment"
	exit 1
fi

if [ "$RELEASE_REPO" = "" ]; then
	echo "RELEASE_REPO should be defined either in $DEBIAN/etc/update.conf or the environment"
	exit 1
fi

# Loop through each entry of the current changelog, searching for an
# entry that refers to the master version used as base (ie a line
# containing "[ Ubuntu: 4.15.0-39.42 ]"):
offset=0
base_version=
while true; do

	changes=$(dpkg-parsechangelog -l"$DEBIAN/changelog" -SChanges -c1 -o"$offset")
	if ! [ "$changes" ]; then
		echo "Failed to retrieve base master version from changelog file: $DEBIAN/changelog"
		exit 1
	fi
	base_version=$(echo "$changes" | sed -n -r -e '/^\s.*\[ Ubuntu: ([~0-9.-]*) \]$/{s//\1/p;q}')
	[ "$base_version" ] && break
	offset=$((offset + 1))
done

if [ -z "$base_version" ]; then
	echo "Couldn't find the previous version of the base kernel in the changelog."
	exit 1
fi

# List the remote tags
base_tag=$(git ls-remote --tags "$RELEASE_REPO" |
		   awk '{print $2}' |
		   sed -r -e 's/^.*\///' |
		   grep -E 'Ubuntu-.*'"$base_version"'$' |
		   sort | tail -n1)
if [ -z "$base_tag" ]; then
	echo "Could not find a base tag for $base_version in the remote: $RELEASE_REPO"
	exit 1
fi

# Fetch the previous base version for review
if ! output=$(git fetch "$RELEASE_REPO" "$base_tag" 2>&1); then
	echo "Failed to fetch tag \"$base_tag\" from remote $RELEASE_REPO"
	echo "$output"
	exit 1
fi

echo "Listing changes in \"${DEBIAN_MASTER}/\" since $base_tag..."
echo
git log --oneline FETCH_HEAD.. -- "${DEBIAN_MASTER}/" |
	grep -vP 'UBUNTU: (Ubuntu-|link-to-tracker:|Start new release)'
