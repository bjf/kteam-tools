#!/bin/bash

FDR="run_in_chroot fakeroot debian/rules"

source ~/.autokrankrc
KRANK_TAGNAME=autokrank-newest-master-tag
LOGFILE=/tmp/autokrank.log


function usage {
	echo "autokrank: Automatically crank a kernel based on a .krank file"
	echo ""
	echo "Usage: autokrank [OPTIONS] [KRANK_FILE]"
	echo ""
	echo "Options:"
	echo "--sru-cycle <cycle-name>"
	echo -e "\tName of SRU cycle to be passed to link-to-tracker for tracking-bug lookup"
	echo -e "\tNOTE: This _WILL_ modify the launchpad tracking bugs."
	echo -e "\tIf this option is not specified, link-to-tracker will NOT be run at all (and "
	echo -e "\ttherefore no bug number will appear in the changelog)"
	echo "--purge"
	echo -e "\tClear *ALL* non-cache branches as well as *ALL* tags from the 3 autokrank repos"
	echo -e "\tAny local uncommitted changes will be lost from those repos"
	echo -e "\tIn addition, all debuild-related files will be removed from the parent"
	echo -e "\tdirectory of each of the autokrank repos"
	echo -e "\t(Linux source .orig files will NOT be deleted)"
	echo -e "\tProceed with caution!"
	echo "--clearcache"
	echo -e "\tautokrank automatically saves branches it fetches so that future git fetches are fast. Use this option to clear all autokrank cache branches and exit"
	echo "--tasks"
	echo -e "\tSpecify which tasks you want autokrank to do using an array of 6 binary digits. The order of the flags are:"
	echo -e "\t\tcrank_linux"
	echo -e "\t\tbuild_linux"
	echo -e "\t\tcrank_signed"
	echo -e "\t\tbuild_signed"
	echo -e "\t\tcrank_meta"
	echo -e "\t\tbuild_meta"
	echo -e "\tSo for example, 101010 will crank all trees (master, signed and meta) but will not construct any source packages"
	echo "--master-tag"
	echo -e "\t(derivatives only) specify a master tag on which the derivative should be rebased"
	echo -e "\tif no master tag is specified, the derivative will be rebased on the 'most recently autokranked master'"
	echo -e "\tSo make sure your kernel order is correct"
	echo "--help"
	echo -e "\tDisplay this message and exit"
}

function clear_cache {
	for i in $LINUX_DIR $SIGNED_DIR $META_DIR; do
		cd $i
		git cherry-pick --abort  &> /dev/null
		git rebase --abort  &> /dev/null
		git reset HEAD .
		git checkout -- .
		git clean -fxd
		git checkout master
                for j in `git branch|grep autokrank|grep cache`; do
			echo deleting cache branch $j
                        git branch -D $j
                done;
	done
}

function purge_trees_and_directories {
	for i in $LINUX_DIR $SIGNED_DIR $META_DIR; do
		cd $i
		git cherry-pick --abort  &> /dev/null
		git rebase --abort  &> /dev/null
		git reset HEAD .
		git checkout -- .
		git clean -fxd
		git checkout master
                for j in `git branch|grep -v autokrank-cache|grep -v "* master"`; do
			echo deleting branch $j
                        git branch -D $j
                done;
                for j in `git tag`; do
                        git tag -d $j
                done;
	done
	for i in $LINUX_DIR $SIGNED_DIR $META_DIR; do
		cd "$(dirname "$i")"
		echo "Clearing build files from $PWD"
		for j in `ls -1 | grep -v orig`; do
			if [ -f $j ] ; then
				echo "Deleting $j"
				rm $j &> /dev/null
			fi
		done
	done
}

function prepare_directory {
	if [ $1 = 'linux' ] ; then
		FETCH_SOURCE=$LINUX_FETCH_SOURCE
		ORIGIN=$LINUX_ORIGIN
	elif [ $1 = 'signed' ] ; then
		FETCH_SOURCE=$SIGNED_FETCH_SOURCE
		ORIGIN=$SIGNED_ORIGIN
	elif [ $1 = 'meta' ] ; then
		FETCH_SOURCE=$META_FETCH_SOURCE
		ORIGIN=$META_ORIGIN
	elif [ $1 = 'lrm' ] ; then
		FETCH_SOURCE=$LRM_FETCH_SOURCE
		ORIGIN=$LRM_ORIGIN
	fi

	git cherry-pick --abort  &> /dev/null
	git rebase --abort  &> /dev/null
	git reset HEAD .
	git checkout -- .
	git clean -fxd
	git branch $TEMPBRANCH
	git checkout $TEMPBRANCH
	LOG "Resetting branch from: $FETCH_SOURCE"
	git fetch --tags $ORIGIN
	git fetch $FETCH_SOURCE


	git reset --hard FETCH_HEAD

	# Save the branch somewhere to speed up future fetches
	if [ $TYPE = 'master' ] ; then
		git branch -D autokrank-cache-$SERIES-master &> /dev/null
		git branch autokrank-cache-$SERIES-master

	elif [ $TYPE = 'derivative' ] ; then
		git branch -D autokrank-cache-$SERIES-$VARIANT &> /dev/null
		git branch autokrank-cache-$SERIES-$VARIANT
	elif [ $TYPE = 'backport' ] ; then
		git branch -D autokrank-cache-$SERIES-$VARIANT &> /dev/null
		git branch autokrank-cache-$SERIES-$VARIANT
	fi
	
}


function run_in_chroot {
	schroot -r --preserve-environment -c $CHROOT -- $@
}



function LOG {
	echo -n "$(date "+%F %T.%N: ")" >> $LOGFILE
	echo $@ >> $LOGFILE
}



NO_LINKTOTRACKER=1

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	-p|--purge)
		PURGE=1
		shift # past argument
	;;
	-s|--sru-cycle)
		SRUCYCLE="$2"
		NO_LINKTOTRACKER=0
		shift # past argument
		shift # past value
	;;
	-t|--tasks)
		TASKS="$2"
		shift # past argument
		shift # past value
	;;
	--master-tag)
		REBASE_TAG="$2"
		shift # past argument
		shift # past value
	;;
	-c|--clearcache)
		CLEARCACHE=1
		shift # past argument
	;;
	-h|--help|-u|--usage)
		usage
		exit 0
	;;
	*)    # unknown option
		POSITIONAL+=("$1") # save it in an array for later
		shift # past argument
	;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

KRANKFILE=$1

if [ x"$CLEARCACHE" != x'' ] ; then
	echo "About to clear autokrank cache branches from:"
	echo "  $LINUX_DIR"
	echo "  $SIGNED_DIR"
	echo "  $META_DIR"
	read -r -p "Are you sure you want to continue? [y/N] " response
	case "$response" in
	    [yY][eE][sS]|[yY]) 
		clear_cache
		exit 0
		;;
	    *)
		exit 0
		;;
	esac
	exit 0
fi


if [ x"$PURGE" != x'' ] ; then
	echo "About to purge all autokrank branches and *ALL* tags"
	echo "from your repos: "
	echo "  $LINUX_DIR"
	echo "  $SIGNED_DIR"
	echo "  $META_DIR"
	echo "As well as all debuild-related files from: "
	echo "   $(dirname "$LINUX_DIR")"
	echo "   $(dirname "$SIGNED_DIR")"
	echo "   $(dirname "$META_DIR")"
	read -r -p "Are you sure you want to continue? [y/N] " response
	case "$response" in
	    [yY][eE][sS]|[yY]) 
		purge_trees_and_directories
		exit 0
		;;
	    *)
		exit 0
		;;
	esac
fi

echo logfile is $LOGFILE

LOG ""
LOG ""
LOG ""
LOG ""
LOG ""
LOG ""
LOG ""
LOG ""




LOG "-- autokranking $KRANKFILE --"
source $KRANKFILE

DATE_S=$(date +%s)
if [ $TYPE = 'master' ] ; then
	TEMPBRANCH=autokrank-$DATE_S-$SRUCYCLE-$SERIES-$TYPE
else
	TEMPBRANCH=autokrank-$DATE_S-$SRUCYCLE-$SERIES-$VARIANT
fi
LOG "Using branch name: $TEMPBRANCH"


if [ x$TASKS = 'x' ] ; then
	# If no tasks were specified, then do everything
	TASKS='111111'
fi


LOG "Tasks are: $TASKS"

TASK_CRANK_LINUX=$(echo $TASKS | grep -o .|head -n 1)
TASK_BUILD_LINUX=$(echo $TASKS | grep -o .|head -n 2|tail -n 1)
TASK_CRANK_SIGNED=$(echo $TASKS | grep -o .|head -n 3|tail -n 1)
TASK_BUILD_SIGNED=$(echo $TASKS | grep -o .|head -n 4|tail -n 1)
TASK_CRANK_META=$(echo $TASKS | grep -o .|head -n 5|tail -n 1)
TASK_BUILD_META=$(echo $TASKS | grep -o .|head -n 6|tail -n 1)
TASK_CRANK_LRM=$(echo $TASKS | grep -o .|head -n 7|tail -n 1)
TASK_BUILD_LRM=$(echo $TASKS | grep -o .|head -n 8|tail -n 1)

if [ $NO_LINKTOTRACKER = '1' ] ; then
	LOG "Will NOT run link-to-tracker (no bug number will appear in the changelog)"
fi


##################
#
# LINUX
#
##################
LOG ""
LOG "LINUX"
LOG "-----"
LOG "Switching to $LINUX_DIR"
cd $LINUX_DIR
prepare_directory linux

CHROOT=$($KTEAMTOOLS/cranky/cranky chroot map-session sources)
LOG "chroot session that will be used: $CHROOT"



if [ $TYPE = 'meta-only' ]; then
	TASK_CRANK_LINUX=0;
	TASK_BUILD_LINUX=0;
fi

if [ $TASK_CRANK_LINUX = '1'  ] ; then
	LOG "Running cranky-fix"
	$KTEAMTOOLS/cranky/cranky fix

	LOG "Running cranky-rebase"
	$KTEAMTOOLS/cranky/cranky rebase
	RES=$?

	while [ $RES -eq 128 ] ; do
		git diff --name-only|grep debian.scripts.helpers
		if [ $? -eq 1 ] ; then
			LOG "FATAL: rebase failed, needs manual merge"
			exit 1
		else
			LOG "(WARN) Rebase failed to merge helper scripts, skipping"
			git rebase --skip
			RES=$?
		fi
	done

	LOG "Running cranky-open"
	RES=$($KTEAMTOOLS/cranky/cranky open)
	if [ $RES != '0' ] ; then
		LOG "FATAL: cranky-open failed -- please investigate"
		exit 1
	fi


	if [ $NO_LINKTOTRACKER != '1' ] ; then
		LOG "Running cranky-link-tb"
		$KTEAMTOOLS/cranky/cranky link-tb --re-run -s $SRUCYCLE
	else
		LOG "Skipping link-to-tracker!!"
	fi;

	LOG "Running cranky-close"
	RES=$($KTEAMTOOLS/cranky/cranky close)
	if [ $RES != '0' ] ; then
		LOG "FATAL: cranky-close failed -- please investigate"
		exit 1
	fi

	LOG "Running cranky-tag"
	$KTEAMTOOLS/cranky/cranky tag

	if [ $TYPE = 'master' ] ; then
		# if this is master, tag our new commit so that
		# the derivatives have something on which to rebase
		# (This is obsoleted by cranky)
		git tag -d $KRANK_TAGNAME
		git tag $KRANK_TAGNAME
		LOG "Generated new autokrank master tag ('$KRANK_TAGNAME' a.k.a '$(git describe $KRANK_TAGNAME)')"
	fi
fi


if [ $TASK_BUILD_LINUX = '1' ] ; then
	git clean -fxd
	$FDR clean

	# Just in case a linux.orig is present from before:
	rm -rf ../linux.orig

	eval PKG_NAME="$LINUX_PKG_NAME"
	LOG "PKG_NAME is $PKG_NAME"
	LASTVER=$(rmadison -a source $PKG_NAME | grep $SERIES|grep updates|sed -e "s/.$PKG_NAME...//g"|sed -e 's/ .*//g')
	LOG "Last linux version in rmadison -updates: $LASTVER"
	LASTVER=$(echo $LASTVER|sed -e 's/~.*//g')
	LOG "Version that will be used with debuild: $LASTVER"
	LOG "Constructing source pkg for linux"
	run_in_chroot debuild -S -i -I -us -uc -v$LASTVER
	LOG "Done constructing linux pkgs"
fi


##################
#
# SIGNED
#
##################

LOG ""
LOG "SIGNED"
LOG "------"
LOG "Switching to $SIGNED_DIR"
cd $SIGNED_DIR
prepare_directory signed

if [ x"$SIGNED_PKG_NAME" != "x" ] ; then
	if [ $TASK_CRANK_SIGNED = '1' ] ; then

		COMMANDS=$(./update-version $LINUX_DIR|tail -n 2 )
		COMMIT_CMD=$(echo $COMMANDS| sed -e 's/git.tag.*//g' )
		TAG_CMD=$(echo $COMMANDS| sed -e 's/.*git.tag/git tag/g' )
		LOG "Commit command is: $COMMIT_CMD"
		echo $COMMIT_CMD | bash
		LOG "Tag command is: $TAG_CMD"
		echo $TAG_CMD | bash
	fi

	if [ $TASK_BUILD_SIGNED = '1' ] ; then
		git clean -fxd
		$FDR clean

		eval PKG_NAME="$SIGNED_PKG_NAME"
		LOG "PKG_NAME is $PKG_NAME"
		LASTVER=$(rmadison -a source $PKG_NAME | grep $SERIES|grep updates|sed -e "s/.$PKG_NAME...//g"|sed -e 's/ .*//g')
		LOG "Last linux-signed version in rmadison -updates: $LASTVER"

		LASTVER=$(echo $LASTVER|sed -e 's/~.*//g')
		LOG "Version that will be used with debuild: $LASTVER"
		LOG "Constructing source pkg for signed"
		run_in_chroot debuild --no-tgz-check -S -d -i -I -us -uc -v$LASTVER
		LOG "Done constructing linux-signed pkgs"
	fi
else
	LOG "This kernel doesn't have a signed pkg - skipping 'signed'"
fi









##################
#
# META
#
##################

LOG ""
LOG "META"
LOG "----"
LOG "Switching to $META_DIR"
cd $META_DIR
prepare_directory meta


if [ $TASK_CRANK_META = '1' ] ; then

	COMMANDS=$(./update-version $LINUX_DIR|tail -n 2 )
	COMMIT_CMD=$(echo $COMMANDS| sed -e 's/git.tag.*//g' )
	TAG_CMD=$(echo $COMMANDS| sed -e 's/.*git.tag/git tag/g' )
	LOG "Commit command is: $COMMIT_CMD"
	echo $COMMIT_CMD | bash
	LOG "Tag command is: $TAG_CMD"
	echo $TAG_CMD | bash
fi

if [ $TASK_BUILD_META = '1' ] ; then
	git clean -fxd
	$FDR clean

	eval PKG_NAME="$META_PKG_NAME"
	LOG "PKG_NAME is $PKG_NAME"
	LASTVER=$(rmadison -a source $PKG_NAME | grep $SERIES|grep updates|sed -e "s/.$PKG_NAME...//g"|sed -e 's/ .*//g')
	LOG "Last linux-meta version in rmadison -updates: $LASTVER"
	LOG "Constructing source pkg for meta"
	run_in_chroot debuild -S -d -i -I -us -uc -v$LASTVER
	LOG "Done constructing linux-meta pkgs"
fi




##################
#
# LRM
#
##################

LOG ""
LOG "LRM"
LOG "----"
LOG "Switching to $LRM_DIR"
if [ x"$LRM_PKG_NAME" != "x" ] ; then
	cd $LRM_DIR
	prepare_directory lrm


	if [ $TASK_CRANK_LRM = '1' ] ; then

		COMMANDS=$(./update-version $LINUX_DIR|tail -n 2 )
		COMMIT_CMD=$(echo $COMMANDS| sed -e 's/git.tag.*//g' )
		TAG_CMD=$(echo $COMMANDS| sed -e 's/.*git.tag/git tag/g' )
		LOG "Commit command is: $COMMIT_CMD"
		echo $COMMIT_CMD | bash
		LOG "Tag command is: $TAG_CMD"
		echo $TAG_CMD | bash
	fi

	if [ $TASK_BUILD_LRM = '1' ] ; then
		git clean -fxd
		$FDR clean

		eval PKG_NAME="$LRM_PKG_NAME"
		LOG "PKG_NAME is $PKG_NAME"
		LASTVER=$(rmadison -a source $PKG_NAME | grep $SERIES|grep updates|sed -e "s/.$PKG_NAME...//g"|sed -e 's/ .*//g')
		LOG "Last linux-restricted-modules version in rmadison: $LASTVER"
		LASTVER=$(echo $LASTVER|sed -e 's/~.*//g')
		LOG "Version that will be used with debuild: $LASTVER"
		LOG "Constructing source pkg for lrm"
		run_in_chroot debuild -S -d -i -I -us -uc -v$LASTVER
		LOG "Done constructing linux-restricted-modules pkgs"
	fi
else
	LOG "This kernel doesn't have a liux-restricted-modules pkg - skipping 'lrm'"
fi

LOG ""
LOG "done autokranking $KRANKFILE"
LOG "-------------------------"
