#!/usr/bin/python3

import os
import sys

sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '..', '..', 'libs')))

from ktl.kernel_series      import KernelSeries

print('strict digraph {')
#print(' concentrate=true;')
print(' rankdir=RL; // Left to Right, instead of Top to Bottom')
#print(' node [width="3"]')

nodes_nid = 0
nodes_nids = {}
nid_labels = {}

def labels_to_str(labels):
    modifiers = '; '.join([ l + '="' + v + '"' for l,v in labels.items() ])
    if modifiers == '':
        return ''

    return ' [' + modifiers + ']'


def node_set(node, new_labels):
    global nodes_nid
    global nodes_nids
    global nid_labels

    if node not in nodes_nids:
        nodes_nid += 1
        nodes_nids[node] = nodes_nid

        group = node.split('/')[0]
        label = node.replace('/', '\\n')
        nid_labels[nodes_nid] = { 'group': group, 'label': label }

    nid = nodes_nids[node]
    
    labels = nid_labels[nid]
    labels.update(new_labels)

    return nid


edges = []
def edge_add(start, end, labels):
    global edges
    edges.append((start, end, labels))



def nodes_emit():
    global nodes_nids
    global nid_labels

    groups = {}
    for nid in sorted(nid_labels):
        groups[nid_labels[nid]['group']] = True
        print(' T{nid}{labels}'.format(nid=nid, labels=labels_to_str(nid_labels[nid])))

    #for group in groups:
    #    print("{ rank=same", end='')
    #    for node in sorted(nodes_labels):
    #        if nodes_labels[node]['group'] == group:
    #            print(" T" + str(nodes_nids[node]), end='')
    #    print("}")


def edges_emit():
    global edges
    for (start, end, labels) in edges:
        print(' T{start} -> T{end}{labels}'.format(start=start, end=end, labels=labels_to_str(labels)))


def connection_add(start, link, end):
    start_modifiers = {}
    link_modifiers = {'color': 'grey'}
    if link[0] == 'X':
        start_modifiers.update({'color': 'grey', 'fontcolor': 'grey'})
        link = link[1:]

    if link == '-->':
        link_modifiers.update({'style': 'dashed', 'color': 'orange'})
    elif link == 'copy':
        link_modifiers.update({'color': 'brown', 'dir': 'none', 'label': 'copy'})

    start_nid = node_set(start, start_modifiers)
    end_nid = node_set(end, {})

    edge_add(start_nid, end_nid, link_modifiers)

#kernel_series = KernelSeries()
#for series in

# Injest all the nodes.
for line in sys.stdin:
    if line[0] in ('#', '\n'):
        continue
    (start, link, end) = line.strip().split()

    connection_add(start, link, end)

nodes_emit()
edges_emit()

print('}')
