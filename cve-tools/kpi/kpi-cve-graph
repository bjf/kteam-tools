#!/usr/bin/python
from __future__ import print_function

from collections import defaultdict
import json
import sys

(mode, series, package) = (sys.argv[1:4])
key = series + " " + package
prev = None
for date in sys.argv[4:]:
    with open(date) as info_fd:
        info = json.load(info_fd)

    if key not in info:
        continue

    date = info[key]['meta']['date']
    
    if mode in ('open', 'close'):
        # This almost cirtainly represents closure.
        if info[key]['state']['summary'].get('open', 0) == 0:
            continue

        print(date,
            info[key]['state']['summary'][mode],
            info[key]['priority']['by-summary'][mode].get('critical', 0),
            info[key]['priority']['by-summary'][mode].get('high', 0),
            info[key]['priority']['by-summary'][mode].get('medium', 0),
            info[key]['priority']['by-summary'][mode].get('low', 0),
            info[key]['priority']['by-summary'][mode].get('negligible', 0),
        )

    elif mode == 'needswork-detail':
        # This almost cirtainly represents closure.
        if info[key]['state']['summary'].get('open', 0) == 0:
            continue

        total = 0
        result = []
        for state in ('critical', 'high', 'medium', 'low', 'negligible'):
            delta = (info[key]['priority']['by-summary']['open'].get(state, 0) -
                     info[key]['priority']['by-state'].get('pending', {}).get(state, 0))
            total += delta
            result.append(delta)
        
        print(date, total, *result)

    elif mode == 'needswork':
        # This almost cirtainly represents closure.
        if info[key]['state']['summary'].get('open', 0) == 0:
            continue

        total = 0
        result = []
        for state in ('critical', 'high', 'medium', 'low', 'negligible'):
            delta = (info[key]['priority']['by-summary']['open'].get(state, 0) -
                     info[key]['priority']['by-state'].get('pending', {}).get(state, 0))
            total += delta
            result.append(delta)
        
        print(date,
            info[key]['state']['summary'].get('open', 0),
            (info[key]['state']['summary'].get('open', 0) - 
             info[key]['state']['total'].get('pending', 0))
        )

    elif mode == 'delta':
        if prev != None:
            total = 0
            result = []
            for priority in ('critical', 'high', 'medium', 'low', 'negligible'):
                dead_p = prev['priority']['by-summary']['closed'].get(priority, 0)
                total_p = prev['priority']['total'].get(priority, 0)
                dead_c = info[key]['priority']['by-summary']['closed'].get(priority, 0)
                total_c = info[key]['priority']['total'].get(priority, 0)
                delta = (total_c - total_p) - (dead_c - dead_p)

                #print(total_c, total_p, total_c - total_p, dead_c, dead_p, dead_c - dead_p, delta, file=sys.stderr)
                result.append(str(delta))
                total += delta
            #print("APW", " ".join([date, str(total)] + result), file=sys.stderr)
            print(" ".join([date, str(total)] + result))

        prev = info[key]

    elif mode == 'opened':
        # This almost cirtainly represents closure.
        if info[key]['state']['summary'].get('open', 0) == 0:
            continue

        if prev != None:
            result = []
            for priority in ('critical', 'high', 'medium', 'low', 'negligible'):
                prev_cves = set()
                curr_cves = set()
                for summary in ('open', 'closed'):
                    prev_cves.update(prev['priority']['by-summary-list'].get(priority, {}).get(summary, []))
                    curr_cves.update(info[key]['priority']['by-summary-list'].get(priority, {}).get(summary, []))

                new = curr_cves - prev_cves
                #print(new, file=sys.stderr)
                result.append(str(len(new)))
            print(" ".join([date] + result))

        prev = info[key]

    elif mode == 'closed':
        # This almost cirtainly represents series closure.
        if info[key]['state']['summary'].get('open', 0) == 0:
            continue

        if prev != None:
            result = []
            for priority in ('critical', 'high', 'medium', 'low', 'negligible'):
                prev_cves = set()
                curr_cves = set()
                prev_cves.update(prev['priority']['by-summary-list'].get(priority, {}).get('closed', []))
                curr_cves.update(info[key]['priority']['by-summary-list'].get(priority, {}).get('closed', []))

                new = curr_cves - prev_cves
                #print("APW", str(len(prev_cves)), str(len(curr_cves)), str(len(new)), file=sys.stderr)
                result.append(str(len(new)))
            print(" ".join([date] + result))

        prev = info[key]

    else:
        raise(ValueError("Unknown Mode"))
