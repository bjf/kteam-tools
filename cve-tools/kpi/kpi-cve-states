#!/usr/bin/python2 
from __future__ import print_function

from collections import defaultdict
import json
import sys
import yaml

#count_by_priority = defaultdict(int)
#count_by_series_package_priority = defaultdict(int)
#count_by_series_package_status = defaultdict(int)

date = sys.argv[1]

def series_init():
    return {
        'meta': {},
        'priority': {
            'total': defaultdict(int),
            'by-state': defaultdict(lambda: defaultdict(int)),
            'by-summary': defaultdict(lambda: defaultdict(int)),
            'by-summary-list': defaultdict(lambda: defaultdict(list)),
        },
        'state': {
            'total': defaultdict(int),
            'summary': defaultdict(int),
            'by-summary': defaultdict(lambda: defaultdict(int)),
            'by-priority': defaultdict(lambda: defaultdict(int)),
        },
    }

count_by_series_package = defaultdict(series_init)

for line in sys.stdin:
    filename = line.strip()

    priority = None
    cve_state = {}
    interesting = False
    cve_number = None
    with open(filename) as cve_fd:
        for cline in cve_fd:
            cline = cline.rstrip()
            if cline.startswith('Candidate:'):
                cve_number = cline.split(':')[1].strip()
                continue
            elif cline.startswith('Priority:'):
                (keyword, priority) = cline.split(':')
                priority = priority.lstrip()
                continue
            if cline.startswith('Patches_linux:'):
                interesting = True
            if len(cline) > 0 and cline[0] in (' ', '#'):
                continue
            if len(cline) > 0 and cline[0].islower() and '_' in cline:
                (series_package, state_desc) = cline.split(':', 1)
                #print("<{}> <{}>".format(series_package, state_desc))
                (series, package) = series_package.split('_')
                if not package.startswith('linux'):
                    continue
                bits = state_desc.split(None, 1) + [ None, None ]
                (state, desc) = (bits[0:2])
                #print("<{}> <{}> <{}> <{}>".format(series, package, state, desc))
                if state == None:
                    continue
                if state == 'DNE':  
                    continue
                if state == 'ignored': # and desc in ('abandoned', 'reached end-of-life'):
                    continue
                if state == 'not-affected' and desc and len(desc) >= 2 and desc[1].isdigit():
                    state = 'released-prerelease'
                key = series + ' ' + package
                cve_state[key] = state

    if interesting:
        #print(filename, priority, cve_state)
        for series_package in cve_state:
            #key = series_package + ' ' + priority
            #count_by_series_package_priority[key] += 1

            #key = series_package + ' ' + cve_state[series_package]
            #count_by_series_package_status[key] += 1

            base_state = cve_state[series_package]
            if base_state in ('released', 'released-prerelease', 'ignored', 'not-affected'):
                summary_state = 'closed'
            else:
                summary_state = 'open'

            where = count_by_series_package[series_package]
            where['meta']['date'] = date

            where['priority']['total'][priority] += 1
            where['priority']['by-summary'][summary_state][priority] += 1
            where['priority']['by-state'][base_state][priority] += 1
            where['priority']['by-summary-list'][priority][summary_state].append(cve_number)

            where['state']['summary']['all'] += 1
            where['state']['summary'][summary_state] += 1
            where['state']['total'][base_state] += 1
            where['state']['by-summary'][summary_state][base_state] += 1
            where['state']['by-priority'][priority][base_state] += 1

json.dump(count_by_series_package, sys.stdout, sort_keys=True, indent=2)
