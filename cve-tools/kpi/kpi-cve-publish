#!/usr/bin/python3

import datetime
from collections import defaultdict

class CollectorRegistry:
    def __init__(self):
        self.collectors = []

    def register(self, collector):
        self.collectors.append(collector)

    def write_to_textfile(self, filename):
        for collector in self.collectors:
            (name, description, type, samples) = collector.collect()

            print("# HELP {} {}".format(name, description))
            print("# TYPE {} {}".format(name, type))

            for timestamp in sorted(samples):
                for sample in sorted(samples[timestamp]):
                    print("{}{} {}{}".format(name, sample, samples[timestamp][sample], " " + timestamp if timestamp else ""))


class Gauge:
    def __init__(self, name, description, registry=None):
        self.name = name
        self.desc = description
        self.registry = registry

        self._samples = defaultdict(dict)

        if registry:
            registry.register(self)

    def _labels_string(self, labels):
        if not labels:
            return ''
        labels_str = ','.join([key + '="' + labels[key] + '"' for key in sorted(labels.keys())])
        return '{' + labels_str + '}'
            
    def set(self, value, labels=None, timestamp=''):
        label_string = self._labels_string(labels)
        self._samples[timestamp][label_string] = value

    def collect(self):
        return(self.name, self.desc, 'Gauge', self._samples)


def set_gauges(registry, series_list):
    test_gauge = Gauge('kernel_cves', 'CVE count', registry=registry)

    for series in series_list:
        test_gauge.set(labels={'series': series['name']}, value=series['cve_count'])
        test_gauge.set(timestamp=str(int(datetime.datetime.utcnow().timestamp())*1000), labels={'series': series['name']}, value=series['cve_count'])


if __name__ == '__main__':
    import os
    import sys

    series = []
    series.append({
        'name': 'artful',
        'cve_count': 11,
    })
    series.append({
        'name': 'zesty',
        'cve_count': 15,
    })

    registry = CollectorRegistry()
    try:
        set_gauges(registry, series)
    finally:
        registry.write_to_textfile("test")
