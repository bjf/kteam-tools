#!/usr/bin/python2

from __future__ import print_function

import datetime
import json
import sys

epoch = datetime.datetime.utcfromtimestamp(0)

def date_to_influx_ts(date):
    dt = datetime.datetime.strptime(date, "%Y-%m-%d")
    timestamp = int((dt - epoch).total_seconds() * 1000000000.0)

    return timestamp

timestamp = date_to_influx_ts(sys.argv[2])
with open(sys.argv[1], 'r') as hcdfd:
    data = json.load(hcdfd)

by_kernel = {}

for (client_version, client_data) in data.items():
    for (kernel_version, kernel_data) in client_data.items():
        #print(client_version, kernel_version, kernel_data)

        for (patch_level, patch_data) in kernel_data.items():
            for (machine_state, machine_count) in patch_data.items():
                #print("MACHINE_STATE", machine_state)
                states = by_kernel.setdefault(kernel_version, {}).setdefault(patch_level, {})
                states[machine_state] = states.get(machine_state, 0) + machine_count

out_by_patch_by_summary = {}
out_by_kernel_by_summary = {}

out_by_kernel = {}
patch_versions = {}
all_patch_versions = {}
for (kernel_version, by_patch) in by_kernel.items():
    for (patch_version, by_state) in by_patch.items():
        all_patch_versions[patch_version] = True
        cur_by_patch_by_summary = out_by_patch_by_summary.setdefault(patch_version, {})

        patch_live = False

        for (state, count) in by_state.items():
            if state in ('applied', 'unapplied'):
                summary = state
            elif state in ('nothing-to-apply'):
                if patch_version != '':
                    print(state, patch_version, file=sys.stderr)
                summary = 'no-patch'
            elif state in ('apply-failed'):
                summary = 'failed'
            else:
                summary = 'unknown'
            cur_by_patch_by_summary[summary] = cur_by_patch_by_summary.get(summary, 0) + count

            if state not in ('nothing-to-apply', 'unapplied'):
                patch_live = True
                kernel_live = True
        if patch_live:
            cur_by_kernel_by_summary = out_by_kernel_by_summary.setdefault(kernel_version, {})
            cur_by_kernel_by_summary[summary] = cur_by_kernel_by_summary.get(summary, 0) + count

            out_by_patch = out_by_kernel.setdefault(kernel_version, {})
            out_by_summary = out_by_patch.setdefault(patch_version, {})

            patch_versions[patch_version] = True

            # Summarise.
            for (state, count) in by_state.items():
                if state in ('applied', 'unapplied'):
                    summary = state
                elif state in ('nothing-to-apply'):
                    summary = 'no-patch'
                elif state in ('apply-failed'):
                    summary = 'failed'
                else:
                    summary = 'unknown'

                out_by_summary[summary] = out_by_summary.get(summary, 0) + count


#for kernel_version in sorted(by_kernel.keys()):
#    print(kernel_version)
#    by_patch = by_kernel[kernel_version]
#    for patch_version in sorted(by_patch.keys()):
#        print(' ', "NONE" if patch_version == '' else patch_version)
#        by_state = by_patch[patch_version]
#        for state in sorted(by_state.keys()):
#            print('  ', state, by_state[state])

if 0:
    result = [ 'State' ]
    for summary in ('no-patch', 'applied', 'unapplied', 'failed', 'unknown'):
        result.append(summary)
    print(' '.join(result))
    for kernel_version in sorted(out_by_kernel.keys()):
        by_patch = by_kernel[kernel_version]
        for patch_version in sorted(patch_versions.keys()):
            result = [ kernel_version + '#' + patch_version ]
            patch_string = "NONE" if patch_version == '' else patch_version
            for summary in ('no-patch', 'applied', 'unapplied', 'failed', 'unknown'):
                by_summary = by_patch.get(patch_version, {})
                result.append(str(by_summary.get(summary, 0)))
            print(' '.join(result))

if 1:
    for patch_version in sorted(all_patch_versions.keys()):
        patch_string = "NONE" if patch_version == '' else patch_version
        by_summary = out_by_patch_by_summary.get(patch_version, {})
        result = [ 'livepatch_by_patch_by_summary,patch=' + patch_string ]
        fields = []
        for summary in ('no-patch', 'applied', 'unapplied', 'failed'):
            fields.append(summary + '=' + str(by_summary.get(summary, 0)))
        result.append(','.join(fields))
        result.append(str(timestamp))
        print(' '.join(result))

if 0:
    result = [ 'State' ]
    for summary in ('no-patch', 'applied', 'unapplied', 'failed', 'unknown'):
        result.append(summary)
    print(' '.join(result))
    for patch_version in sorted(all_patch_versions.keys()):
        patch_string = "NONE" if patch_version == '' else patch_version
        by_summary = out_by_patch_by_summary.get(patch_version, {})
        result = [ patch_string ]
        for summary in ('no-patch', 'applied', 'unapplied', 'failed', 'unknown'):
            result.append(str(by_summary.get(summary, 0)))
        print(' '.join(result))

if 0:
    result = [ 'State' ]
    for summary in ('no-patch', 'applied', 'unapplied', 'failed', 'unknown'):
        result.append(summary)
    print(' '.join(result))
    for kernel_version in sorted(out_by_kernel_by_summary.keys()):
        by_summary = out_by_kernel_by_summary.get(kernel_version, {})
        result = [ kernel_version.replace('~', '\\\\~') ]
        for summary in ('no-patch', 'applied', 'unapplied', 'failed', 'unknown'):
            result.append(str(by_summary.get(summary, 0)))
        print(' '.join(result))
