#!/bin/bash

set -e
shopt -s extglob

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

export http_proxy=http://squid.internal:3128/

root="$HOME/cve-matrix"
cves="$root/CVE-result-cves"
tracker="$root/cve-tracker"
scripts="$tracker/scripts"
out="$HOME/public_html/cve/pkg"

# Pull tree changes
if [ ! -d "$tracker" ]; then
	mkdir -p "$root"
	cd "$root" || exit 1
	#bzr branch lp:~canonical-kernel-team/ubuntu-cve-tracker/kernel-team "$tracker"
	git clone ../cve-autotriage/cve-tracker "$tracker"
fi
cd "$tracker" || exit 1
#bzr revert
#bzr pull --overwrite ../../cve-autotriage/cve-tracker >/dev/null 2>&1
#bzr revert
git fetch origin
git reset --hard origin/master
cp "$here/bulk-html-export-pkg.py" "$tracker/scripts"

# BODGE
##cp "$here/html_export.py" "$scripts"

# Identify all kernel cves.
(
	cd "$tracker" || exit 1

	cves=(active/CVE-+([0-9])-+([0-9]))
	cat "${cves[@]}" | \
		awk '
			/^Candidate:/			{ cve="active/" $2; next }
			/^Patches_linux:/		{ print(cve); next }
	'
) >"$cves"

# Prepare the output.
mkdir -p "$out"

#$scripts/html-export-pkg.py --commit 1 linux-krillin `awk '/ product linux-krillin / { print $1 }' ~/cve-autotriage/state/CVE-result-cves` >~/public_html/cve/pkg/X.html

[ ! -f "$out/../toplevel.css" ] && cp "$scripts/html-top/toplevel.css" "$out/.."

# Use kernel-series.yaml to load up the repo definitions for Ubuntu packages.
eval $( "$here/matrix-config" 'primary' )
source_package_list
pkgs="$RET"
for pkg in $pkgs
do
    echo "$out/$pkg-full.html $pkg"
done | $scripts/bulk-html-export-pkg.py $( cat "$cves" )
for pkg in $pkgs
do
    echo "merge $pkg"
    $here/cve-merge ${HOME}/cve-autotriage/state/CVE-notes "$out/$pkg-full.html" >"$out/$pkg.html"
done

all_html=""
for pkg in $pkgs
do
    all_html="$all_html $out/$pkg-full.html"
done

echo "combo ALL-linux"
$here/cve-merge ${HOME}/cve-autotriage/state/CVE-notes \
	$all_html \
    >$out/ALL-linux.html

date
