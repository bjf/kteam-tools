#!/usr/bin/python

from __future__ import print_function

import os
import sys

sys.path.append('scripts')

from cve_lib import all_releases, devel_release

retired = False
if len(sys.argv) >= 1 and sys.argv[1] == '-r':
    sys.argv.pop(1)
    retired = True
    
if len(sys.argv) < 3:
    print("Usage:" + sys.argv[0] + " <boilerplate> <cve> ...", file=sys.stderr)
    sys.exit(1)

boilerplate = sys.argv[1]
cves = sys.argv[2:]

# Load up the boilerplate as a guide as to what might be missing.
boilerplate_order = []
boilerplate_sections = {}
boilerplate_entry = {}
in_section = False
with open(boilerplate) as bpfd:
    section = None
    for line in bpfd:
        if len(line.strip()) == 0:
            in_section = False
        bits = line.split(':', 1)
        ##print(len(bits), bits)
        if len(bits) >= 1 and bits[0].startswith('Patches_'):
            in_section = True
            section = bits[0]
            boilerplate_sections[section] = []
            boilerplate_order.append(section)
        if in_section and line[0] != ' ' and line[0][0].islower() and len(bits) > 1 and not bits[0].startswith('Patches_'):
            boilerplate_entry[bits[0]] = bits[1].strip()
            if retired:
                line = line.replace('devel_', devel_release + '_')
            boilerplate_sections[section].append(line)

for cve in cves:
    print(cve)
    with open(cve, "r") as cfd, open(cve + ".new", "w") as rfd:
        # Load the existing sections and add any missing boilerplate lines.
        seen_sections = {}
        previous_idx = None
        line_idx = None
        in_section = False
        for line in cfd:
            if len(line) > 0 and line[0] == ' ':
                pass
            elif len(line.strip()) == 0:
                in_section = False
            bits = line.split(':', 1)
            if len(bits) >= 1 and bits[0].startswith('Patches_'):
                seen_sections[bits[0]] = True
                in_section = True
            if in_section and line[0] != ' ' and line[0].islower() and len(bits) > 1:
                (series, package) = bits[0].split('_')
                line_idx = None
                try:
                    line_idx = all_releases.index(series)
                except ValueError:
                    pass

                # Firstly check for DNE entries being upgraded to live entries.

                # If devel is the _current_ devel then we can just leave things as they are
                # otherwise convert it.
                if series == 'devel': # and all_releases[previous_idx+1] != devel_release:
                    # Convert devel to its meaning at the time.
                    search_idx = previous_idx + 1
                    while True:
                        add = all_releases[search_idx]
                        if '/' not in add:
                            break
                        search_idx += 1
                    if not retired and add == devel_release:
                        print(line, end='', file=rfd)
                    else:
                        for new in all_releases[previous_idx+1:]:
                            if new == add:
                                if bits[1].strip() == 'DNE' and new in boilerplate_entry and boilerplate_entry[new].strip() != 'DNE':
                                    ##print("IS DNE, new entry: ", boilerplate_entry[bits[0]])
                                    line = new + ': ' + boilerplate_entry[new] + '\n'
                                print(add + line[5:], end='', file=rfd)
                                continue
                            if not retired and new == devel_release:
                                new = 'devel'
                            new = new + '_' + package
                            if new in boilerplate_entry:
                                if boilerplate_entry[new].strip() != 'DNE':
                                    print(new + ': ' + boilerplate_entry[new], file=rfd)
                    line_idx = None
                    continue

                if bits[1].strip() == 'DNE' and bits[0] in boilerplate_entry and boilerplate_entry[bits[0]].strip() != 'DNE':
                    ##print("IS DNE, new entry: ", boilerplate_entry[bits[0]])
                    line = bits[0] + ': ' + boilerplate_entry[bits[0]] + '\n'

            ##print(previous_idx, line_idx, line, end='')
            print(line, end='', file=rfd)
            previous_idx = line_idx

        # Add and completly missing packages.
        for section in boilerplate_order:
            if section not in seen_sections:
                print('\n' + section + ':\n' + ''.join(boilerplate_sections[section]), end='', file=rfd)

    # Finally install it.
    os.rename(cve + '.new', cve) 
