#!/usr/bin/env python3
#

from os                                 import getenv
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import error, basicConfig, INFO, DEBUG
from ubuntu                             import Ubuntu

import datetime
import sqlite3
import json

# BugStats
#
class BugStats():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args

        try:
            s.db = sqlite3.connect('bugs.db')
        except Exception as e:
            s.db.close()
            raise e

    # main
    #
    def main(s):
        retval = 1

        status = [
            "New",
            "Incomplete",
            "Opinion",
            "Invalid",
            "Won\'t Fix",
            "Expired",
            "Confirmed",
            "Triaged",
            "In Progress",
            "Fix Committed",
            "Fix Released",
            "Incomplete (with response)",
            "Incomplete (without response)",
        ]

        try:

            data = {}
            ibsn = list(Ubuntu.index_by_series_name.keys())
            # ibsn.append('invalid')
            # ibsn.append('unknown')
            for source in ['linux']:
                data[source] = {}
                for series in ibsn:
                    data[source][series] = {}
                    c = s.db.cursor()
                    c.execute('SELECT * from bugs WHERE series="%s" AND project="%s"' % (series, source))
                    all_rows = c.fetchall()
                    data[source][series]['total'] = len(all_rows)
                    for condition in status:
                        c = s.db.cursor()
                        c.execute('SELECT * from bugs WHERE series="%s" AND project="%s" AND status="%s"' % (series, source, condition))
                        all_rows = c.fetchall()
                        data[source][series][condition] = len(all_rows)
            # print(json.dumps(data, sort_keys=True, indent=4))

            # timestamp = int(datetime.datetime.utcnow().seconds() * 1000.0)
            timestamp = datetime.datetime.utcnow().timestamp()
            for source in sorted(data):
                for series in sorted(data[source]):
                    for status in sorted(data[source][series]):
                        print('kernel_bugs_v1{source="%s",series="%s",status="%s"} %d %d' % (source, series, status, data[source][series][status], timestamp))

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        if retval > 0:
            error("")
            error("Due to the above error(s), this script is unable to continue and is terminating.")
            error("")

        s.db.close()
        return retval


if __name__ == '__main__':
    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(levelname)s - %(message)s")

    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    args = parser.parse_args()

    app = BugStats(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:
