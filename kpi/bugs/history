#!/usr/bin/env python3
#

import sys
import os
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '..', '..', 'py3')))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '..', '..', 'py2')))

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO, DEBUG
from ktl.kernel_series                  import KernelSeries
from lib.shell                          import sh

from datetime                           import date, datetime, timedelta
import sqlite3
import json

def datespan(startDate, endDate, delta=timedelta(days=1)):
    currentDate = startDate
    while currentDate < endDate:
        yield currentDate
        currentDate += delta

# History
#
class History(object):
    def __init__(s, args):
        s.args = args

        try:
            s.db = sqlite3.connect('bugs.db', detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES)
        except Exception as e:
            s.db.close()
            raise e

        s.status = [
            "New",
            "Incomplete",
            "Opinion",
            "Invalid",
            "Won\'t Fix",
            "Expired",
            "Confirmed",
            "Triaged",
            "In Progress",
            "Fix Committed",
            "Fix Released",
            "Incomplete (with response)",
            "Incomplete (without response)",
        ]

    def date_to_influx_ts(s, date):
        epoch = datetime.utcfromtimestamp(0)
        timestamp = int((datetime(date.year, date.month, date.day) - epoch).total_seconds() * 1000000000.0)
        return timestamp

    def influx(s, data, date):
        timestamp = s.date_to_influx_ts(date)

        with open('/tmp/influx.xfer', 'w') as f:
            for source in sorted(data):
                for series in sorted(data[source]):
                    buf = 'kernel_bugs_by_series_by_package_by_status,series=%s,package=%s ' % (series, source)
                    stats = []
                    for status in sorted(data[source][series]):
                        index = status.replace(' ', '_').replace('(', '').replace(')', '').replace('\'', '')
                        stats.append('%s=%d' % (index, data[source][series][status]))
                    buf += '%s %d' % (','.join(stats), timestamp)
                    f.write(buf)
                    f.write('\n')

        cmd = "curl -i -XPOST 'http://influxdb.cloud.kpi.internal:8086/write?db=kernel' --data-binary '@/tmp/influx.xfer' --netrc-file $HOME/.influx-kernel.auth"
        o, r = sh(cmd)

    # main
    #
    def main(s):
        retval = 1

        kernel_series = KernelSeries()
        ibsn = [ series.codename for series in kernel_series.series ]
        for day in datespan(date(2012, 1, 1), date(2013, 1, 1)):
            d = day.strftime("%Y-%m-%d")

            data = {}
            for source in ['linux']:
                data[source] = {}
                for series in ibsn:
                    data[source][series] = {}
                    c = s.db.cursor()
                    c.execute('SELECT * from bugs WHERE series="%s" AND project="%s" AND created < \'%s\'' % (series, source, d))
                    all_rows = c.fetchall()
                    data[source][series]['total'] = len(all_rows)
                    for condition in s.status:
                        c = s.db.cursor()
                        c.execute('SELECT * from bugs WHERE series="%s" AND project="%s" AND status="%s" AND created < \'%s\'' % (series, source, condition, d))
                        all_rows = c.fetchall()
                        data[source][series][condition] = len(all_rows)
            # print(json.dumps(data, sort_keys=True, indent=4))
            s.influx(data, day)

        return retval

if __name__ == '__main__':
    if os.getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(levelname)s - %(message)s")

    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    args = parser.parse_args()

    app = History(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:
