#!/bin/bash
CDIR="`dirname $0`"
. "${CDIR}/chroot-defs.conf"
#==============================================================================
# This script is intended to automatically set up a schroot environment ready
# to compile the kernel.
# The arguments are the same as for the debootstrap command. The entry for
# the schroot configuration will be automatically appended (if it does not
# exist) and the remaining packages will get installed.
#==============================================================================
RC=0
USER="$SUDO_USER"
DEBOOTSTRAP=debootstrap
SBUILD_GRP=sbuild
HOSTARCH=$(dpkg --print-architecture)

if [ "$USER" = "" ]; then
	echo "ERROR: You must run this command under sudo!" >&2
	RC=1
fi
if [ $(id -u) -ne 0 ]; then
	echo "ERROR: You must be root to run this command!" >&2
	RC=1
fi
for i in $DEBOOTSTRAP schroot; do
	if [ "$(type -p $i)" = "" ]; then
		echo "ERROR: $i is required!" >&2
		RC=1
	fi
done

if [ $RC -ne 0 ]; then
	exit $RC
fi

#------------------------------------------------------------------------------
# Command line evaluation
#------------------------------------------------------------------------------
OPTIONS=""
SUITE=""
TARGET=""
MIRROR=""
CL_MIRROR=""

while [ $# -ne 0 ]; do
	case $1 in
		--arch=*)
			ARCH=$(echo $1|cut -d= -f2)
			OPTIONS="$OPTIONS $1"
			case $HOSTARCH in
				# Only i386 is supported as non-host target
				amd64)
					case $ARCH in
						amd64|i386)
							;;
						*)
							echo $ARCH is not supported on $HOSTARCH
							exit 1
							;;
					esac
				;;
				# only armel is supported on armhf
				armhf)
					case $ARCH in
						armhf|armel)
							;;
						*)
							echo $ARCH is not supported on $HOSTARCH
							exit 1
							;;
					esac
				;;
				*)
					if [ ! "$HOSTARCH" = "$ARCH" ]
					then
						echo "There is no qemu support on $HOSTARCH"
						echo "$HOSTARCH must equal --arch $ARCH option"
						exit 1
					fi
				;;
			esac
			;;
		-*|--*)
			OPTIONS="$OPTIONS $1"
			;;
		*)
			if [ "$SUITE" = "" ]; then
				SUITE="$1"
			elif [ "$TARGET" = "" ]; then
				TARGET="$1"
				if [ "$(dirname $TARGET)" = "." ]; then
					TARGET="$(pwd)/$TARGET"
				fi
			elif [ "$MIRROR" = "" ]; then
				MIRROR="$1"
				CL_MIRROR="$MIRROR"
			else
				echo "Too many arguments <$1>!" >&2
				exit 1
			fi
			;;
	esac
	shift
done

if [ "$SUITE" = "" -o "$TARGET" = "" ]; then
	echo "$(basename $0) <suite> <target> [mirror]"
	exit 1
fi

#------------------------------------------------------------------------------
# Make a list of package we additionally need (depending on suite).
#------------------------------------------------------------------------------
ADDPKG="vim fakeroot git-core kernel-wedge build-essential ccache devscripts"
ADDPKG="$ADDPKG xmlto docbook-utils transfig sharutils"
ADDPKG="$ADDPKG docbook-utils gawk m4 bash-completion bc lzop"
ADDPKGDEP=
case $SUITE in
	dapper)
		ADDPKG="$ADDPKG kernel-package linux32";
		ADDPKGDEP="$ADDPKGDEP kernel-package";
		;;
	hardy)
		ADDPKGDEP="$ADDPKGDEP linux";
		;;
	jaunty)
		ADDPKG="$ADDPKG makedumpfile"
		ADDPKGDEP="$ADDPKGDEP linux";
		;;
	karmic)
		ADDPKG="$ADDPKG makedumpfile"
		ADDPKGDEP="$ADDPKGDEP linux";
		;;
	lucid)
		ADDPKG="$ADDPKG makedumpfile libelf-dev binutils-dev uboot-mkimage asciidoc gs"
		ADDPKGDEP="$ADDPKGDEP linux";
		;;
	maverick)
		ADDPKG="$ADDPKG makedumpfile libdw-dev binutils-dev asciidoc uboot-mkimage"
		ADDPKGDEP="$ADDPKGDEP linux xorg-server";
		case ${ARCH} in
			i386|amd64)
				ADDPKG="$ADDPKG gcc-arm-linux-gnueabi g++-arm-linux-gnueabi";
			;;
		esac
		;;
	natty|oneiric|precise|quantal|android|raring|saucy|trusty|utopic|vivid)
		ADDPKG="$ADDPKG makedumpfile libdw-dev binutils-dev asciidoc ncurses-dev u-boot-tools libnewt-dev"
		ADDPKGDEP="$ADDPKGDEP linux xorg-server";
		case ${ARCH} in
			i386|amd64)
				ADDPKG="$ADDPKG gcc-arm-linux-gnueabi g++-arm-linux-gnueabi";
			;;
		esac
		;;
	*)
		if [ "$SUITE" != "" ]; then
			echo "Unknown suite <$SUITE>!" >&2
			exit 1
		fi
		;;
esac

case $SUITE in
	precise|quantal|android|raring|saucy|trusty|utopic|vivid)
	case ${ARCH} in
		i386|amd64)
			ADDPKG="$ADDPKG gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf";
		;;
	esac
	;;
	*)
		;;
esac

case $SUITE in
	saucy|trusty|utopic|vivid)
	case ${ARCH} in
		i386|amd64)
			ADDPKG="$ADDPKG gcc-powerpc-linux-gnu g++-powerpc-linux-gnu";
		;;
	esac
	;;
	*)
		;;
esac

case $SUITE in
	precise)
		ADDPKG="$ADDPKG linux-source linux-headers-generic linux-headers-server linux-headers-virtual linux-headers-lowlatency linux-headers-generic-lts-quantal libpci-dev libaudit-dev python-dev";
		case ${ARCH} in
			i386)
				ADDPKG="$ADDPKG linux-headers-generic-pae linux-headers-lowlatency-pae";
			;;
		esac
	;;
	quantal)
		ADDPKG="$ADDPKG flex bison";
	;;
	raring|saucy|trusty|utopic|vivid)
		ADDPKG="$ADDPKG flex bison libunwind8-dev libaudit-dev python-dev libpci-dev";
	;;
	android)
		ADDPKG="$ADDPKG sudo ssh apt-transport-https devscripts gcc-4.4 gcc-4.4-multilib g++-4.4"
		ADDPKG="$ADDPKG g++-4.4-multilib bison xsltproc flex gperf lib32ncurses5-dev git curl lsb-release vim zip"
		ADDPKG="$ADDPKG git-core gnupg flex bison gperf build-essential"
		ADDPKG="$ADDPKG zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev"
		ADDPKG="$ADDPKG libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386"
		ADDPKG="$ADDPKG libgl1-mesa-dev g++-multilib mingw32 openjdk-6-jdk tofrodos"
		ADDPKG="$ADDPKG python-markdown libxml2-utils xsltproc zlib1g-dev:i386"
		;;
	*)
		;;
esac

case $SUITE in
	saucy|trusty|utopic|vivid)
		# armhf binaries fail with gcc-4.8, 4.7 has issues on manta.
		ADDPKG="$ADDPKG gcc-4.6 gcc-4.7"
		case $ARCH in
			amd64|i386) ADDPKG="$ADDPKG gcc-4.7-arm-linux-gnueabihf"
			;;
		*)
			;;
		esac
		;;
	*)
		;;
esac

case $SUITE in
	trusty|utopic|vivid)
		ADDPKG="$ADDPKG libiberty-dev pkg-config dh-systemd"
		case $ARCH in
			amd64|i386) ADDPKG="$ADDPKG gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi gcc-arm-linux-androideabi gcc-powerpc-linux-gnu gcc-aarch64-linux-gnu gcc-powerpc64le-linux-gnu"
			;;
		esac
		;;
esac

case $SUITE in
	android) _SUITE=precise
		;;
	*) _SUITE=$SUITE
		;;
	esac
	
if [ "$ARCH" = "" ]; then
	NAME="$SUITE"
else
	NAME="$SUITE-$ARCH"
fi

CFGFILE="/etc/schroot/chroot.d/$NAME"
CFGEXISTS=false
if [ -f $CFGFILE ]; then
	echo "WARNING: $CFGFILE already exists" >&2
	CFGEXISTS=true
fi

DOINSTALL=true
if [ ! -d "$TARGET" ]; then
	mkdir "$TARGET"
	if [ $? -ne 0 ]; then
		echo "Failed to create <$TARGET>!" >&2
		exit 1
	fi
else
	if $CFGEXISTS; then
		echo "WARNING: Target directory exists as well. " \
		     "Skipping installation" >&2
		DOINSTALL=false
	fi
fi

if $DOINSTALL; then
	#
	# Make sure sessions are simply ended.
	#
	DEF_SCHROOT=/etc/default/schroot
	SR="SESSIONS_RECOVER"
	if egrep "${SR}" ${DEF_SCHROOT} > /dev/null ; then
		sed -i 's/^.*'${SR}'.*$/'${SR}'="end"/' ${DEF_SCHROOT}
	fi
	#
	# Look for a local mirror.
	#
	if [ "$CL_MIRROR" = "" ]
	then
		get_suite_mirror ${_SUITE}
	fi

	#
	# Weirdly debootstrap seems to be confused if the current working
	# directory is the place where the target direcory gets created.
	# At least on Hardy it will bail out claiming the current working
	# directory does not exist. Circumvent that by stepping aside.
	#
	if [ "$(pwd)" = "$(dirname $TARGET)" ]; then
		cd /tmp
	fi
	echo $DEBOOTSTRAP $OPTIONS $_SUITE "$TARGET" $MIRROR
	$DEBOOTSTRAP $OPTIONS $_SUITE "$TARGET" $MIRROR || exit 1
fi

function UpdateConfig()
{
	echo "INFO: Updating configuration file..." >&2
	USER=$SUDO_USER
	cat <<-EOD >>$CFGFILE

	[$NAME]
	description=Ubuntu $SUITE ($ARCH)
	type=directory
	directory=$TARGET
	groups=${SBUILD_GRP}
	#run-setup-scripts=true
	EOD
	case $ARCH in
		i386|lpia)
			case $HOSTARCH in
				amd64)
					echo "personality=linux32" >>$CFGFILE
					;;
			esac
			;;
	esac
}
if ! $CFGEXISTS; then
	if ! grep ${SBUILD_GRP} /etc/group ; then
		addgroup ${SBUILD_GRP}
	fi
	UpdateConfig
fi

SCHROOTCMD="schroot -q --directory=/ --chroot=$NAME"

if [ "$CL_MIRROR" = "" ]
then
	write_mirror ${_SUITE} ${ARCH} $TARGET/etc/apt/sources.list
else
	write_local_mirror ${_SUITE} ${ARCH} $TARGET/etc/apt/sources.list ${CL_MIRROR}
fi

# If the user supplied an http_proxy when building this chroot, copy that
# configuration over into the apt configuration for the chroot.
if [ "$http_proxy" != '' ]
then
	echo "Acquire::http { Proxy \"$http_proxy\"; };" \
		>$TARGET/etc/apt/apt.conf.d/01proxy-from-http_proxy
fi

${SCHROOTCMD} -- dpkg --configure -a
${SCHROOTCMD} -- apt-get -y --force-yes update
${SCHROOTCMD} -- apt-get -u -y --force-yes dist-upgrade
${SCHROOTCMD} -- apt-get -u -y --force-yes autoremove

if $DOINSTALL; then
	#
	# Add some extra packages
	#
	echo SET debconf/frontend Noninteractive | ${SCHROOTCMD} -- /usr/bin/debconf-communicate debconf
	case $SUITE in
		android)
			# https://wiki.canonical.com/PES/Engineering/Premium/UDS-R/Android/BuildingAOSP
			echo Installing android Java packages
			if [ -d /var/local/oab ]
			then
				cp -v /var/local/oab/*.deb $TARGET/root
				JF=
				for i in /var/local/oab/*.deb; do
					JF="$JF /root/`basename $i`"
				done
				${SCHROOTCMD} -- dpkg -i $JF
				${SCHROOTCMD} -- apt-get -f -y --force-yes install
				${SCHROOTCMD} -- apt-get install sun-java6-jdk
			else
				${SCHROOTCMD} -- apt-get -y --force-yes install wget
				${SCHROOTCMD} -- wget --no-check-certificate https://github.com/flexiondotorg/oab-java6/raw/master/oab-java.sh -O /root/oab-java6.sh
				${SCHROOTCMD} -- chmod +x /root/oab-java6.sh
				${SCHROOTCMD} -- bash /root/oab-java6.sh
				${SCHROOTCMD} -- apt-get -y --force-yes install sun-java6-jdk
			fi
			;;
		*)
			;;
	esac
fi

PKGLIST=/tmp/$$.pkglist
${SCHROOTCMD} -- dpkg -l > $PKGLIST

echo ADDPKG=${ADDPKG}
pkg_found="/tmp/$$.pkg_found"
for i in ${ADDPKG}
do
	rm -f $pkg_found
	cat $PKGLIST | egrep "^ii  " | while read ii pkg junk
	do
		if [ "$i" = "$pkg" ]
		then
			echo "$i" > $pkg_found
		fi
	done
	if [ ! -f $pkg_found ]
	then
		echo Installing $i
		${SCHROOTCMD} -- apt-get -y --force-yes install $i
	fi
done
rm -f $pkg_found
rm -f $PKGLIST
echo PKGLIST $PKGLIST
echo ADDPKGDEP=${ADDPKGDEP}
${SCHROOTCMD} -- apt-get -y --force-yes build-dep --only-source $ADDPKGDEP
