#!/bin/bash
CDIR="`dirname $0`"
. "${CDIR}/chroot-defs.conf"
#==============================================================================
# This script is intended to automatically set up a schroot environment ready
# to compile the kernel.
# The arguments are the same as for the debootstrap command. The entry for
# the schroot configuration will be automatically appended (if it does not
# exist) and the remaining packages will get installed.
#==============================================================================
RC=0
USER="$SUDO_USER"
DEBOOTSTRAP=debootstrap
SBUILD_GRP=sbuild
HOSTARCH=$(dpkg --print-architecture)

if [ "$USER" = "" ]; then
	echo "ERROR: You must run this command under sudo!" >&2
	RC=1
fi
if [ $(id -u) -ne 0 ]; then
	echo "ERROR: You must be root to run this command!" >&2
	RC=1
fi
for i in $DEBOOTSTRAP schroot; do
	if [ "$(type -p $i)" = "" ]; then
		echo "ERROR: $i is required!" >&2
		RC=1
	fi
done

if [ $RC -ne 0 ]; then
	exit $RC
fi

#------------------------------------------------------------------------------
# Command line evaluation
#------------------------------------------------------------------------------
OPTIONS=""
SUITE=""
TARGET=""
MIRROR=""
CL_MIRROR=""
EMULATOR=""

while [ $# -ne 0 ]; do
	case $1 in
		--arch=*)
			ARCH=$(echo $1|cut -d= -f2)
			OPTIONS="$OPTIONS $1"
			case $HOSTARCH in
				# Only i386 is supported as non-host target
				amd64)
					case $ARCH in
						armhf)
							EMULATOR="/usr/bin/qemu-arm*-static"
							;;
						amd64|i386)
							;;
						*)
							echo $ARCH is not supported on $HOSTARCH
							exit 1
							;;
					esac
				;;
				# only armel is supported on armhf
				armhf)
					case $ARCH in
						armhf|armel)
							;;
						*)
							echo $ARCH is not supported on $HOSTARCH
							exit 1
							;;
					esac
				;;
				*)
					if [ ! "$HOSTARCH" = "$ARCH" ]
					then
						echo "There is no qemu support on $HOSTARCH"
						echo "$HOSTARCH must equal --arch $ARCH option"
						exit 1
					fi
				;;
			esac
			;;
		-*|--*)
			OPTIONS="$OPTIONS $1"
			;;
		*)
			if [ "$SUITE" = "" ]; then
				SUITE="$1"
			elif [ "$TARGET" = "" ]; then
				TARGET="$1"
				if [ "$(dirname $TARGET)" = "." ]; then
					TARGET="$(pwd)/$TARGET"
				fi
			elif [ "$MIRROR" = "" ]; then
				MIRROR="$1"
				CL_MIRROR="$MIRROR"
			else
				echo "Too many arguments <$1>!" >&2
				exit 1
			fi
			;;
	esac
	shift
done

if [ "$SUITE" = "" -o "$TARGET" = "" ]; then
	echo "$(basename $0) <suite> <target> [mirror]"
	exit 1
fi

#------------------------------------------------------------------------------
# Make a list of package we additionally need (depending on suite).
#------------------------------------------------------------------------------
ADDPKG="fakeroot vim git-core devscripts lzop u-boot-utils snapcraft patchutils"
get_build_dep "${SUITE}"
echo "Build dep: $BUILD_DEP"
ADDPKGDEP=${BUILD_DEP}

get_build_arches "${SUITE}"
echo "Build architectures: $BUILD_ARCHES"
while read arch pkgs
do
	[ ${ARCH} != "amd64" ] && continue
	case " $BUILD_ARCHES " in 
	*\ $arch\ *)	ADDPKG="$ADDPKG $pkgs"
			echo "Cross Compilers: $pkgs"
			;;
	esac
done <<EOL
i386		gcc-i686-linux-gnu g++-i686-linux-gnu libc6-dev-i386-cross
armel		gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libc6-dev-armel-cross
armhf		gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
powerpc		gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-dev-powerpc-cross
arm64		gcc-aarch64-linux-gnu libc6-dev-arm64-cross
ppc64el		gcc-powerpc64le-linux-gnu libc6-dev-ppc64el-cross
s390x		gcc-s390x-linux-gnu libc6-dev-s390x-cross
EOL

case $SUITE in
precise)
	ADDPKG="$ADDPKG linux-source linux-headers-generic linux-headers-server linux-headers-virtual linux-headers-lowlatency";
	case ${ARCH} in
	i386)
		ADDPKG="$ADDPKG linux-headers-generic-pae linux-headers-lowlatency-pae";
		;;
	esac
	;;
esac

# armhf binaries fail with gcc-4.8, 4.7 has issues on manta.
case $ARCH in
armhf)
	case $SUITE in
	trusty) ADDPKG="$ADDPKG gcc-4.6" ;;
	esac
	case $SUITE in
	trusty|utopic|vivid|xenial|yakkety|zesty)
		ADDPKG="$ADDPKG gcc-4.7"
		;;
	esac
	;;
amd64)
	case $SUITE in
	trusty|utopic|vivid|xenial|yakkety|zesty)
		ADDPKG="$ADDPKG gcc-4.7-arm-linux-gnueabihf"
		;;
	esac
	;;
esac

case $SUITE in
*)	_SUITE=$SUITE ;;
esac

if [ "$ARCH" = "" ]; then
	NAME="$SUITE"
else
	NAME="$SUITE-$ARCH"
fi

CFGFILE="/etc/schroot/chroot.d/$NAME"
CFGEXISTS=false
if [ -f $CFGFILE ]; then
	echo "WARNING: $CFGFILE already exists" >&2
	CFGEXISTS=true
fi

DOINSTALL=true
if [ ! -d "$TARGET" ]; then
	mkdir "$TARGET"
	if [ $? -ne 0 ]; then
		echo "Failed to create <$TARGET>!" >&2
		exit 1
	fi
	if [ "$EMULATOR" != "" ]; then
		mkdir -p "$TARGET/usr/bin"
		cp $EMULATOR "$TARGET/usr/bin/"
	fi
else
	if $CFGEXISTS; then
		echo "WARNING: Target directory exists as well. " \
		     "Skipping installation" >&2
		DOINSTALL=false
	fi
fi

if $DOINSTALL; then
	#
	# Make sure sessions are simply ended.
	#
	DEF_SCHROOT=/etc/default/schroot
	SR="SESSIONS_RECOVER"
	if egrep "${SR}" ${DEF_SCHROOT} > /dev/null ; then
		sed -i 's/^.*'${SR}'.*$/'${SR}'="end"/' ${DEF_SCHROOT}
	fi
	#
	# Look for a local mirror.
	#
	if [ "$CL_MIRROR" = "" ]
	then
		get_suite_mirror ${_SUITE}
	fi

	#
	# Weirdly debootstrap seems to be confused if the current working
	# directory is the place where the target direcory gets created.
	# At least on Hardy it will bail out claiming the current working
	# directory does not exist. Circumvent that by stepping aside.
	#
	if [ "$(pwd)" = "$(dirname $TARGET)" ]; then
		cd /tmp
	fi
	echo $DEBOOTSTRAP $OPTIONS $_SUITE "$TARGET" $MIRROR
	$DEBOOTSTRAP $OPTIONS $_SUITE "$TARGET" $MIRROR || exit 1
fi

function UpdateConfig()
{
	echo "INFO: Updating configuration file..." >&2
	USER=$SUDO_USER
	cat <<-EOD >>$CFGFILE

	[$NAME]
	description=Ubuntu $SUITE ($ARCH)
	type=directory
	directory=$TARGET
	groups=${SBUILD_GRP}
	#run-setup-scripts=true
	EOD
	case $ARCH in
		i386|lpia)
			case $HOSTARCH in
				amd64)
					echo "personality=linux32" >>$CFGFILE
					;;
			esac
			;;
	esac
}
if ! $CFGEXISTS; then
	if ! grep ${SBUILD_GRP} /etc/group ; then
		addgroup ${SBUILD_GRP}
	fi
	UpdateConfig
fi

SCHROOTCMD="schroot -q --directory=/ --chroot=$NAME"

if [ "$CL_MIRROR" = "" ]
then
	write_mirror ${_SUITE} ${ARCH} $TARGET/etc/apt/sources.list
else
	write_local_mirror ${_SUITE} ${ARCH} $TARGET/etc/apt/sources.list ${CL_MIRROR}
fi

# If the user supplied an http_proxy when building this chroot, copy that
# configuration over into the apt configuration for the chroot.
if [ "$http_proxy" != '' ]
then
	echo "Acquire::http { Proxy \"$http_proxy\"; };" \
		>$TARGET/etc/apt/apt.conf.d/01proxy-from-http_proxy
fi

# Ensure we have the extention PPA key and configuration.
cat - >"$TARGET/ppa-key" <<EOL
-----BEGIN PGP PUBLIC KEY BLOCK-----

mI0ETPbc7gEEANZKYrN9oZwXU/sMVa1If6VO9TyqSuF533/LAyLM5VjGTtS5ugzE
UqxGAuIhRIRIVzg/Vwe4LN/5ThO1yZxiLzicrd/5b2DtkAYUPede7J38k4sVICFm
be40s+tA55GIN47ncQ2biNWM64Y5po0U5tOEkbiqkPiF1XBWmNYP1iWlABEBAAG0
J0xhdW5jaHBhZCBQUEEgZm9yIENhbm9uaWNhbCBLZXJuZWwgVGVhbYi4BBMBAgAi
BQJM9tzuAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAIVvGXuJKs6qqo
A/9RlzQ14WjaBzm0r4O22SnRIeZmmZ8edVQ6yOdAU56xC20c/yuiJPu0kRUN/VRg
P7MfD3k001Zst1qAVde+SxNI77gQSJm8mH6YdbRqnlfelEU+CbQZ9RK0MSg0pmL4
zqMoZIib+Ez5dMpJhMfBVC7XMxPn6jEzqWR4qpS549wUUA==
=RJWU
-----END PGP PUBLIC KEY BLOCK-----
EOL
${SCHROOTCMD} -- apt-key add /ppa-key
rm -f "$TARGET/ppa-key"

cat - <<EOC >$TARGET/etc/apt/sources.list.d/canonical-kernel-team-ubuntu-builder-extra-$SUITE.list
deb http://ppa.launchpad.net/canonical-kernel-team/builder-extra/ubuntu $SUITE main
EOC

${SCHROOTCMD} -- dpkg --configure -a
${SCHROOTCMD} -- apt-get -y --force-yes update
${SCHROOTCMD} -- apt-get -u -y --force-yes dist-upgrade
${SCHROOTCMD} -- apt-get -u -y --force-yes autoremove

if $DOINSTALL; then
	#
	# Add some extra packages
	#
	echo SET debconf/frontend Noninteractive | ${SCHROOTCMD} -- /usr/bin/debconf-communicate debconf
fi

# Install build-essentials ...
${SCHROOTCMD} -- apt-get -y --force-yes --no-install-recommends install build-essential

# ... and then the build-dependencies of the packages we wish to build.
echo ADDPKGDEP=${ADDPKGDEP}
${SCHROOTCMD} -- apt-get -y --force-yes build-dep --only-source ${ADDPKGDEP}

# Finally add any addhoc packages such as cross compilers.
echo ADDPKG=${ADDPKG}
for i in ${ADDPKG}
do
	installed=$( ${SCHROOTCMD} -- dpkg -l $i | grep '^ii' | wc -l )
	if [ "$installed" -eq 0 ]; then
		echo Installing $i
		${SCHROOTCMD} -- apt-get -y --force-yes --no-install-recommends install $i
	fi
done
