
export MAIN_ARCHIVE=http://archive.ubuntu.com/ubuntu
export SRC_ARCHIVE=http://archive.ubuntu.com/ubuntu

export ARCHIVE_PORTS=http://ports.ubuntu.com/ubuntu-ports
export SRC_ARCHIVE_PORTS=http://ports.ubuntu.com/ubuntu-ports

export DEF_DIR=usr3
export CH_ROOT=/${DEF_DIR}/chroots

releases=([0]=dapper [1]=hardy [2]=karmic [3]=lucid [4]=maverick [5]=natty [6]=oneiric [7]=precise [8]=quantal [9]=android [10]=raring [11]=saucy [12]=trusty [13]=utopic [14]=vivid [15]=wily [16]=xenial [17]=yakkety [18]=zesty [19]=artful)
expired_releases=([0]=dapper [1]=karmic [2]=maverick [3]=natty [4]=hardy [5]=oneiric [6]=raring [7]=android [8]=quantal [9]=saucy [10]=lucid [11]=utopic [12]=wily [13]=yakkety [14]=vivid)

arches[0]="i386 amd64"
arches[1]="i386 amd64 lpia"
arches[2]="i386 amd64 lpia"
arches[3]="i386 amd64 armel"
arches[4]="i386 amd64 armel"
arches[5]="i386 amd64 armel"
arches[6]="i386 amd64 armel"
arches[7]="i386 amd64 armel armhf"
arches[8]="i386 amd64 armhf armel"
arches[9]="amd64"
arches[10]="amd64 i386 armhf"
arches[11]="amd64 i386 armhf"
arches[12]="amd64 i386 armhf"
arches[13]="amd64 i386 armhf"
arches[14]="amd64 i386 armhf"
arches[15]="amd64 i386 armhf"
arches[16]="amd64 i386 armhf"
arches[17]="amd64 i386 armhf"
arches[18]="amd64 i386 armhf"
arches[19]="amd64 i386 armhf"

pockets[0]="release security"
pockets[1]="release security"
pockets[2]="release security"
pockets[3]="release security"
pockets[4]="release security"
pockets[5]="release security"
pockets[6]="release security"
pockets[7]="release security"
pockets[8]="release security"
pockets[9]="release security"
pockets[10]="release security"
pockets[11]="release security"
pockets[12]="release security"
pockets[13]="release security"
pockets[14]="release security"
pockets[15]="release security"
pockets[16]="release security"
pockets[17]="release security"
pockets[18]="release security"
pockets[19]="release security"

build_dep[0]="linux-source-2.6.15"
build_dep[1]="linux"
build_dep[2]="linux"
build_dep[3]="linux"
build_dep[4]="linux"
build_dep[5]="linux"
build_dep[6]="linux"
build_dep[7]="linux"
build_dep[8]="linux"
build_dep[9]="linux"
build_dep[10]="linux"
build_dep[11]="linux"
build_dep[12]="linux"
build_dep[13]="linux"
build_dep[14]="linux"
build_dep[15]="linux"
build_dep[16]="linux"
build_dep[17]="linux"
build_dep[18]="linux"
build_dep[19]="linux"

# Use as an index into mirror[] and mirror_ports[]
mirror_sites[3]="^deb .*ports\.ubuntu\.com"
mirror_sites[2]="^deb .*archive\.redvoodoo\.org"
mirror_sites[1]="^deb .*mirror\.rtg\.local"
mirror_sites[0]="^deb .*archive\.ubuntu\.com"

# The release and security mirrors
mirror_release[2]="http://archive.redvoodoo.org/ubuntu"
mirror_updates[2]="http://archive.redvoodoo.org/ubuntu"
mirror_security[2]="http://security.redvoodoo.org/ubuntu"
mirror_ports_release[2]="http://ports.redvoodoo.org/ubuntu-ports"
mirror_ports_updates[2]="http://ports.redvoodoo.org/ubuntu-ports"
mirror_ports_security[2]="http://ports.redvoodoo.org/ubuntu-ports"

mirror_release[1]="http://mirror.rtg.local/ubuntu"
mirror_updates[1]="http://mirror.rtg.local/ubuntu"
mirror_security[1]="http://mirror.rtg.local/ubuntu"
mirror_ports_release[1]="http://mirror.rtg.local/ubuntu-ports"
mirror_ports_updates[1]="http://mirror.rtg.local/ubuntu-ports"
mirror_ports_security[1]="http://mirror.rtg.local/ubuntu-ports"

mirror_release[0]="http://us.archive.ubuntu.com/ubuntu"
mirror_updates[0]="http://us.archive.ubuntu.com/ubuntu"
mirror_security[0]="http://security.ubuntu.com/ubuntu"
mirror_ports_release[0]="http://us.ports.ubuntu.com/ubuntu-ports"
mirror_ports_updates[0]="http://us.ports.ubuntu.com/ubuntu-ports"
mirror_ports_security[0]="http://us.ports.ubuntu.com/ubuntu-ports"


#
# Check if the release is expired.
#
function not_expired_release ()
{
local i
local RELEASE=$1
es=0
for i in "${expired_releases[@]}"
do
	if [ "$i" = "${RELEASE}" ]
	then
		es=1
	fi
done
return $es
}

#
# Check that the release/arch pair exists in the releases[]/arches[] arrays.
#
function check_release_arch ()
{
local RELEASE=$1
local ARCH=$2
es=1
let index=0
for i in "${releases[@]}"
do
	if [ "$i" = "${RELEASE}" ]
	then
		for j in ${arches[${index}]}
		do
			if [ "$j" = "${ARCH}" ]
			then
				RELEASE_ARCH="${i}-${j}"
				es=0
			fi
		done
	fi
	let index=${index}+1
done

if [ "${es}" = "1" ]
then
	echo No record matches this release \(${RELEASE}\) and arch \(${ARCH}\)
fi

return $es

}

function get_pockets ()
{
local RELEASE=$1

let index=0
es=1
for i in "${releases[@]}"
do
        if [ "$i" = "${RELEASE}" ]
        then
		export POCKETS="${pockets[${index}]}"
		es=0
		break
        fi
        let index=${index}+1
done
return $es
}

function valid_mirror_pocket ()
{
local SUITE=$1
local ARCH=$2
local INDEX=$3

#
# Make sure the mirror pocket exists. Otherwise, fall back to the
# Ubuntu archive.
#
if ports_arch ${ARCH}
then
	Contents=${mirror_ports_release[${INDEX}]}/dists/${SUITE}/main/binary-${ARCH}/Release
else
	Contents=${mirror_release[${INDEX}]}/dists/${SUITE}/main/binary-${ARCH}/Release
fi

if wget -q -O /dev/null ${Contents}
then
	es=0
else
	es=1
fi
return $es
}

#
# Return true if the input arch is considered a ports arch.
#
function ports_arch ()
{
local ARCH=$1
if [ "${ARCH}" = "armel" ] || [ "${ARCH}" = "armhf" ] || [ "${ARCH}" = "lpia" ]
then
	es=0
else
	es=1
fi
return $es
}

#
# Find a mirror by looking at the host's /etc/apt/sources.list
#
function write_mirror ()
{
local SUITE=$1
local ARCH=$2
local TARG=$3

ARCHIVES="main universe"
SOURCE_URL=http://archive.ubuntu.com/ubuntu
SL=/etc/apt/sources.list

if ! get_pockets ${SUITE} ; then
	echo write_mirror: Bogus release ${SUITE}
	exit 1
fi

let index=0
for i in "${mirror_sites[@]}"
do
	if egrep "$i" ${SL} > /dev/null
	then
		let index2=0
		echo > ${TARG}

		#
		# Make sure the mirror pocket exists. Otherwise, fall back to the
		# Ubuntu archive.
		#
		if ! valid_mirror_pocket ${SUITE} ${ARCH} ${index}
		then
			let index=0
		fi

		if ports_arch ${ARCH}
		then
			release_url="${mirror_ports_release[${index}]}"
			updates_url="${mirror_ports_updates[${index}]}"
			security_url="${mirror_ports_security[${index}]}"
		else
			release_url="${mirror_release[${index}]}"
			updates_url="${mirror_updates[${index}]}"
			security_url="${mirror_security[${index}]}"
		fi
		
		echo "deb ${release_url} ${SUITE} ${ARCHIVES}" >> ${TARG}
		echo "deb-src ${SOURCE_URL} ${SUITE} ${ARCHIVES}" >> ${TARG}
		
		if echo "$POCKETS" | grep -q updates
		then
			echo "deb ${updates_url} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
		fi
		
		if echo "$POCKETS" | grep -q security
		then
			echo "deb ${security_url} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
		fi
		
		if echo "$POCKETS" | grep -q proposed
		then
			echo "deb ${security_url} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
			echo "deb-src ${SOURCE_URL} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
		fi
		
		break;
	fi
        let index=${index}+1
done
}

function write_local_mirror ()
{
local SUITE=$1
local ARCH=$2
local TARG=$3
local MIRR=$4

ARCHIVES="main universe"
#SOURCE_URL=http://archive.ubuntu.com/ubuntu

if ! get_pockets ${SUITE} ; then
	echo write_mirror: Bogus release ${SUITE}
	exit 1
fi

release_url="${MIRR}"
updates_url="${MIRR}"
security_url="${MIRR}"
SOURCE_URL="${MIRR}"

echo >${TARG}

if echo "${POCKETS}" | grep release > /dev/null ; then
	echo "deb ${release_url} ${SUITE} ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE} ${ARCHIVES}" >> ${TARG}
fi
if echo "${POCKETS}" | grep updates > /dev/null ; then
	echo "deb ${updates_url} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE}-updates ${ARCHIVES}" >> ${TARG}
fi
if echo "${POCKETS}" | grep security > /dev/null ; then
	echo "deb ${security_url} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE}-security ${ARCHIVES}" >> ${TARG}
fi
if echo "${POCKETS}" | grep proposed > /dev/null ; then
	echo "deb ${security_url} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
	echo "deb-src ${SOURCE_URL} ${SUITE}-proposed ${ARCHIVES}" >> ${TARG}
fi
}

#
# Try to find the suite mirror by looking at the host.
#
function get_suite_mirror ()
{
local SUITE=$1

SL=/etc/apt/sources.list

if ! get_pockets ${SUITE} ; then
	echo get_suite_mirror: Bogus release ${SUITE}
	exit 1
fi

let index=0
for i in "${mirror_sites[@]}"
do
	if egrep "$i" ${SL} > /dev/null
	then
		let index2=0

		#
		# Make sure the mirror pocket exists. Otherwise, fall back to the
		# Ubuntu archive.
		#
		if ! valid_mirror_pocket ${SUITE} ${ARCH} ${index}
		then
			let index=0
		fi

		if ports_arch ${ARCH}
		then
			export MIRROR="${mirror_ports_release[${index}]}"
		else
			export MIRROR="${mirror_release[${index}]}"
		fi
		break;
	fi
        let index=${index}+1
done
}

