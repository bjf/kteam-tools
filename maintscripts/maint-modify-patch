#!/usr/bin/env python
#

from sys                                import argv, stdin
from os                                 import path, rename, unlink
from getopt                             import getopt, GetoptError
from tempfile                           import NamedTemporaryFile
from ktl.utils                          import stdo, error
from ktl.std_app                        import StdApp
from re                                 import compile

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo("    Usage:                                                                                   \n")
        stdo("        %s <options> <patch-files>                                                           \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("        --ack=<a-list>                                                                       \n")
        stdo("                         A comma separated list of irc nicknames which will be expanded      \n")
        stdo("                         to full email addresses and added as 'Acked-by:' lines to each      \n")
        stdo("                         patch specified on the command line.                                \n")
        stdo("                                                                                             \n")
        stdo("        --bugid=<lp-id-list>                                                                 \n")
        stdo("                         A comma separated list of Launchpad bug-ids which will be used      \n")
        stdo("                         to generate BugLink URLs to be added to each specirfied patch       \n")
        stdo("                         file.                                                               \n")
        stdo("                                                                                             \n")
        stdo("        --cve=<cve-id>                                                                       \n")
        stdo("                         A single CVE number which will be inserted into the commit body.    \n")
        stdo("                                                                                             \n")
        stdo("        --sob=<a-list>                                                                       \n")
        stdo("                         A comma separated list of irc nicknames which will be expanded      \n")
        stdo("                         to full email addresses and added as 'Signed-off-by:' lines to      \n")
        stdo("                         each patch specified on the command line.                           \n")
        stdo("                                                                                             \n")
        stdo("        --list-aliases                                                                       \n")
        stdo("                         Show all aliases currently defined in the configuration file.       \n")
        stdo("                                                                                             \n")
        stdo("        --cp=<sha1-list>                                                                     \n")
        stdo("                         A list of git commit ids that will make up 'cherry-pick' lines      \n")
        stdo("                         in the signed-off-by block of the commit.                           \n")
        stdo("                                                                                             \n")
        stdo("        --bp=<sha1-list>                                                                     \n")
        stdo("                         A list of git commit ids that will make up 'back-port' lines        \n")
        stdo("                         in the signed-off-by block of the commit.                           \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --list-aliases                                                                    \n" % self.cfg['app_name'])
        stdo('        %s --bug=772543 --sob=bjf --ack="smb,ogasawara" *.patch                              \n' % self.cfg['app_name'])
        stdo('        %s --bug=772543 --sob=bjf --cve=2011-1182 *.patch                                    \n' % self.cfg['app_name'])

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = 'va:b:c:s:d:'
            optsLong  = ['help', 'verbose', 'config=', 'debug=', 'ack=', 'bugid=', 'cve=', 'sob=', 'list-aliases', 'cp=', 'bp=', 'dry-run', 'filter']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if opt == '--help':
                    raise CmdlineError('')

                elif opt in ('-v', '--verbose'):              # verbose
                    self.cfg['verbose'] = True

                elif opt in ('--config'):                     # config
                    self.cfg['configuration_file'] = val

                elif opt in ('-d', '--debug'):                # debug
                    self.cfg['debug'] = val.split(',')

                elif opt in ('-a', '--ack'):                  # ack
                    self.cfg['modify-operation'] = True
                    self.cfg['acks'] = []
                    for k in val.split(','):
                        self.cfg['acks'].append(k.strip())

                elif opt in ('-b', '--bugid', '--bugs'):      # bugid
                    self.cfg['modify-operation'] = True
                    self.cfg['bugids'] = []
                    for k in val.split(','):
                        self.cfg['bugids'].append(k.strip())

                elif opt in ('-c', '--cve'):                  # cve
                    self.cfg['modify-operation'] = True
                    self.cfg['cveid'] = val

                elif opt in ('-s', '--sob'):                  # sob
                    self.cfg['modify-operation'] = True
                    self.cfg['sobs'] = []
                    for k in val.split(','):
                        self.cfg['sobs'].append(k.strip())

                elif opt in ('--bp'):                          # bp
                    self.cfg['modify-operation'] = True
                    self.cfg['bps'] = []
                    for k in val.split(','):
                        self.cfg['bps'].append(k.strip())

                elif opt in ('--cp'):                          # cp
                    self.cfg['modify-operation'] = True
                    self.cfg['cps'] = []
                    for k in val.split(','):
                        self.cfg['cps'].append(k.strip())

                elif opt in ('--list-aliases'):               # list-aliases
                    self.cfg['list-aliases'] = True

                elif opt in ('--dry-run'):                    # dry-run
                    self.cfg['dry-run'] = True

                elif opt in ('--filter'):                    # called with git filter-branch
                    self.cfg['filter'] = True

            if result: # No errors yet
                if len(args) > 0:
                    self.cfg['modify-operation'] = True
                    self.cfg['patch-files'] = args

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        """
        Used to verify that all required parameters are present and correct.
        """

        # At lease one patch file must be specified.
        #
        if 'patch-files' not in cfg and not cfg['filter']:
            raise CmdlineError('No patch files were specified on the command line.\n')

        # If we have sob or ack we need to have the irc-aliases
        #
        if 'acks' in cfg or 'sobs' in cfg:
            if not 'irc-aliases' in cfg:
                raise CmdlineError('No aliases found, the required configuration file may be missing. Copy the file kteam-tools/maintscripts/doc/example_kteam.rc to ~/.kteam.rc.')
        return


# ModifyPatch
#
class ModifyPatch(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}
        self.defaults['configuration_file'] = path.join('~', '.kteam.rc')
        self.defaults['list-aliases']     = False
        self.defaults['modify-operation'] = False
        self.defaults['dry-run']          = False
        self.defaults['filter']           = False
        self.defaults['buglink_base_url'] = "https://bugs.launchpad.net/bugs/"

        self.cp_rc = compile('\(cherry picked from commit ([0-9a-zA-Z]+)\)')
        self.bp_rc = compile('\(backported from commit ([0-9a-zA-Z]+) upstream\)')

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        return

    # sob_block
    #
    def sob_block(self, existing_acks, existing_sobs, existing_cps, existing_bps):
        """
        Create the block of text that will be inserted that contains all the sob and ack
        text.
        """

        retval = ''

        if 'acks' in self.cfg:
            for ack in self.cfg['acks']:
                expanded = self.cfg['irc-aliases'][ack]
                if expanded not in existing_acks:
                    retval += 'Acked-by: %s\n' % (expanded)

        if 'bps' in self.cfg:
            for bp in self.cfg['bps']:
                if bp not in existing_bps:
                    retval += '(backported from commit %s upstream)\n' % (bp)

        if 'cps' in self.cfg:
            for cp in self.cfg['cps']:
                if cp not in existing_cps:
                    retval += '(cherry picked from commit %s)\n' % (cp)

        if 'sobs' in self.cfg:
            for sob in self.cfg['sobs']:
                expanded = self.cfg['irc-aliases'][sob]
                if expanded not in existing_sobs:
                    retval += 'Signed-off-by: %s\n' % (expanded)

        return retval

    # cve_block
    #
    def cve_block(self, existing_cves):
        """
        Create the block of text that will be inserted that contains all the CVE text.
        """

        retval = ''

        if 'cveid' in self.cfg and len(self.cfg['cveid']) > 0:
            if self.cfg['cveid'] not in existing_cves:
                retval += 'CVE-%s\n' % self.cfg['cveid']
                retval += '\n' # One blank line after the CVE line

        return retval

    # bug_block
    #
    def bug_block(self, existing_buglinks):
        """
        Create the block of text that will be inserted that contains all the buglinks.
        """

        retval = ''

        if 'bugids' in self.cfg and len(self.cfg['bugids']) > 0:
            for bug_id in self.cfg['bugids']:
                if bug_id not in existing_buglinks:
                    retval += 'BugLink: %s%s\n' % (self.cfg['buglink_base_url'], bug_id)
                    retval += '\n' # One blank line after the BugLink line

        return retval

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))

            if self.cfg['modify-operation']:
                cmdline.verify_options(self.cfg)

            if self.cfg['list-aliases']:
                for alias in self.cfg['irc-aliases']:
                   stdo("%15s : %s\n" % (alias, self.cfg['irc-aliases'][alias]))

            self.initialize()

            if 'patch-files' not in self.cfg and self.cfg['filter']:
                self.modify(stdin, self.cfg['filter'])
            else:
                for patch_file in self.cfg['patch-files']:
                    self.modify(open(patch_file, 'r'), self.cfg['filter'])

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

    # modify
    #
    def modify(self, patch, filter=False):
        """
        Open a file and write it's modified contents out to a temp file.
        The temp file will be renamed to the original file as the last step.
        """
        existing_cves     = []
        existing_buglinks = []
        existing_acks     = []
        existing_sobs     = []
        existing_bps      = []
        existing_cps      = []
        looking_4_subject_line            = True
        subject_line                      = False
        cve_insertion_point               = False

        looking_4_buglink_insertion_point = False
        buglink_insertion_point           = False

        looking_4_sob_insertion_point     = False
        sob_insertion_point               = False
        just_copy                         = False

        with patch as src:
            with NamedTemporaryFile(dir='./', delete=False) as dst:

                for line in src:

                    if just_copy:
                        dst.write(line)
                        continue

                    if looking_4_sob_insertion_point:
                        if line.strip() == '---':
                            sob_insertion_point = True
                            looking_4_sob_insertion_point = False
                        else:
                            if 'Acked-by:' in line:
                                user_id = line.replace('Acked-by:', '').strip()
                                if user_id not in existing_acks:
                                    existing_acks.append(user_id)
                            elif 'Signed-off-by:' in line:
                                user_id = line.replace('Signed-off-by:', '').strip()
                                if user_id not in existing_sobs:
                                    existing_sobs.append(user_id)
                            elif 'cherry picked' in line:
                                m = self.cp_rc.search(line)
                                if m is not None:
                                    existing_cps.append(m.group(1))
                                pass
                            elif 'backported from' in line:
                                m = self.bp_rc.search(line)
                                if m is not None:
                                    existing_bps.append(m.group(1))
                                pass

                    if sob_insertion_point:
                        dst.write(self.sob_block(existing_acks, existing_sobs, existing_cps, existing_bps))
                        sob_insertion_point = False
                        just_copy = True

                    # After the first blank line after the subject line is where we
                    # want to insert out CVE lines if we need to insert any.
                    #
                    if cve_insertion_point:
                        # Skip past any existing CVE lines and don't duplicate any
                        # existing CVE lines
                        #
                        if 'CVE' in line:
                            cve_id = line.strip().replace('CVE-', '')
                            existing_cves.append(cve_id)
                        else:
                            # Add the CVE id here.
                            #
                            dst.write(self.cve_block(existing_cves))
                            cve_insertion_point = False # Done!
                            looking_4_buglink_insertion_point = True

                            # We don't know at this point, if we are going to insert a BugLink
                            # so we can't write out the current line of text.

                    # After the first blank line after the CVE lines is where the BugLinks are
                    # to be inserted.
                    #
                    if looking_4_buglink_insertion_point:
                        if line.strip() != '':
                            looking_4_buglink_insertion_point = False
                            buglink_insertion_point = True

                    if buglink_insertion_point:
                        # Skip past any existing BugLink lines and build a list of existing
                        # buglinks so we don't duplicate any.
                        #
                        if line.startswith('BugLink:'):
                            bug_id = line.rstrip().split('/')[-1]
                            existing_buglinks.append(bug_id)
                        else:
                            # Add the buglinks.
                            #
                            dst.write(self.bug_block(existing_buglinks))
                            buglink_insertion_point = False
                            looking_4_sob_insertion_point = True

                            # We've inserted any BugLinks that we intend to, so we should now
                            # print out the line of text we've been holding. We do that by falling
                            # through to the end of the loop.

                    # Once we've found the subject line, we look for the first blank
                    # line after it.
                    #
                    if subject_line:
                        if line.strip() == '':
                            cve_insertion_point = True
                            subject_line = False

                    # All the modifications that we make, are made after the subject
                    # line, so that's the first things we look for.
                    #
                    if looking_4_subject_line:
                        if 'Subject:' in line or filter == True:
                            subject_line = True
                            looking_4_subject_line = False

                    dst.write(line) # Print out the current line of text.

                if filter == True:
                    if subject_line:
                        dst.write("\n")
                        cve_insertion_point = True
                    if cve_insertion_point:
                        dst.write(self.cve_block(existing_cves))
                        buglink_insertion_point = True
                    if looking_4_buglink_insertion_point or buglink_insertion_point:
                        dst.write(self.bug_block(existing_buglinks))
                        sob_insertion_point = True
                    if looking_4_sob_insertion_point or sob_insertion_point:
                        dst.write(self.sob_block(existing_acks, existing_sobs, existing_cps, existing_bps))

                temp = dst.name
        if not self.cfg['dry-run'] and not self.cfg['filter'] and patch != stdin:
            rename(temp, patch.name)
        if self.cfg['filter']:
            print(open(temp, 'r').read())
            unlink(temp)
        return

if __name__ == '__main__':
    app = ModifyPatch()
    app.main()

# vi:set ts=4 sw=4 expandtab:

