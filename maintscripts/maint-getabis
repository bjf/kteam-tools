#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010,2019
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os, optparse, re
from subprocess import *
from urlparse import urlparse

#------------------------------------------------------------------------------
# Libraries shared by all kteam-tools will be found here (../lib)
#------------------------------------------------------------------------------
common_lib = os.path.dirname(os.path.abspath(sys.argv[0]))
common_lib = os.path.dirname(common_lib)
common_lib = os.path.join(common_lib, "lib")
sys.path.insert(0, common_lib)

from buildenv_lib import *

#------------------------------------------------------------------------------
# Built-in quirk list
#------------------------------------------------------------------------------
IgnorePatterns = dict()
IgnorePatterns["karmic" ] = [ ".*dove-z0.*" ]
IgnorePatterns["lucid"] = [ ".*_lpia.deb" ]
IgnorePatterns["natty"] = [ ".*_ppc64.deb" ]
IgnorePatterns["oneiric"] = [ ".*_ppc64.deb" ]
IgnorePatterns["precise"] = [ ".*_ppc64.deb" ]
IgnorePatterns["quantal"] = [ ".*_ppc64.deb" ]

#------------------------------------------------------------------------------
# Setup the command line parser and run it.
#------------------------------------------------------------------------------
parser = optparse.OptionParser("Usage: %prog [options] <release tag>")
dsc    = "Retrieves ABI files for the given release"
parser.set_description(dsc)
parser.add_option("--dry-run", action="store_true", dest="dryrun",
		default=False, help="only print what would be done")
parser.add_option("--local", action="store_true", dest="local",
		default=False, help="extract the packages locally")
parser.add_option("--host", action="store", dest="tgthost",
		default="kernel.ubuntu.com",
		help="fetch and extract the abi files on this host" +
			" (%default)")
parser.add_option("--ckt-ppa", action="store_true", dest="cktppa",
		default=False, help="add c-k-t ppa as an abi source")
parser.add_option("--no-tree-script", action="store_true", dest="forcemethod",
		default=False, help="Use the external retrieving method " +
			"even if there is a in-tree getabis.")
parser.add_option("--pool", action="append", dest="additional_repos",
		default=[], help="add the URL as an abi source")
(opts, args) = parser.parse_args()

for repo in opts.additional_repos:
	try:
		urlparse(repo)
	except:
		print "EE: invalid URL: %s" % repo
		sys.exit(1)

#------------------------------------------------------------------------------
# The release tag (or SHA1) is a required argument
#------------------------------------------------------------------------------
if len(args) < 1:
	parser.print_help()
	sys.exit(1)
release_tag = args[0]

#------------------------------------------------------------------------------
# Verify that the given name really is valid.
#------------------------------------------------------------------------------
if not GitDescribe(release_tag):
	print "EE:", release_tag, "does not seem to be a valid name"
	sys.exit(1)

#------------------------------------------------------------------------------
# Get the location of the branch specific debian directory and the name,
# version and pocket of the package at the time of the given tag or sha1.
#------------------------------------------------------------------------------
debian_dir = GetDebianDir(sha1=release_tag)
(srcpkgname, version, pocket) = GetPackageInfo(sha1=release_tag)[0:3]

#------------------------------------------------------------------------------
# If there is no ABI directory, then this is likely the wrong repo.
#------------------------------------------------------------------------------
if not os.path.isdir(os.path.join(debian_dir, "abi")):
	print "EE: No abi directory found in", debian_dir
	sys.exit(1)

#------------------------------------------------------------------------------
# Print either ok or failed based on return code
#------------------------------------------------------------------------------
def PrintResult(rc):
	if rc:
		print "FAILED!"
	else:
		print "ok"

#------------------------------------------------------------------------------
# Look into flavour-control.stub to find out how the linux package is called
# in this branch.
# Some topic branches seem to have the Provides: line commented out, which
# causes the match to fail.
#------------------------------------------------------------------------------
def GetPkgName(sha1):
	filename = os.path.join(debian_dir, "control.d")
	filename = os.path.join(filename, "flavour-control.stub")

	for line in GitCatFile(filename, sha1=sha1):
		if "Package:" in line:
			pkgname = line.rstrip().split(" ")[1]
		if re.match("(# *)?Provides:.*linux-image", line):
			pkgname = re.sub("-PKGVER-ABINUM-FLAVOUR", "", pkgname)
			break
	else:
		#--------------------------------------------------------------
		# It is not very useful to continue if the matching did not
		# find a potential package name.
		# Give a reasonable explanation and bail out.
		#--------------------------------------------------------------
		print "EE: Could not read the potential package name from"
		print "EE:", filename
		sys.exit(1)

	return pkgname

#------------------------------------------------------------------------------
# The flavours which will be produced have definition files in the control.d.
# In each definition file there is a list of target architectures. Return a
# list of [<arch>, <flavour>] tuples for each combination found.
#------------------------------------------------------------------------------
def GetArchFlavourList(sha1):
	filename = os.path.join(debian_dir, "control.d")

	afl = []
	for line1 in GitCatFile(filename, sha1=sha1):
		if not line1.startswith("vars."):
			continue
		line1 = line1.rstrip()
		flavour = line1.split(".")[1]
		arches  = []
		for line2 in open(os.path.join(filename, line1), "r"):
			line2 = line2.rstrip()
			if re.match("^arch=\".*\"$", line2):
				line2 = re.sub("arch=\"(.*)\"", "\\1", line2)
				arches = line2.split(" ")
				break
			elif re.match("^arch=.*$", line2):
				arches = [ re.sub("arch=", "", line2) ]
				break
		for arch in arches:
			afl.append([arch, flavour])

	return afl

#------------------------------------------------------------------------------
# Set up some variables.
#------------------------------------------------------------------------------
series   = pocket.split("-")[0]
kversion = version.split("-")[0]
kabi     = version.split("-")[1].split(".")[0]
pkgname  = GetPkgName(release_tag) + "-" + kversion + "-" + kabi

#------------------------------------------------------------------------------
# This runs a prepared script which downloads the package file.
#------------------------------------------------------------------------------
def DownloadPackage(pkgname, srcpkgname):
	cmd  = "pkg=" + pkgname + "\n"
	cmd += "src=" + srcpkgname + "\n"
	cmd += "repos=\""
	cmd += "http://archive.ubuntu.com/ubuntu/pool/main/l/$src\n"
	cmd += "http://ports.ubuntu.com/ubuntu-ports/pool/main/l/$src\n"
	cmd += "http://archive.ubuntu.com/ubuntu/pool/universe/l/$src\n"
	cmd += "http://ports.ubuntu.com/ubuntu-ports/pool/universe/l/$src\n"
	if opts.cktppa:
		cmd += "http://ppa.launchpad.net/canonical-kernel-team/"
		cmd += "ppa/ubuntu/pool/main/l/$src\n"
	for repo in opts.additional_repos:
		cmd += "%s\n" % repo
	cmd += "\"\n"
	cmd += "if test -f $pkg; then\n"
	cmd += "	exit 0\n"
	cmd += "fi\n"
	cmd += "for repo in $repos; do\n"
	cmd += "	echo $repo\n"
	cmd += "	if wget --quiet -c $repo/$pkg; then\n"
	cmd += "		break\n"
	cmd += "	fi\n"
	cmd += "done\n"
	cmd += "if ! test -f $pkg; then\n"
	cmd += "	exit 1\n"
	cmd += "fi\n"
	cmd += "exit 0"

	print "II: Downloading",
	if not opts.local:
		print "to", opts.tgthost,
	print "...",
	sys.stdout.flush()

	rc = 0
	if not opts.dryrun:
		if opts.local:
			rc = RunScript(cmd)[0]
		else:
			rc = RunScript(cmd, opts.tgthost, timeout=30)[0]
	if rc:
		print "FAILED!"
		if rc == 255:
			print "EE: The ssh connection to", opts.tgthost,
			print "timed out!"
			print "EE: Please check your ssh configuration!"
			sys.exit(1)
	else:
		print "done"

	return not rc

#------------------------------------------------------------------------------
# Extract the ABI relevant files from a previously downloaded package and
# remove the package on success.
#------------------------------------------------------------------------------
def ExtractPackage(pkg, tmpdir, abiversion, flavour):
	cmd  = "tmpdir=" + tmpdir + "\n"
	cmd += "pkg=" + pkg + "\n"
	cmd += "abiver=" + abiversion + "\n"
	cmd += "flavour=" + flavour + "\n"
	cmd += "test -d $tmpdir && rm -rf $tmpdir\n"
	cmd += "dpkg-deb --extract $pkg $tmpdir\n"
	cmd += "if test $? -ne 0; then\n"
	cmd += "	rm -rf $tmpdir\n"
	cmd += "	exit 2\n"
	cmd += "fi\n"
	cmd += "rm $pkg\n"
	cmd += "cd $tmpdir\n"
	cmd += "mkdir abi\n"
	cmd += "if ! test -f boot/abi-$abiver; then\n"
	cmd += "	exit 1\n"
	cmd += "fi\n"
	cmd += "mv boot/abi-$abiver $flavour\n"
	cmd += "find lib/modules/$abiver/kernel -name '*.ko'"
	cmd += "	-exec basename {} .ko \\; | sort"
	cmd += "	>$flavour.modules\n"
        cmd += "ko=`find lib/modules/$abiver/kernel -name '*.ko' | head -1`\n"
        cmd += "readelf -p .comment \"$ko\" | awk '"
        cmd += "        ($1 == \"[\") {"
        cmd += "                printf(\"%s\", $3);"
        cmd += "                for (n=4; n<=NF; n++) {"
        cmd += "                        printf(\" %s\", $n);"
        cmd += "                }"
        cmd += "                print \"\";"
        cmd += "        }' | sort -u >$flavour.compiler\n"
	cmd += "exit 0"

	print "II: Extracting",
	if not opts.local:
		print "on", opts.tgthost,
	print "...",
	sys.stdout.flush()

	rc = 0
	if not opts.dryrun:
		if opts.local:
			(rc, out, err) = RunScript(cmd)
		else:
			(rc, out, err) = RunScript(cmd, host=opts.tgthost)
	if rc > 1:
		print "FAILED!"
	elif rc == 1:
		print "no ABI files found"
	else:
		print "done"

	return not rc

#------------------------------------------------------------------------------
# Helper to either retrieve or copy the extracted ABI into place
#------------------------------------------------------------------------------
def RetrieveABI(tmpdir, abi_arch_dir, flavour):
	if opts.local and not opts.dryrun:
		print "II: Copying ...",
		cmd  = "cp " + os.path.join(tmpdir, flavour)
		cmd += "* " + abi_arch_dir
	else:
		print "II: Retrieving from", opts.tgthost, "...",
		cmd  = "scp -q " + opts.tgthost + ":"
		cmd += os.path.join(tmpdir, flavour) + "* " + abi_arch_dir

	sys.stdout.flush()
	rc = 0
	if not opts.dryrun:
		rc = os.system(cmd)
	PrintResult(rc)

	return not rc

#------------------------------------------------------------------------------
# When not running in test mode, make sure the new abi directory exists.
#------------------------------------------------------------------------------

abi_dir = os.path.join(debian_dir, "abi", version)
if not opts.dryrun and not os.path.isdir(abi_dir):
	os.mkdir(abi_dir)

tmpdir = "abi-tmp-" + series + "-" + str(os.getpid())

def ExternalGetAbis():
	#----------------------------------------------------------------------
	# Process all flavours for all architectures defined.
	#----------------------------------------------------------------------
	errors = False
	archflavourlist = GetArchFlavourList(release_tag)

	for (arch, flavour) in archflavourlist:
		pkg = pkgname + "-" + flavour + "_" + version
		pkg = pkg + "_" + arch + ".deb"

		#--------------------------------------------------------------
		# There are some exceptions in which packages are really build
		# and have ABI definitions.
		#--------------------------------------------------------------
		ignore = False
		if IgnorePatterns.has_key(series):
			for pattern in IgnorePatterns[series]:
				if re.match(pattern, pkg):
					print "WW:", pkg, "(ignored)"
					ignore = True
					break
		if ignore:
			continue

		#--------------------------------------------------------------
		# When not running in test mode, make sure the abi directory
		# for the specific architecture exists.
		#--------------------------------------------------------------
		aa_dir = os.path.join(abi_dir, arch)
		if not opts.dryrun and not os.path.isdir(aa_dir):
			os.mkdir(aa_dir)

		#--------------------------------------------------------------
		# If a file named like the flavour exists in the architecture
		# specific ABI directory, assume it was already fetched in a
		# previous run.
		#--------------------------------------------------------------
		if os.path.isfile(os.path.join(aa_dir, flavour)):
			print "II:", arch + "/" + flavour, "exists (skipping)"
			continue

		#--------------------------------------------------------------
		# Download, extaction (and potentially copy to local)
		#--------------------------------------------------------------
		print "II:", pkg
		if DownloadPackage(pkg, srcpkgname):
			abiversion = kversion + "-" + kabi + "-" + flavour
			if ExtractPackage(pkg, tmpdir, abiversion, flavour):
				if not RetrieveABI(tmpdir, aa_dir, flavour):
					errors = True
			else:
				errors = True
		else:
			errors = True

	#----------------------------------------------------------------------
	# Try to clean up the temporary directory. But do not bother too much
	# if this fails.
	#----------------------------------------------------------------------
	cmd = "rm -rf " + tmpdir
	print "II: Cleaning up",
	if not opts.local:
		print "on", opts.tgthost,
	print "...",
	sys.stdout.flush()

	rc = 0
	if not opts.dryrun:
		if not opts.local:
			rc = RunScript(cmd, host=opts.tgthost)[0]
		else:
			rc = RunScript(cmd)[0]

	PrintResult(rc)

	if not opts.dryrun:
		try:
			abifile = open(os.path.join(abi_dir, "abiname"), "w")
			abifile.write(kabi + "\n")
			abifile.close()
		except:
			print "EE: Failed to create \"abiname\" file!"
			errors = True

	return errors

#------------------------------------------------------------------------------
# Run the getabis script from the kernel tree on a remote machine
#------------------------------------------------------------------------------
def TreeGetAbisRemote():
	revision = version.split("-")[1]

	cmd  = "mkdir -p " + os.path.join(tmpdir, "etc") + "\n"
	rc = RunScript(cmd, host=opts.tgthost)[0]

	#----------------------------------------------------------------------
	# The two components required are the script and the config. The
	# script goes into the top-level dir, and the config into etc there.
	#----------------------------------------------------------------------
	cmd  = "scp -q debian/scripts/misc/getabis " + opts.tgthost
	cmd += ":" + tmpdir + "\n"
	cmd += "scp -q " + debian_dir + "/etc/getabis " + opts.tgthost
	cmd += ":" + tmpdir +"/etc"
	print "II: Sending getabi scripts to", opts.tgthost, "...",
	sys.stdout.flush()
	if not opts.dryrun:
		rc = RunScript(cmd)[0]
	else:
		rc = 0
	PrintResult(rc)

	#----------------------------------------------------------------------
	# Run the script with stdout and stderr going to the screen
	#----------------------------------------------------------------------
	cmd  = "cd " + tmpdir + "\n"
	cmd += "DEBIAN=. ./getabis " + kversion + " " + revision
	for repo in opts.additional_repos:
		cmd += " --pool '%s'" % repo
        print "II: Running getabis: %s" % cmd
	print "II: Running getabis on", opts.tgthost, "..."
	sys.stdout.flush()
	if not opts.dryrun:
		rc = RunScript(cmd, host=opts.tgthost, getoutput=False)[0]
	else:
		rc = 0
	PrintResult(rc)

	#----------------------------------------------------------------------
	# Copy the abi directory from remote to local
	#----------------------------------------------------------------------
	if not rc:
		cmd  = "scp -r " + opts.tgthost + ":" + tmpdir + "/abi/. "
		cmd += debian_dir + "/abi/"
		print "II: Retrieving files from", opts.tgthost, "...",
		sys.stdout.flush()
		if not opts.dryrun:
			(rc, out, err) = RunScript(cmd)
		else:
			rc = 0
		PrintResult(rc)

	cmd = "rm -rf " + tmpdir
	print "II: Cleaning up on", opts.tgthost, "...",
	sys.stdout.flush()
	if not opts.dryrun:
		rc = RunScript(cmd, host=opts.tgthost)[0]
	else:
		rc = 0
	PrintResult(rc)

	return True

def TreeGetAbis():
	if opts.local:
		revision = version.split("-")[1]
		cmd  = "./debian/scripts/misc/getabis " + kversion + " "
		cmd += revision
		for repo in opts.additional_repos:
			cmd += " --pool '%s'" % repo
		if not opts.dryrun:
			rc = RunScript(cmd, getoutput=False)[0]
		else:
                        print "DRY: %s" % cmd
			rc = 0
		PrintResult(rc)
		if rc:
			errors = True
		else:
			errors = False
	else:
		errors = TreeGetAbisRemote()

if debian_dir == "debian" or opts.forcemethod:
	errors = ExternalGetAbis()
else:
	errors = TreeGetAbis()

if errors:
	print "EE: Some operations failed!"
	sys.exit(1)
