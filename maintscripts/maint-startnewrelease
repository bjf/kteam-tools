#!/usr/bin/python
#==============================================================================
# Author: Stefan Bader <stefan.bader@canonical.com>
# Copyright (C) 2010,2019
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#==============================================================================
import sys, os, optparse, re
from subprocess import *
from ktl.shell                          import sh, ShellError

#------------------------------------------------------------------------------
# Libraries shared by all kteam-tools will be found here (../lib)
#------------------------------------------------------------------------------
common_lib = os.path.dirname(os.path.abspath(sys.argv[0]))
common_lib = os.path.dirname(common_lib)
common_lib = os.path.join(common_lib, "lib")
sys.path.insert(0, common_lib)

from buildenv_lib import *

#------------------------------------------------------------------------------
# Setup the command line parser and run it.
#------------------------------------------------------------------------------
parser = optparse.OptionParser("Usage: %prog [options]")
dsc    = "Starts a new release and commits the changes to git (also will "
dsc   += "optionally fetch the ABI files)."
parser.set_description(dsc)
parser.add_option(
	"--host", action="store", dest="tgthost", default=None,
	help="hostname to be passed to maint-getabis (default is to use the "
	     "one maint-getabis defaults to)")
parser.add_option(
	"--dry-run", action="store_true", dest="dryrun", default=False,
	help="only print what would be done")
parser.add_option(
	"--local", action="store_true", dest="local", default=False,
	help="pass --local to maint-getabis, to extract the packages "
	     "locally")
parser.add_option(
	"--ckt-ppa", action="store_true", dest="cktppa", default=False,
	help="pass --ckt-ppa to maint-getabis, to add c-k-t ppa as an "
	     "abi source")
parser.add_option(
        "--pool", action="append", dest="additional_repos", default=[],
        help="pass --pool to maint-getabis, add the URL as an abi source")
epilog = "Example: user@test:~/ubuntu-oneiric$ %s " % (parser.get_prog_name())
epilog += "--local --ckt-ppa"
parser.epilog = epilog
(opts, args) = parser.parse_args()


#
# Make sure the DEBEMAIL is the right domain (default @canonical.com)
#
mailenforce = os.getenv("MAINT_STARTNEWRELEASE_MAILENFORCE")
if not mailenforce:
	mailenforce = "@canonical.com"

debem = os.getenv("DEBEMAIL")
if (debem is None) or (debem is not None and mailenforce not in debem):
            print 'DEBEMAIL is unset, or does not contain', mailenforce
            sys.exit(1)

#------------------------------------------------------------------------------
# Find the abstracted debian directory and make sure it is there (IOW we are
# in the right directory).
#------------------------------------------------------------------------------
debian_dir = GetDebianDir()
if not os.path.isdir(debian_dir):
	print "EE:", debian_dir, "not found! Must be called from toplevel",
	print "directory."
	sys.exit(1)

(srcpkg, full_version, pocket, flags) = GetPackageInfo()
lts_version = None
if '~' in full_version:
    lts_version = full_version.split('~')[1]
version = full_version.split("~")[0]

#------------------------------------------------------------------------------
# Make sure the changelog is not locally modified.
#------------------------------------------------------------------------------
changelog = os.path.join(debian_dir, "changelog")
if GitDiff(changelog):
	print "EE:", changelog, "has been locally modified!"
	sys.exit(1)

#------------------------------------------------------------------------------
# Check whether the current release is not released. In that case there is
# nothing to do but to warn.
#------------------------------------------------------------------------------
if pocket == "UNRELEASED":
	print("WW: %s-%s" % (srcpkg, version))
	print(" ")
	print("    The tree is in a state (UNRELEASED) that does not require a 'start new release'. ")
	print("    Patches may be applied directly to the branch as it currently stands.")
	sys.exit(0)

#------------------------------------------------------------------------------
# Try to make sure we've run fdr clean
#------------------------------------------------------------------------------
if not os.path.isfile("debian/control"):
	print "EE: debian control file not found - do you need to run 'fakeroot debian/rules clean'?"
	sys.exit(1)

#------------------------------------------------------------------------------
# If there is an ABI directory, try to get the latest information
#------------------------------------------------------------------------------
if os.path.isdir(os.path.join(debian_dir, "abi")):
	#----------------------------------------------------------------------
	# Try to get the new ABI files (note that version is not incremented,
	# yet).
	#----------------------------------------------------------------------
	for path in sys.path:
		cmd = os.path.join(path, "maint-getabis")
		if os.path.isfile(cmd):
			break
	else:
		print "EE: maint-getabis not found!"
		sys.exit(1)
	if opts.tgthost:
		cmd += " --host " + opts.tgthost
	if opts.dryrun:
		cmd += " --dry-run"
	if opts.local:
		cmd += " --local"
	if opts.cktppa:
		cmd += " --ckt-ppa"
	for repo in opts.additional_repos:
		cmd += " --pool '%s'" % repo

        # Handle the various (historic) variants of tag names
        if srcpkg.startswith("linux-lts-"):
                pfx = "Ubuntu-lts"
        elif srcpkg.startswith("linux-"):
                pfx = "Ubuntu-" + srcpkg[len("linux-"):]
        else:
                pfx = "Ubuntu"
        v = pfx + "-" + version
        if lts_version is not None:
            v += "_" + lts_version

	(rc, output) = sh(cmd + " " + v)
        if rc:
		print "EE: maint-getabis failed!"
		sys.exit(1)

	#----------------------------------------------------------------------
	# Remove the old ABI files (as the changelog is not modified, yet,
	# this should be the version number before. Then add the new abi
	# directory to be committed.
	#----------------------------------------------------------------------
	print "II: Removing old ABI files and adding the new ones"
        v = GetPackageInfo(prev=True)[1]
        old_abi_dir = os.path.join(debian_dir, "abi", v)

        # For a while backport kernels would have stripped any /~\..*/
        # pattern from the abi directory name. If the full version string
        # does not exist, try the stripped name.
        if not os.path.isdir(old_abi_dir):
            old_abi_dir = old_abi_dir.rsplit("~", 1)[0]

        if os.path.isdir(old_abi_dir):
            if opts.dryrun:
                print "DRY: git rm -rf %s" % old_abi_dir
            else:
                (rc, output) = sh("git rm --quiet -rf " + old_abi_dir, ignore_result=True)
                (rc, output) = sh("rm -rf " + old_abi_dir, ignore_result=True)

        cmd = "git add %s" % os.path.join(debian_dir, "abi", full_version)
        if opts.dryrun:
                print "DRY: %s" % cmd
        else:
                (rc, output) = sh(cmd)

#------------------------------------------------------------------------------
# Next step is to create a new changelog with the new header first and the
# remainder appended from the old one.
#------------------------------------------------------------------------------
if opts.dryrun:
	print "DRY: fakeroot debian/rules startnewrelease"
        print "DRY: git add %s" % changelog
        print "DRY: git commit -s -F debian/commit-templates/newrelease"
else:
	(rc, output) = sh("fakeroot debian/rules startnewrelease")
	(rc, output) = sh("git add " + changelog)
	(rc, output) = sh("git commit -s -F debian/commit-templates/newrelease")

#------------------------------------------------------------------------------
# Finally add the changelog and commit everything.
#------------------------------------------------------------------------------
if not opts.dryrun:
    print "\n\n***** Now please inspect the commit before pushing *****"
