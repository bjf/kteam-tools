#!/usr/bin/env python
#

from sys                                import argv
from os                                 import path
from getopt                             import getopt, GetoptError
import json
from ktl.utils                          import stdo, error
from ktl.std_app                        import StdApp
from ktl.bug_spam                       import BugSpam


# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error


# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("                                                                                             \n")
        stdo(" %s is a tool for taking a list of bugs and modifying them as part of the stable kernel      \n" % self.cfg['app_name'])
        stdo(" release cadence. The following changes will be made to the bugs:                            \n")
        stdo("                                                                                             \n")
        stdo("     1. A comment will be added asking that the bug be verified as having been fixed in      \n")
        stdo("        the kernel the is currently in -proposed.                                            \n")
        stdo("                                                                                             \n")
        stdo("     2. Tags will be added signifying that testing needs to be done.                         \n")
        stdo("                                                                                             \n")
        stdo("                                                                                             \n")
        stdo(" Usage:                                                                                      \n")
        stdo("     %s <options> <srus.json>                                                                \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo(" Options:                                                                                    \n")
        stdo("     --help           Prints this text.                                                      \n")
        stdo("                                                                                             \n")
        stdo("     --verbose        Give some feedback of what is happening while the script is            \n")
        stdo("                      running.                                                               \n")
        stdo("                                                                                             \n")
        # stdo("     --config=<cfg file>                                                                     \n")
        # stdo("                      The full path to the configuration file to use instead of              \n")
        # stdo("                      the default location.                                                  \n")
        # stdo("                                                                                             \n")
        # stdo("     --debug=<debug options>                                                                 \n")
        # stdo("                      Performs additional output related to the option enabled and           \n")
        # stdo("                      the application defined support for the option.                        \n")
        # stdo("                                                                                             \n")
        stdo("     --series=<rls>   Specifies for which series the version is to be returned.              \n")
        stdo("                      At this time, dapper, hardy, karmic, lucid and maverick are            \n")
        stdo("                      valid series.                                                          \n")
        stdo("                                                                                             \n")
        stdo("     --package=<pkg>  Specifies for which package the version is to be returned.             \n")
        stdo("                      Most likely a value of linux or linux-meta.                            \n")
        stdo("                                                                                             \n")
        stdo("     --comment=<file>                                                                        \n")
        stdo("                      Text is read from the indicated file and added to each bug as a        \n")
        stdo("                      new comment.                                                           \n")
        stdo("                                                                                             \n")
        stdo("     --dry-run                                                                               \n")
        stdo("                      Don't commit the changes to the bug.                                   \n")
        stdo("                                                                                             \n")
        stdo(" Examples:                                                                                   \n")
        stdo("     %s --verbose                                                                            \n" % self.cfg['app_name'])
        stdo("     %s --series=hardy --package=linux                                                       \n" % self.cfg['app_name'])
        stdo("     %s --comment=boilerplate/bugtext-start-verification.txt --package=linux --series=raring srus.json\n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            # optsLong  = ['help', 'verbose', 'config=', 'debug=', 'series=', 'package=', 'comment=', 'status=']
            optsLong = ['help', 'verbose', 'series=', 'package=', 'comment=', 'status=', 'dry-run', 'dryrun']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif (opt == '--dry-run' or opt == '--dryrun'):
                    self.cfg['dryrun'] = True

                # elif opt in ('--config'):
                #    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

                elif opt in ('--series'):
                    self.cfg['series'] = val

                elif opt in ('--package'):
                    self.cfg['package'] = val

                elif opt in ('--comment'):
                    self.cfg['comment'] = val

                elif opt in ('--status'):
                    self.cfg['status'] = val.strip()

            if result:  # No errors yet

                # At lease one source package must be specified.
                #
                if len(args) > 0:
                    self.cfg['sru_file'] = args[0]

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if ('series' not in self.cfg) or ('package' not in self.cfg):
            raise CmdlineError('--release and --package are required command line parameters.')

        if 'sru_file' not in self.cfg:
            raise CmdlineError('A json file containing the sru information is required. This is generated by the sru-report script.')

        if 'comment' not in self.cfg:
            raise CmdlineError('A comment file name is required.')
        return


# SpamProposedReleaseBugs
#
class SpamProposedReleaseBugs(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}
        self.defaults['dryrun'] = False

    # initialize
    #
    def initialize(self):
        self.dbg('core', "initialize: enter\n")

        self.cfg['launchpad_client_name'] = 'kernel-team-spam-proposed-release-bugs'

        # If a comment is to be added to the bug, read the comment file into a buffer
        # so we have it ready when we need it.
        #
        if 'comment' in self.cfg:
            with open(self.cfg['comment'], 'r') as f:
                self.cfg['comment-text'] = f.read()

        self.dbg('core', "initialize: leave\n")
        return

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.initialize()

            # Pull in the sru-data.json file for use.
            #
            if path.exists(self.cfg['sru_file']):
                with open(self.cfg['sru_file'], 'r') as f:
                    self.cfg['sru'] = json.load(f)

            self.bug_spam = BugSpam(cfg=self.cfg)
            self.bug_spam.spam()

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle ommand line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return


if __name__ == '__main__':
    app = SpamProposedReleaseBugs()
    app.main()

# vi:set ts=4 sw=4 expandtab:
