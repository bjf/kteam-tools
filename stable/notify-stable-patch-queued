#!/usr/bin/env python

from email.parser                       import Parser
from optparse                           import OptionParser, OptParseError
from sys                                import exit
from re                                 import compile, sub, match, IGNORECASE
from tempfile                           import NamedTemporaryFile
from os                                 import system, getenv
from ktl.git                            import Git

SendMailCmd  = "git send-email"

#
# Get the default name and email address from git config
#
DefaultName  = Git.config("user.name")
DefaultEmail = Git.config("user.email")

#
# Additional Cc targets which should get added
#
DefaultCc    = [
                    #"stable@vger.kernel.org",
                    "kernel-team@lists.ubuntu.com"
               ]
#
# Some people may not want to get notified even when they are part of the
# SOB chain.
#
SobBlacklist = [
	"Johannes Berg <johannes.berg@intel.com>"
               ]

if DefaultEmail != "":
    if DefaultName != "":
        DefaultFrom = DefaultName + " <" + DefaultEmail + ">"
    else:
        DefaultFrom = DefaultEmail
else:
    DefaultFrom = ""

OptParser = OptionParser(
    "Usage: %prog [options] <filename> [<filename> ...]",
    epilog= "This command is intended to be used whenever a patch or a batch "
            "of patches is added to a tree. The patch files are parsed and "
            "short notification mails get sent out to the author and s-o-b "
            "email addresses."
)
OptParser.add_option(
    "--from", dest="sender", action="store", default=DefaultFrom,
    help="sets the sender of the notification emails, default is "
         "git config user.name and user.email (%default)."
)
OptParser.add_option(
    "-b", "--blacklist", dest="blacklist", action="append", type="string",
    help="adds a new entry to the blacklist, i.e., if an email recipient "
         "matches an entry in the blacklist, it won't get notified.  "
         "Useful, for example, when a bogus email address is found in a "
         "patch."
)
OptParser.add_option(
    "--version", dest="version", action="store", default="",
    help="sets the kernel version displayed in the subject of the "
         "notification emails, e.g. 3.16.y-ckt")
OptParser.add_option(
    "--target", dest="tversion", action="store",
    help="sets the patch target version (e.g. 3.16.7-ckt1) displayed in the "
         "body of the notification emails")
OptParser.add_option(
    "--dry-run", dest="dryrun", action="store_true", default=False,
    help="run in test mode and do not send out mails (default: %default)"
)
OptParser.add_option(
    "--no-validate", dest="novalidate", action="store_true", default=False,
    help="send the --no-validate option to 'git send-email'.  Basically, it "
         "means that it won't check if a line contains more than 998 "
         "characters (default: %default)"
)
(opts, args) = OptParser.parse_args()

#
# At least one argument is required.
#
if len(args) == 0:
    print "EE: No filename given."
    OptParser.print_usage()
    exit(1)

if opts.sender == "":
    print "EE: No mail sender was set!"
    exit(1)

if opts.version == "":
    print "EE: No kernel version was set!"
    exit(1)

if opts.blacklist != None:
    SobBlacklist = SobBlacklist + opts.blacklist

def AssembleMailBody(version, subject, patchlines):
    # strip the real version used in our branch for the email
    bversion = version.split('y')[0]
    if opts.tversion:
        tversion_para = "\nThis patch is scheduled to be released in version " + opts.tversion + ".\n"
    else:
        tversion_para = ""
    mailbody = [
        "Subject: [" + version + " stable] Patch \"" + subject +
        "\" has been added to staging queue",
        "X-Extended-Stable: " + bversion[:-1],
        "",
        "This is a note to let you know that I have just added a patch titled",
        "",
        "    " + subject,
        "",
        "to the linux-" + bversion + "y-queue branch of the " + version +
        " extended stable tree ",
        "which can be found at:",
        "",
	"    http://kernel.ubuntu.com/git/ubuntu/linux.git/log/" +
		"?h=linux-" + bversion + "y-queue",
        tversion_para,
        "If you, or anyone else, feels it should not be added to this tree,"
        " please ",
        "reply to this email.",
        "",
        "For more information about the " + version + " tree, see",
        "https://wiki.ubuntu.com/Kernel/Dev/ExtendedStable",
        "",
        "Thanks.",
        "-" + opts.sender.split()[0],
        "",
        "------",
        ""
    ]
    for line in patchlines:
        mailbody.append(line)

    return mailbody

def ParsePatch(filename):
    try:
        fp = open(filename, "r")
    except:
        raise

    headers = Parser().parse(fp)
    # Make sure we get multiline headers correct
    author = headers['from'].replace("\n", "")
    subject = headers['subject'].replace("\n", "")
    fp.seek(0) # rewind file

    # Patches should be formatted using 'git format-patch -k' so that we
    # don't get the '[PATCH]'... but just in case we do:
    subject = sub("(\[PATCH[^\]]*\] )?", "", subject)

    slist = []
    patchlines = []
    pat = [ compile("^Signed-off-by:\s*", IGNORECASE),
            compile("^Reported-by:\s*", IGNORECASE),
            compile("^Reviewed-by:\s*", IGNORECASE),
            compile("^Cc:\s*", IGNORECASE),
            compile("^Acked-by:\s*", IGNORECASE) ]
    for line in fp.readlines():
        mailtgt = None
        for cp in pat:
            if cp.search(line):
                mailtgt = cp.sub("", line.rstrip())
                break
        if mailtgt:
            if (mailtgt != author):
                for entry in SobBlacklist:
                    if match(entry, mailtgt):
                        break
                else:
                    slist.append(mailtgt)

        patchlines.append(line.rstrip())

    fp.close()

    try:
        fp = NamedTemporaryFile(prefix="mail-")
    except:
        raise

    cmd = SendMailCmd + " --suppress-cc=all --8bit-encoding=UTF-8"
    cmd += " --from \"" + opts.sender + "\""
    #fp.write("To: " + author + "\n")
    cmd += " --to \"" + author.replace("\"", "\\\"").replace(",", "") + "\""
    for line in slist:
        #fp.write("Cc: " + line + "\n")
        cmd += " --cc \"" + line.replace("\"", "\\\"").replace(",", "") + "\""
    for line in DefaultCc:
        #fp.write("Cc: " + line + "\n")
        cmd += " --cc \"" + line.replace("\"", "\\\"").replace(",", "") + "\""
    for line in AssembleMailBody(opts.version, subject, patchlines):
        fp.write(line + "\n")
    fp.flush()

    if opts.novalidate:
        cmd += " --no-validate"

    if opts.dryrun:
        cmd += " --dry-run"

    cmd += " " + fp.name
    if opts.dryrun:
        print(cmd)
    ret = system(cmd)

    if opts.dryrun:
        system("cat " + fp.name)
    fp.close()
    return ret

perrors = []
for filename in args:
    print "Processing", filename, "..."
    if ParsePatch(filename):
        perrors.append(filename)
if perrors:
    print "Error while sending the following patches:"
    for p in perrors:
        print p

# vi:set ts=4 sw=4 expandtab:
