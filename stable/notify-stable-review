#!/usr/bin/env python
#

from os                                 import getenv, listdir, system
from sys                                import argv
from getopt                             import getopt, GetoptError
from commands                           import getstatusoutput
from tempfile                           import NamedTemporaryFile, mkdtemp
from shutil                             import move, rmtree
from string                             import whitespace
from subprocess                         import call
from ktl.utils                          import stdo, error, eout, run_command
from ktl.std_app                        import StdApp
from ktl.git                            import Git, GitError

# *** You may remove this comment block from your application
#
# This script is a template for applications which provides common
# functionality, command line, processing, and use of configuration
# files. In order to create a new script, run:
#
# init-script <class-name> <script-name>
#
# using the name of the script you'd like to create and the name
# for the main class wrapper inside it.
#
# *** You may remove this comment block from your application

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """

        app_name = self.cfg['app_name']
        stdo("""
  This utility is intended to be run after a set of stable patches are ready
  for review inside an stable upstream kernel process. It looks at a git
  branch with patches for review, and sends a notification email for the start
  of the review, plus all the patches as a response to the notification email.
  For more information, see:
  http://wiki.ubuntu.com/Kernel/Dev/ExtendedStable/Maintenance

    Usage:
        %s [--dry-run] [--from=<email address>]

    Options:
        --help           Prints this text.

        --dry-run        Run in test mode and do not really send out any mail.
                         This will also cause the mail bodies to be written to
                         stdout.

        --from=<email address>
                         Sets the sender of the notification email.  Default
                         is constructed from git config user.{name,email}

        --sent_cover_letter=<Message-Id>
                         (Optional and unusual) Assumes the cover letter has
                         already been sent as <Message-Id>, so passes that to
                         git-send-email as the --in-reply-to to be used (and
                         does not generate another cover letter).

        --edit_patch_dir
                         Starts a subshell in the directory of generated
                         patches just before sending to allow edits or
                         selective removal.

        --previous_release=<version tag or commit>
                         The tag or commit of the top of the previous stable
                         release, e.g. v3.16.7-ckt1, we will get the stable patches
                         from that up to HEAD.

        --new_version=<version string>
                         The version for the set of stable patches in review
                         to be released.  It's the new version to be displayed
                         in subject/body of the email announcement sent out,
                         e.g. 3.16.7-ckt2

        --no-validate
                         Send the --no-validate option to 'git send-email'.
                         Basically, it means that it won't check if a line
                         contains more than 998 characteres.

    Examples:
        %s --dry-run --previous_release=v3.16.7-ckt1 --new_version=3.16.7-ckt2
""" % ( app_name, app_name ))

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        self.cfg['app_name'] = argv[0]
        try:
            optsShort = ''
            optsLong  = ['help', 'dry-run', 'from=', 'previous_release=',
                    'new_version=', 'sent_cover_letter=', 'edit_patch_dir',
                    'no-validate' ]
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--dry-run'):
                    self.cfg['dry-run'] = True

                elif opt in ('--from'):
                    self.cfg['from'] = val

                elif opt in ('--previous_release'):
                    self.cfg['previous_release'] = val

                elif opt in ('--new_version'):
                    self.cfg['new_version'] = val

                elif opt in ('--sent_cover_letter'):
                    self.cfg['sent_cover_letter'] = val

                elif opt in ('--edit_patch_dir'):
                    self.cfg['edit_patch_dir'] = True

                elif opt in ('--no-validate'):
                    self.cfg['no-validate'] = True

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        """
        Used to verify that all required parameters are present and correct.
        """
        if 'previous_release' not in self.cfg:
            raise CmdlineError('--previous_release=<ref> must be specified.')
        if 'new_version' not in self.cfg:
            raise CmdlineError('--new_release=<str> must be specified.')
        return

# AppTemplate
#
class AppTemplate(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        self.debug_run = False
        self.tolist = [
            "linux-kernel@vger.kernel.org",
            "stable@vger.kernel.org",
            "kernel-team@lists.ubuntu.com"
        ]
        return

    # generate announcement message text
    #
    def message_text(self, base_ver, new_ver, patch_cnt, sender):
        branch="linux-%s-review" % base_ver
        return """
This is the start of the review cycle for the Linux %s stable
kernel.

This version contains %s new patches, summarized below.  The new patches
are posted as replies to this message and also available in this git branch:

http://kernel.ubuntu.com/git/ubuntu/linux.git/log/?h=%s

git://kernel.ubuntu.com/ubuntu/linux.git  %s

The review period for version %s will be open for the next three
days.  To report a problem, please reply to the relevant follow-up patch
message.

For more information about the Linux %s-ckt extended stable kernel
series, see https://wiki.ubuntu.com/Kernel/Dev/ExtendedStable .

 -%s

--
""" % ( new_ver, patch_cnt, branch, branch,
	new_ver, base_ver, sender.split()[0] )
        # end of def message_text

    # function to generate the announcement email (cover letter)
    #
    def generate_cover_letter(self, editor, sender, base_ver, main_ver):

        new_ver = self.cfg['new_version']
        old_head = self.cfg['previous_release']

        ann_ver = "%s-ckt" % base_ver

        # Get the number of patches, diffstat and shortlog from
        # previous release
        status, result = run_command("git log --no-merges "
                                     "--format=%%h %s.. | wc -l" %
                                    (old_head), self.debug_run)
        if status != 0:
            raise GitError("\n".join(result))
        patch_cnt = result[0]
        status, diffstat = getstatusoutput("git diff --stat %s.." %
                                           (old_head))
        if status != 0:
            raise GitError(diffstat)
        status, shortlog = getstatusoutput("git shortlog %s.." %
                                           (old_head))
        if status != 0:
            raise GitError(shortlog)

        mailbody = "# This is the cover letter message for the patch"
        mailbody += " series, that will be\n# sent as the start for"
        mailbody += " the review thread. Review this and edit+save"
        mailbody += " if\n# necessary. Lines beginning with '#' will"
        mailbody += " not be included in the sent\n# email.\n#\n"
        mailbody += "From: " + sender + '\n'
        for entry in self.tolist:
            mailbody += "To: " + entry + '\n'
        mailbody += ("Subject: [%s stable] Linux %s stable review"
                     % (ann_ver, new_ver) + "\n")
        mailbody += "X-Extended-Stable: %s\n" % (main_ver)
        mailbody += self.message_text(base_ver, new_ver, patch_cnt, sender)
        mailbody += diffstat + '\n\n'
        mailbody += shortlog
        tf = NamedTemporaryFile(prefix="pmail-")
        tf.write(mailbody)
        tf.flush()
        try:
            call([editor, tf.name])
        except:
            print("%s not found to edit cover letter for the patch series."
                  % editor)
            print("Please install an editor, if your system doesn't have")
            print(" /usr/bin/editor setup as alternatives, you can set the")
            print(" NSR_EDITOR environment variable pointing to the editor")
            print(" executable (eg. vim, nano, etc.)")
            tf.close()
            return
        tfe = NamedTemporaryFile(prefix="mail-")
        tf.seek(0)
        for line in tf:
            if line.startswith("#"):
                continue
            tfe.write(line)
        tfe.flush()
        tf.close()
        return tfe;

    # function to add headers to the patches
    #
    def modify_patch(self, patch, version, basever):
        header_line = "%s -stable review patch.  If anyone has any objections, please let me know." % (version)
        from_line = None
        subject = False
        header_add = False
        header_added = False
        with open(patch, 'r') as src:
            with NamedTemporaryFile(dir='./', delete=False) as dst:
                for line in src:
                    if header_added:
                        dst.write(line)
                        continue

                    # save to move from_line after header
                    if line.startswith("From:"):
                        from_line = line
                        continue

                    # strip out date
                    if line.startswith("Date:"):
                        continue

                    if not subject:
                        if 'Subject:' in line:
                            line = line.replace("Subject: [PATCH ",
                                                "Subject: [PATCH %s.y-ckt " % (basever))
                            subject = True

                    if subject and not header_add:
                        if line.strip() == '':
                            dst.write('X-Extended-Stable: %s\n' % (basever))
                            header_add = True
                            continue

                    if header_add:
                        dst.write('\n')
                        dst.write(header_line)
                        dst.write('\n\n---8<------------------------------------------------------------\n\n')
                        if from_line:
                            dst.write(from_line)
                            dst.write('\n')
                        header_added = True

                    dst.write(line)
                temp = dst.name
        move(temp, patch)

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.initialize()

            # Check: Are we currently in a git repository?
            if not Git.is_repo():
                raise GitError('This script can only be run from within a git repository.')

            # Try to get the default name and email address to make up the sender
            # from the environment.
            sender = ""
            if not 'from' in self.cfg:
                sender_name  = Git.config("user.name")
                sender_email = Git.config("user.email")
                if sender_email:
                    if sender_name:
                        sender = "%s <%s>" % (sender_name, sender_email)
                    else:
                        sender = sender_email
                else:
                    raise CmdlineError("Unable to determine the sender for the "
                                       "email (From: address). Set your "
                                       "git config user.{name,email} or use "
                                       "the --from option")
            else:
                sender = self.cfg['from']

            # Get editor to be used for opening the cover letter
            # (announcement) for the patch series, in case we want to
            # add some details or edit it for the occasion
            editor = getenv("NSR_EDITOR")
            if not editor:
                editor = "/usr/bin/editor"

            # Get and validate kernel version
            kver = [ "", "", "", "" ]
            with open('Makefile', 'r') as mf:
                for line in iter(mf):
                    val = None
                    idx = -1
                    tot = 0
                    t = line.translate(None, whitespace)
                    if t.startswith("VERSION="):
                        idx = 0
                    elif t.startswith("PATCHLEVEL="):
                        idx = 1
                    elif t.startswith("SUBLEVEL="):
                        idx = 2
                    elif t.startswith("EXTRAVERSION="):
                        idx = 3
                    if idx >= 0:
                        val = line.split('=', 1)[-1]
                        kver[idx] = val.strip()
                        tot += 1
                        if tot > 3:
                            break
            if not (kver[0] and kver[1] and kver[2]):
                raise Exception("Invalid kernel version in Makefile")
            # Increment release number
            # XXX: disabled, uneeded...
            #if kver[3]:
            #    d = 1
            #    while kver[3][-d] in digits:
            #        d += 1
            #    if d > 1:
            #        d -= 1
            #        prx = kver[3][0:len(kver[3])-d]
            #        num = int(kver[3][-d:]) + 1
            #        kver[3] = prx + str(num)
            #else:
            #    kver[2] = str(int(kver[2])+1)
            # Get the base version
            if kver[0] == "1" or kver[0] == "2":
                base_ver = "%s.%s.%s.y" % (kver[0], kver[1], kver[2])
                main_ver = "%s.%s.%s" % (kver[0], kver[1], kver[2])
            else:
                base_ver = "%s.%s.y" % (kver[0], kver[1])
                main_ver = "%s.%s" % (kver[0], kver[1])

            old_head = self.cfg['previous_release']
            new_ver = self.cfg['new_version']

            # Create emails and send them
            tmpdir = mkdtemp()
            status, result = run_command("git format-patch -o %s %s.." %
                                         (tmpdir, old_head))
            if status != 0:
                rmtree(tmpdir)
                raise GitError("\n".join(result))
            patches = listdir(tmpdir)
            for patch in patches:
                self.modify_patch(tmpdir + "/" + patch, new_ver, main_ver)

            if not 'sent_cover_letter' in self.cfg:
                tfe = self.generate_cover_letter(editor, sender, base_ver, main_ver)
                if not tfe:
                    rmtree(tmpdir)
                    return
            else:
                tfe = False

            if 'edit_patch_dir' in self.cfg:
                print "\n\n"
                print "*** You are now in a sub-shell in %s ." % tmpdir
                print "*** Remove or edit these patch files as desired."
                print "*** When you 'exit' all remaining files will be sent.\n"
                cmd = "cd %s ; bash ;" % tmpdir
                system(cmd)

            cmd = "git send-email --no-chain-reply-to "
            cmd += "--from \"" + sender + "\""
            for line in self.tolist:
                cmd += " --to \"" + line + "\""
            if 'dry-run' in self.cfg:
                cmd += " --dry-run"
            if 'no-validate' in self.cfg:
                cmd += " --no-validate"
            cmd += " --8bit-encoding UTF-8"
            if 'sent_cover_letter' in self.cfg:
                cmd += " --no-thread"
                cmd += " --in-reply-to " + self.cfg['sent_cover_letter']
            else:
                cmd += " --thread"
                cmd += " " + tfe.name
            cmd += " " + tmpdir + "/*.patch"
            system(cmd)

            if tfe:
                if 'dry-run' in self.cfg:
                    print "\n\n"
                    tfe.seek(0)
                    for line in tfe:
                        stdo(line)
                tfe.close()

            rmtree(tmpdir)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        except GitError as e:
            eout(e.msg)

        return

if __name__ == '__main__':
    app = AppTemplate()
    app.main()

# vi:set ts=4 sw=4 expandtab:
