#!/usr/bin/env python
#
# TODO:
#      run as a daemon
#      check for lock before running sru-workflow-manager
#      tell someone that sru-workflow-manager is currently running if they ask
#      provide status of current sru bugs
#      provide list of current sru bugs
#

import os
import errno
import string
import random
import re
import json
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import error, debug, basicConfig, INFO, DEBUG, WARNING
from time                               import sleep
from threading                          import Thread, Event
from ktl.ircbot                         import SingleServerIRCBot
from ktl.irclib                         import nm_to_n, irc_lower
from ktl.shell                          import sh, ShellError
import urllib
from launchpadlib.launchpad             import Launchpad

# The named pipe used for getting messages from the sru workflow manager.
#
shank_pipe_path = "/tmp/shank.pipe"

# Pinky's exclamations.
#
exclamations = [
    "Narf!",
    "Zort!",
    "Nogg!",
    "Poit!",
    "Oooo!"
]

you_are_welcome = [
    "De nada",
    "No worries, mate",
    "De res",
    "De rien",
    "Prego",
    "Aw, shucks, ma'am. 'Tweren't nothin'"
]

# Pinky's ponderings.
#
ponderings = [
    "I think so, Brain, but where are we going to find a duck and a hose at this hour?",
    "I think so, but where will we find an open tattoo parlor at this time of night?",
    "Wuh, I think so, Brain, but if we didn't have ears, we'd look like weasels.",
    "Uh... yeah, Brain, but where are we going to find rubber pants our size?",
    "Uh, I think so, Brain, but balancing a family and a career ... ooh, it's all too much for me.",
    "Wuh, I think so, Brain, but isn't Regis Philbin already married?",
    "Wuh, I think so, Brain, but burlap chafes me so.",
    "Sure, Brain, but how are we going to find chaps our size?",
    "Uh, I think so, Brain, but we'll never get a monkey to use dental floss.",
    "Uh, I think so Brain, but this time, you wear the tutu.",
    "I think so, Brain, but culottes have a tendency to ride up so.",
    "I think so, Brain, but if they called them 'Sad Meals', kids wouldn't buy them!",
    "I think so, Brain, but me and Pippi Longstocking -- I mean, what would the children look like?",
    "I think so, Brain, but this time *you* put the trousers on the chimp.",
    "Well, I think so, Brain, but I can't memorize a whole opera in Yiddish.",
    "I think so, Brain, but there's still a bug stuck in here from last time.",
    "Uh, I think so, Brain, but I get all clammy inside the tent.",
    "I think so, Brain, but I don't think Kay Ballard's in the union.",
    "Yes, I am!",
    "I think so, Brain, but, the Rockettes? I mean, it's mostly girls, isn't it?",
    "I think so, Brain, but pants with horizontal stripes make me look chubby.",
    "Well, I think so -POIT- but *where* do you stick the feather and call it macaroni?",
    "Well, I think so, Brain, but pantyhose are so uncomfortable in the summertime.",
    "Well, I think so, Brain, but it's a miracle that this one grew back.",
    "Well, I think so, Brain, but first you'd have to take that whole bridge apart, wouldn't you?",
    "Well, I think so, Brain, but 'apply North Pole' to what?",
    "I think so, Brain, but 'Snowball for Windows'?",
    "Well, I think so, Brain, but *snort* no, no, it's too stupid!",
    "Umm, I think so, Don Cerebro, but, umm, why would Sophia Loren do a musical?",
    "Umm, I think so, Brain, but what if the chicken won't wear the nylons?",
    "I think so, Brain, but isn't that why they invented tube socks?",
    "Well, I think so Brain, but what if we stick to the seat covers?",
    "I think so Brain, but if you replace the 'P' with an 'O', my name would be Oinky, wouldn't it?",
    "Oooh, I think so Brain, but I think I'd rather eat the Macarana.",
    "Well, I think so *hiccup*, but Kevin Costner with an English accent?",
    "I think so, Brain, but don't you need a swimming pool to play Marco Polo?",
    "Well, I think so, Brain, but do I really need two tongues?",
    "I think so, Brain, but we're already naked.",
    "We eat the box?",
    "Well, I think so, Brain, but if Jimmy cracks corn, and no one cares, why does he keep doing it?",
    "I think so, Brain *NARF*, but don't camels spit a lot?",
    "I think so, Brain, but how will we get a pair of Abe Vigoda's pants?",
    "I think so, Brain, but Pete Rose? I mean, can we trust him?",
    "I think so, Brain, but why would Peter Bogdanovich?",
    "I think so, Brain, but isn't a cucumber that small called a gherkin?",
    "I think so, Brain, but if we get Sam Spade, we'll never have any puppies.",
    "I think so, Larry, and um, Brain, but how can we get seven dwarves to shave their legs?",
    "I think so, Brain, but calling it pu-pu platter? Huh, what were they thinking?",
    "I think so, Brain, but how will we get the Spice Girls into the paella?",
    "I think so, Brain, but if we give peas a chance, won't the lima beans feel left out?",
    "I think so, Brain, but if we had a snowmobile, wouldn't it melt before summer?",
    "I think so, Brain, but what kind of rides do they have in Fabioland?",
    "I think so, Brain, but can the Gummi Worms really live in peace with the Marshmallow Chicks?",
    "Wuh, I think so, Brain, but wouldn't anything lose it's flavor on the bedpost overnight?",
    "I think so, Brain, but three round meals a day wouldn't be as hard to swallow.",
    "I think so, Brain, but if the plural of mouse is mice, wouldn't the plural of spouse be spice?",
    "Umm, I think so, Brain, but three men in a tub? Ooh, that's unsanitary!",
    "Yes, but why does the chicken cross the road, huh, if not for love?  (sigh)  I do not know.",
    "Wuh, I think so, Brain, but I prefer Space Jelly.",
    "Yes Brain, but if our knees bent the other way, how would we ride a bicycle?",
    "Wuh, I think so, Brain, but how will we get three pink flamingos into one pair of Capri pants?",
    "Oh Brain, I certainly hope so.",
    "I think so, Brain, but Tuesday Weld isn't a complete sentence.",
    "I think so, Brain, but why would anyone want to see Snow White and the Seven Samurai?",
    "I think so, Brain, but then my name would be Thumby.",
    "I think so, Brain, but I find scratching just makes it worse.",
    "I think so, Brain, but shouldn't the bat boy be wearing a cape?",
    "I think so, Brain, but why would anyone want a depressed tongue?",
    "Um, I think so, Brainie, but why would anyone want to Pierce Brosnan?",
    "Methinks so, Brain, verily, but dost thou think Pete Rose by any other name would still smell as sweaty?",
    "I think so, Brain, but wouldn't his movies be more suitable for children if he was named Jean-Claude van Darn?",
    "Wuh, I think so, Brain, but will they let the Cranberry Dutchess stay in the Lincoln Bedroom?",
    "I think so, Brain, but why does a forklift have to be so big if all it does is lift forks?",
    "I think so, Brain, but if it was only supposed to be a three hour tour, why did the Howells bring all their money?",
    "I think so, Brain, but Zero Mostel times anything will still give you Zero Mostel.",
    "I think so, Brain, but if we have nothing to fear but fear itself, why does Elanore Roosevelt wear that spooky mask?",
    "I think so, Brain, but what if the hippopotamus won't wear the beach thong?",
]

class OutputManager(Thread):
    def __init__(s, connection, delay=.5):
        Thread.__init__(s)
        s.setDaemon(1)
        s.connection = connection
        s.delay = delay
        s.event = Event()
        s.queue = []
        s.notice_queue = []

    def run(s):
        while 1:
            s.event.wait()
            while s.queue:
                msg,target = s.queue.pop(0)
                try:
                    s.connection.privmsg(target, msg)
                except:
                    s.connection.privmsg(target, "I tried, but doing that made me puke.")
                sleep(s.delay)
            while s.notice_queue:
                msg,target = s.notice_queue.pop(0)
                try:
                    s.connection.notice(target, msg)
                except:
                    s.connection.privmsg(target, "I tried, but doing that made me puke.")
                sleep(s.delay)
            s.event.clear()

    def send(s, msg, target):
        debug('OutputManager::send')
        debug('       msg: %s' % msg)
        debug('    target: %s' % target)
        s.queue.append((msg,target))
        s.event.set()

    def notice(s, msg, target):
        debug('OutputManager::notice')
        debug('       msg: %s' % msg)
        debug('    target: %s' % target)
        s.notice_queue.append((msg,target))
        s.event.set()

# ErrorExit
#
class ErrorExit(Exception):
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    def __init__(self, emsg):
        self.__message = emsg

    @property
    def message(self):
        '''
        The shell command that was being executed when the timeout occured.
        '''
        return self.__message

import Queue
import threading
import time

g_exit_flag = 0
g_q_lock = threading.Lock()
g_work_q = Queue.Queue(10)

class Shankster(threading.Thread):
    # __init__
    #
    def __init__(s, q, output):
        threading.Thread.__init__(s)
        s.q = q
        s.output = output
        s.exit_flag = False
        s.lp = Launchpad.login_anonymously(s.__class__.__name__, 'production')

    # run
    #
    def run(s):

        try:
            os.mkfifo(shank_pipe_path)
        except OSError:
            pass

        s.shank_pipe = os.open(shank_pipe_path, os.O_RDONLY |os.O_NONBLOCK)
        s.every_30_minutes()
        s.every_30_seconds()
        while not s.exit_flag:
            g_q_lock.acquire()
            if not s.q.empty():
                data = s.q.get()
                g_q_lock.release()

                cmd = data['cmd']
                who = data['who']
                target = data['target']
                if 'shank' == cmd:
                    try:
                        (rc, output) = sh('./swm')
                        s.output.reply(who + ', ' + 'I shanked them all', target)
                    except ShellError as e:
                        for l in e.output:
                            s.output.reply(who + ', ' + l)

                elif cmd.startswith('shank '):
                    if ' ' in cmd:
                        # Another arg parser here would probably be the right thing.
                        cmd = cmd.split()
                        sh_cmd = './swm --debug --verbose --bugs=%s' % cmd[1]
                        try:
                            (rc, output) = sh(sh_cmd)
                            s.output.reply(who + ', ' + 'bug %s has been shanked' % (cmd[1]), target)
                            with open("/tmp/shanky.log", "w") as f:
                                for l in output:
                                    f.write(l)
                        except ShellError as e:
                            for l in e.output:
                                s.output.reply(who + ', ' + l)

                elif cmd.startswith('update '):
                    c = cmd.split()
                    location = '/srv/kernel.ubuntu.com/www/sru'
                    if 'reports' in c[1]:
                        sh_cmd = '(cd %s;make shankbot)' % location
                        try:
                            (rc, output) = sh(sh_cmd)
                            s.output.reply(who + ', ' + 'reports updated', target)
                        except ShellError as e:
                            for l in e.output:
                                s.output.reply(who + ', ' + l)

                    elif c[1].endswith('.html'):
                        sh_cmd = '(cd %s;make %s)' % (location, c[1])
                        try:
                            (rc, output) = sh(sh_cmd)
                            s.output.reply(who + ', ' + '%s updated' % (c[1]), target)
                        except ShellError as e:
                            for l in e.output:
                                s.output.reply(who + ', ' + l)

                elif cmd.startswith('bug:'):
                    s.bug_lookup(cmd, who, target)

                elif cmd.startswith('test '):
                    s.handle_test_request(cmd, who, target)

                elif cmd.startswith('check your privates'):
                    s.handle_check_request()
                    s.output.reply(who +', ' + 'All checked', target)

                else:
                    s.output.reply(who + ', ' + 'sorry, I don\'t know how to do that', target)

            else:
                g_q_lock.release()

            time.sleep(1)
        os.close(s.shank_pipe)

    # handle_test_request
    #
    def handle_test_request(s, cmd, who, target):
        print("cmd: '%s'" % cmd)
        sh_cmd = cmd.replace('test', 'request submit')
        try:
            (rc, output) = sh(sh_cmd)
            s.output.reply(who + ', ' + 'your test request has been queued up', target)
            if '--help' in sh_cmd:
                for l in output:
                    s.output.reply(who + ', ' + l)

            with open("/tmp/shanky.log", "w") as f:
                for l in output:
                    f.write(l)

        except ShellError as e:
            for l in e.output:
                s.output.reply(who + ', ' + l)

    # every_30_minutes
    #
    def every_30_minutes(s):
        """
        Perform certain operations regularly.
        """
        if not s.exit_flag:
            s.handle_check_request()
            threading.Timer((60*30), s.every_30_minutes, [], {}).start()

    # handle_check_request
    #
    def handle_check_request(s):
        """
        Pull the bug list that the CVE tools generate and see if any of them are
        private. If they are, tell the world.
        """
        try:
            f = urllib.urlopen('http://people.canonical.com/~kernel/status/bug-pending')
            data = f.read().split('\n')
            for l in data:
                if l == '': continue
                v = l.split()
                try:
                    lp_bug = s.lp.bugs[v[0]]
                except:
                    # This must be a private bug
                    #
                    s.output.notice("NOTICE:  %s %s appears to have a commit with private bug LP: #%s as the buglink" % (v[1].title(), v[2], v[0]))

        except:
            s.output.notice("NOTICE: The urllib.urlopen failed. Is the http://people.canonical.com/~kernel/status/bug-pending missing?")
            raise

    # every_30_seconds
    #
    def every_30_seconds(s):
        """
        Perform certain operations regularly.
        """
        if not s.exit_flag:
            s.check_the_pipe()
            threading.Timer(30, s.every_30_seconds, [], {}).start()

    # check_the_pipe
    #
    def check_the_pipe(s):
        """
        Check the communication pipe to see if there are any messages to be
        relayed to the irc channel.
        """
        while True:
            try:
                msg = os.read(s.shank_pipe, 1024)
            except OSError as err:
                if err.errno == errno.EAGAIN or err.errno == errno.EWOULDBLOCK:
                    msg = None
                else:
                    raise

            if msg == '':
                break

            if msg is not None:
                for x in msg.split('\n'):
                    s.output.notice(x.strip())

    # bug_lookup
    #
    def bug_lookup(s, cmd, who, target):
        print("cmd: '%s'" % cmd)
        bug_id = cmd.replace('bug:', '')
        try:
            lp_bug = s.lp.bugs[bug_id]
            s.output.reply('"%s"     https://launchpad.net/bugs/%s' % (lp_bug.title, bug_id))
        except:
            # This must be a private bug
            #
            s.output.reply("LP: #%s may be private (I can't find it in LP)." % bug_id)

# IrcShankbot
#
class IrcShankbot(SingleServerIRCBot):
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        SingleServerIRCBot.__init__(s, [(args.server, args.port, args.password)], args.nick, args.nick, ssl=True)
        s.channel = args.channel
        s.nickname = args.nick
        s.queue = OutputManager(s.connection)
        s.queue.start()
        s.args = args

        s.threads = []
        thread = Shankster(g_work_q, s)
        thread.start()
        s.threads.append(thread)

    def on_nicknameinuse(s, c, e):
        s.nickname = c.get_nickname() + "_"
        c.nick(s.nickname)

    def on_welcome(s, c, e):
        c.join(s.channel)
        s.reply('\\o/')

    def on_privmsg(s, c, e):
        debug('on_privmsg event:')
        debug('       source: \'%s\'' % e.source())
        debug('         type: \'%s\'' % e.eventtype())
        debug('       target: \'%s\'' % e.target())
        debug('    arguments: \'%s\'' % e.arguments())
        from_nick = nm_to_n(e.source())
        s.do_command(e, e.arguments()[0], from_nick)

    def on_pubmsg(s, c, e):
        debug('on_pubmsg event:')
        debug('       source: \'%s\'' % e.source())
        debug('         type: \'%s\'' % e.eventtype())
        debug('       target: \'%s\'' % e.target())
        debug('    arguments: \'%s\'' % e.arguments())
        from_nick = nm_to_n(e.source())
        a = re.split(":|,| ", e.arguments()[0], 1)
        if irc_lower(a[0]) == irc_lower(s.nickname):
            if len(a) > 1:
                s.do_command(e, string.strip(a[1]), from_nick)
        else:
            m = re.findall('(?i)(?:bugs?[ /]#?([0-9]+)|(?:^|\W)#([0-9]{5,}))', e.arguments()[0])
            if m:
                debug('stage 1')
                for g in m:
                    for bug_id in g:
                        if bug_id is not '':
                            s.do_command(e, 'bug:%s' % bug_id, from_nick)

            else:
                m = re.findall('\\b[lL][pP]:?\s?#?([0-9]+)(,\s*#?[0-9]+)*\\b', e.arguments()[0])
                if m:
                    debug('stage 2')
                    for g in m:
                        for bug_id in g:
                            if bug_id is not '':
                                s.do_command(e, 'bug:%s' % bug_id, from_nick)

        return

    def say_public(s, text):
        "Print TEXT into public channel, for all to see."
        s.queue.send(text, s.channel)

    def say_private(s, nick, text):
        "Send private message of TEXT to NICK."
        s.queue.send(text,nick)

    def notice(s, text):
        s.queue.notice(text, s.channel)

    def reply(s, text, to_private=None):
        "Send TEXT to either public channel or TO_PRIVATE nick (if defined)."

        if to_private is not None:
            s.say_private(to_private, text)
        else:
            s.say_public(text)

    def ponder_something(s):
        "Return a random string indicating what Pinky's pondering."
        return random.choice(ponderings)

    def exclaim_something(s):
        "Return a random exclamation string."
        return random.choice(exclamations)

    def say_your_welcome(s):
        return random.choice(you_are_welcome)

    def enqueue_cmd(s, who, cmd, target):
        g_q_lock.acquire()
        print('queueing: "%s"' % cmd)
        g_work_q.put({'who': who, 'cmd':cmd, 'target':target})
        g_q_lock.release()

    def do_command(s, e, cmd, from_private):
        """
        This is the function called whenever someone sends a public or
        private message addressed to the bot. (e.g. "bot: blah").  Parse
        the CMD, execute it, then reply either to public channel or via
        /msg, based on how the command was received.  E is the original
        event, and FROM_PRIVATE is the nick that sent the message.
        """

        who = from_private.strip()

        if e.eventtype() == "pubmsg":
            # s.reply() sees 'from_private = None' and sends to public channel.
            target = None
        else:
            # assume that from_private comes from a 'privmsg' event.
            target = from_private.strip()

        debug("do_command: '%s'   target: '%s'" % (cmd, from_private))

        if cmd == 'die':
            for t in s.threads:
                t.exit_flag = True
            s.die()

        elif cmd == 'help':
            s.reply(who + ', ' + 'Version: 0.1', target)
            s.reply(who + ', ' + 'I\'m not very smart (I\'m based on a pinky bot) but I know how to:', target)
            s.reply(who + ', ' + ' ', target)
            s.reply(who + ', ' + '  shank [<bugid>]', target)
            s.reply(who + ', ' + '         Run the sru-workflow-manager on one or all of the currently active sru workflow bugs', target)
            s.reply(who + ', ' + '  die', target)
            s.reply(who + ', ' + '         The bot will exit. Since it is normally running via a cron job, it will start up again', target)
            s.reply(who + ', ' + '         fairly soon after exiting.', target)
            s.reply(who + ', ' + '  update', target)
            s.reply(who + ', ' + '         Perform a \'git pull\' on the repository where the bot is running. This, in combination', target)
            s.reply(who + ', ' + '         with \'die\' is a way to make changes to the bot code and get it to restart. Or, to get', target)
            s.reply(who + ', ' + '         any of the other code (sru-workflow-manager) updated remotely.', target)
            s.reply(who + ', ' + '  update reports', target)
            s.reply(who + ', ' + '         Update the kernel-sru-workflow.html and kernel-stable-dashboard.html reports', target)
            s.reply(who + ', ' + '  update <report>', target)
            s.reply(who + ', ' + '         Update a specific report (you need to know what you are doing)', target)
            s.reply(who + ', ' + '  moin', target)
            s.reply(who + ', ' + '         replies with "moin"', target)
            s.reply(who + ', ' + ' ', target)
            s.reply(who + ', ' + 'Also, if asked "are you thinking what I\'m thinking?" or "are you pondering what I\'m pondering?"', target)
            s.reply(who + ', ' + 'I\'ll say something that pinky would have said. And if I don\'t understand what you are asking, I\'ll,', target)
            s.reply(who + ', ' + 'just make a noise.', target)

        elif cmd == 'moin':
            s.reply(who + ', moin', target)

        elif cmd == 'update':
            (rc, output) = sh('git pull', ignore_result=True)
            for line in output:
                s.reply(who + ', ' + line, target)

        elif 'status' == cmd:
            s.reply(who + ', ' + 'ack, this is going to take a minute or two', target)
            origin = os.getcwd()
            try:
                os.chdir('../web')
                sh('make kernel-sru-workflow.json', ignore_result=True)
                with open('kernel-sru-workflow.json', 'r') as f:
                    sru_bugs = json.loads(f.read())
            finally:
                os.chdir(origin)

        elif 'shank' == cmd:
            s.enqueue_cmd(who, cmd, target)
            s.reply(who + ', ' + 'gimme some love boss', target)

        elif cmd.startswith('shank '):
            s.enqueue_cmd(who, cmd, target)
            s.reply(who + ', ' + 'roger, roger', target)

        elif cmd.startswith('bug:'):
            s.enqueue_cmd(who, cmd, target)

        elif cmd.startswith('thank'):
            s.reply(who + ', ' + s.say_your_welcome(), target)

        elif cmd.startswith('update '):
            s.enqueue_cmd(who, cmd, target)
            s.reply(who + ', ' + 'I\'m on it boss', target)

        elif cmd.startswith('test '):
            s.enqueue_cmd(who, cmd, target)
            s.reply(who + ', ' + 'roger, roger', target)

        elif cmd.startswith('check'):
            s.enqueue_cmd(who, cmd, target)
            s.reply(who + ', ' + 'roger, roger', target)

        elif cmd.startswith('notice'):
            s.enqueue_cmd(who, cmd, target)
            s.reply(who + ', ' + 'roger, roger', target)

        else:

            expected1 = "are you thinking what I'm thinking?"
            expected2 = "are you pondering what I'm pondering?"

            # Be forgiving about capitalization and whitespace.
            cmd = cmd.replace(" ", "").lower()
            expected1 = expected1.replace(" ", "").lower()
            expected2 = expected2.replace(" ", "").lower()

            if cmd == expected1 or cmd == expected2:
                s.reply(s.ponder_something(), target)
            else:
                s.reply(who + ', ' + 'sorry, I don\'t know how to do that', target)
                s.reply(who + ', ' + s.exclaim_something(), target)

    # run
    #
    def run(s):
        retval = 1
        try:
            if not os.path.exists('./sru-workflow-manager'):
                raise ErrorExit('Unable to find "./sru-workflow-manager". The bot must be run from the same directory that contains the sru-workflow-manager script\nwithin the kteam-tools repository.')

            if not os.path.exists('../web/Makefile'):
                raise ErrorExit('Unable to find "../web/Makefile". The bot must be run from the same directory that contains the sru-workflow-manager script\nwithin the kteam-tools repository.')

            s.start()
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        except ErrorExit as e:
            error(e.message)

        while not g_work_q.empty():
            pass

        for t in s.threads:
            t.exit_flag = True
            if t.is_alive():
                t.join()

        s.die()

        return retval

if __name__ == '__main__':
    if os.getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    LOGLEVEL = WARNING
    basicConfig(level=LOGLEVEL, format="%(levelname)s - %(message)s")

    app_description = '''
    Usage: shankbot --server=<server[:port]> --channel=<channel> --nick=<nickname> --user=<username[:password]>
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--server',  required=True,  type=str, help='The irc server to be connected to. The port is specified by separating the server name from the port with a \':\'.')
    parser.add_argument('--nick',    required=True,  type=str, help='Irc nickname to use.')
    parser.add_argument('--channel', required=True,  type=str, help='The channel the bot is to join.')
    parser.add_argument('--user',    required=True,  type=str, help='The username to use to connect to the server. If the string contains a \':\' the password follows the \':\'.')
    args = parser.parse_args()

    setattr(args, 'port', 6667)
    if ':' in args.server:
        (s, p) = args.server.split(':', 1)
        args.port = int(p)
        args.server = s

    if ':' in args.user:
        (u, p) = args.user.split(':', 1)
        setattr(args, 'password', p)
        args.user = u

    app = IrcShankbot(args)
    exit(app.run())

# vi:set ts=4 sw=4 expandtab syntax=python:
