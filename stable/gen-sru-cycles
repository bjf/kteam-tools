#!/usr/bin/env python3
#

from datetime                           import datetime, timedelta
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
import re

# ErrorExit
#
class ErrorExit(Exception):
    def __init__(s, emsg):
        s.message = emsg

# TheApp
#
class TheApp(object):
    '''
    '''
    # sd
    #
    def sd(s, start):
        '''
        Starting date. Take the string passed in, verify it's a date we recognize and then pull it
        appart into the pieces that we need, returning a datetime object.
        '''
        start_rc = re.compile("^\d\d\.\d\d\.\d\d\d\d$")
        m = start_rc.match(start)
        if m is not None:
            d, m, y = start.split('.')
            t = datetime.strptime(start, '%d.%m.%Y')

            # Verify that the starting date is a friday.
            #
            if t.isoweekday() != 5:
                raise ErrorExit('The date specified must be for the cuttoff date for an SRU cycle.')
        else:
            print('Badly formed date. Must be in d.m.y format where day and month are 2 digits and the year is 4.\nFor example: "20.05.2016" for 5 May, 2016.')
        return t

    # print_cycle
    #
    def print_cycle(s, sd):
        ed = sd + timedelta(days=22)

        print('')
        print('cycle: %s through %s' % (sd.strftime('%d-%b'), ed.strftime('%d-%b')))
        print('====================================================================')
        print('         %s   Last day for kernel commits for this cycle.' % (sd.strftime('%d-%b')))
        print('%s - %s   Kernel prep week.' % ((sd + timedelta(days=3)).strftime('%d-%b'), (sd + timedelta(days=8)).strftime('%d-%b')))
        print('%s - %s   Bug verification & Regression testing.' % ((sd + timedelta(days=9)).strftime('%d-%b'), (sd + timedelta(days=21)).strftime('%d-%b')))
        print('         %s   Release to -updates.' % ((sd + timedelta(days=24)).strftime('%d-%b')))
        print('')

    # main
    #
    def main(s, args):
        retval = 0

        sd = s.sd(args.start)
        for i in range(0, 10):
            s.print_cycle(sd)
            sd = sd + timedelta(days=21)

        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    Calculate the dates for the next 10 SRU cycles specifying the Friday that is to be the cuttoff date
    for the very first cycle.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('start', nargs=1, type=str, help='Start format: D.M.Y  (18.11.2016 for Nov. 18, 2016)')

    args = parser.parse_args()
    args.start = args.start[0]

    try:
        app = TheApp()
        retval = app.main(args)
    except ErrorExit as e:
        print('\n*** Error:')
        print('      %s\n' % e.message)

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
