#!/usr/bin/env python
#

from os                                 import path, chmod, stat
from stat                               import S_IEXEC
from sys                                import argv, stderr
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        When instantiated, we go ahead and make our initial connection to Launchpad and
        get signed in.
        '''
        s.args = args

    # main
    #
    def main(s):
        retval = 1
        try:
            template_file = path.dirname(argv[0]) + '/' + 'app-template'
            if path.exists(template_file):

                with open(template_file, 'r') as template:
                    with open(s.args.script_name, 'w') as f:
                        for line in template.readlines():
                            line = line.rstrip()
                            line = line.replace('AppTemplate', s.args.script_class)

                            f.write(line)
                            f.write('\n')

                st = stat(s.args.script_name)
                chmod(s.args.script_name, st.st_mode | S_IEXEC)
            else:
                stderr.write("   *** Error: The template file (%s) does not exist.\n" % (template_file))

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        return retval


if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I give you a python skeleton that you can start with for your new script.
    '''
    app_epilog = '''
examples:
    init-script Grepper my-grep
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('script_class',  metavar='script_class',   type=str, nargs='+', help='The class that is to be created in the script.')
    parser.add_argument('script_name',   metavar='script_name',   type=str, nargs='+', help='The file name of the new script.')
    args = parser.parse_args()

    args.script_name = args.script_name[0]
    args.script_class = args.script_class[0]

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    basicConfig(level=INFO, format=log_format)

    app = TheApp(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:
