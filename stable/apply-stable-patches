#!/usr/bin/env python
#

from sys                                import argv
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error, run_command, eout
from ktl.std_app                        import StdApp
from ktl.git                            import Git, GitError
from re                                 import compile, IGNORECASE, MULTILINE
from commands                           import getstatusoutput
from ktl.kernel                         import Kernel
from os                                 import path, mkdir, remove, rename, getenv
from shutil                             import move
from tempfile                           import NamedTemporaryFile

# *** You may remove this comment block from your application
#
# This script is a template for applications which provides common
# functionality, command line, processing, and use of configuration
# files. In order to create a new script, run:
#
# init-script <class-name> <script-name>
#
# using the name of the script you'd like to create and the name
# for the main class wrapper inside it.
#
# *** You may remove this comment block from your application

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        app_name = self.cfg['app_name']
        stdo("""    Usage:
        %s --range=<git rev> --sob=<sob> [--verbose] [--config=<cfg file>] [--debug=<dbg options>]

    Options:
        --help           Prints this text.

        --range=<git rev>
                         Git base revision or range of commits to check for
                         stable commits to apply

        --sob            Add 'Signed-off-by:' line to the patches

        --check-fixes    Also check for commits that have not been tagged for stable
                         but that contain a 'Fixes: <SHA1>' line for a SHA1 that is
                         on the current branch.  A new directory ('Possible-Fixes')
                         will be created with these patches, but they will NOT be
                         applied.

        --check-already  Check for already committed ('commit {sha} upstream.')
                         patches

        --stop-on-fail   Stop processing if a patch fails to apply

        --name=<full name>
                         Name to use for the SOB line.
                         Default is git config user.name

        --email=<email address>
                         Email address for the SOB line.
                         Default is git config user.email

        --verbose        Give some feedback of what is happening while the
                         script is running.

        --config=<cfg file>
                         The full path to the configuration file to use instead
                         of the default location.

        --debug=<debug options>
                         Performs additional output related to the option
                         enabled and the application defined support for the
                         option.

    Examples:
        %s --verbose
        %s --check-already --sob --range=v3.8..master
""" % ( app_name, app_name, app_name ))

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'range=', 'sob', 'verbose', 'config=',
                         'check-already', 'stop-on-fail', 'check-fixes',
                          'debug=', 'name=', 'email=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif opt in ('--range'):
                    self.cfg['range'] = val

                elif opt in ('--sob'):
                    self.cfg['sob'] = ''

                elif (opt == '--check-already'):
                    self.cfg['check_already'] = True

                elif (opt == '--check-fixes'):
                    self.cfg['check_fixes'] = True

                elif (opt == '--stop-on-fail'):
                    self.cfg['stop_on_fail'] = True

                elif opt in ('--name'):
                    self.cfg['name'] = val

                elif opt in ('--email'):
                    self.cfg['email'] = val

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        if 'sob' in self.cfg:
            if 'name' not in self.cfg:
                self.cfg['name'] = Git.config("user.name")
            if 'email' not in self.cfg:
                self.cfg['email'] = Git.config("user.email")

            if self.cfg['name'] == None or self.cfg['email'] == None:
                raise CmdlineError('You need to either configure your git user.{name,email} or use --name and --email')

            self.cfg['sob'] = "Signed-off-by: " + self.cfg['name'] + " <" + self.cfg['email'] + ">"

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        """
        Used to verify that all required parameters are present and correct.
        """
        return

class KernelVersion:
    version = None
    patchlevel = None
    sublevel = None

    # __init__
    #
    def __init__(self, kver):
        if isinstance(kver, basestring):
            kver = kver.split('.')
            if len(kver) > 1:
                try:
                    self.version = int(kver[0])
                except ValueError:
                    self.version = None
                try:
                    self.patchlevel = int(kver[1])
                except ValueError:
                    self.patchlevel = None
            if len(kver) > 2:
                try:
                    self.sublevel = int(kver[2])
                except ValueError:
                    self.sublevel = None
            else:
                # sublevel is optional: if not specified, assume 0
                self.sublevel = 0

    # compare against current kernel version
    # returns:
    # -1 if version is less than given parameter
    #  0 if version is equal to given parameter
    #  1 if version is greater than given paramter
    def compare(self, kver):
        if self.version < kver.version:
            return -1
        if self.version > kver.version:
            return 1
        if self.patchlevel < kver.patchlevel:
            return -1
        if self.patchlevel > kver.patchlevel:
            return 1
        if self.sublevel < kver.sublevel:
            return -1
        if self.sublevel > kver.sublevel:
            return 1
        return 0

# ApplyStablePatches
#
class ApplyStablePatches(StdApp):
    debug_run = False

    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = { 'git_repo_upstream' : 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git' }

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        return

    # function to add sob and "commit <hash> upstream" line to the patch
    #
    def modify_patch(self, patch, uhash, sob, stable_re):
        commit_line = 'commit %s upstream.' % (uhash)
        subject = False
        hash_add = False
        hash_added = False
        sob_added = False
        with open(patch, 'r') as src:
            with NamedTemporaryFile(dir='./', delete=False) as dst:
                for line in src:
                    if sob_added:
                        dst.write(line)
                        continue

                    if not subject:
                        if 'Subject:' in line:
                            subject = True

                    if subject and not hash_add:
                        if line.strip() == '':
                            hash_add = True
                            continue

                    if hash_add and not hash_added:
                        if not commit_line in line:
                            dst.write('\n')
                            dst.write(commit_line)
                            dst.write('\n\n')
                        hash_added = True

                    if hash_added and 'Signed-off-by:' in line:
                        if line.strip() == sob:
                            continue

                    if hash_added and stable_re.search(line):
                        if 'verbose' in self.cfg:
                            print("\nDropped '%s' line from patch" % (line.rstrip()))
                        continue

                    if hash_added and line.strip() == '---':
                        dst.write(sob)
                        dst.write('\n')
                        sob_added = True

                    dst.write(line)
                temp = dst.name
        rename(temp, patch)

    # Check if we have SHA1 in the current branch
    def check_fix(self, sha1, branch, merge_base):
        # First, look for stable updates commits since the merge base:
        # Look for commits with "commit <SHA1> upstream." ...
        status, res = run_command("git log -1 --grep='^commit %s.* upstream.$' %s..HEAD" % (sha1, merge_base))
        if status != 0:
            stdo("\nError processing fix for '%s'.  Ignoring...\n" % (sha1))
            return False
        if res[0]:
            return True

        # ...or "[ Upstream commit <SHA1> ]"
        status, res = run_command("git log --grep='^\[ Upstream commit %s.* \]$' %s..HEAD" % (sha1, merge_base))
        if status != 0:
            stdo("\nError processing fix for '%s'.  Ignoring...\n" % (sha1))
            return False
        if res[0]:
            return True

        # Finally, see if it finds it in the git history (slower operation)
        status, res = run_command("git branch --contains %s %s" % (sha1, branch))
        if status != 0:
            stdo("\nError processing fix for '%s'.  Ignoring...\n" % (sha1))
            return False
        if branch == res[0].strip(" *"):
            return True

        return False

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            self.initialize()

            # Check: Are we currently in a git repository?
            if not Git.is_repo():
                raise GitError('This script can only be run from within a git repository.')

            if 'range' not in self.cfg:
                raise CmdlineError('No range given, use --range option to specify range of commits to process')

            if 'sob' not in self.cfg:
                raise CmdlineError('No "Signed-off-by:" given, you must specify --sob=<sob> option')

            # get current branch name
            status, result = run_command("git rev-parse --abbrev-ref HEAD")
            if status != 0:
                raise GitError("\n".join(result))
            cur_branch = result[0].strip()

            # Fetch latest upstream changes
            stdo("Fetching upstream commits from linux master repository...")
            status, result = run_command("git fetch -q %s master" %
                                         self.defaults['git_repo_upstream'],
                                         self.debug_run)
            if status != 0:
                raise GitError("\n".join(result))

            if 'check_already' in self.cfg or 'check_fixes' in self.cfg:
		status, result = run_command('git show-branch --merge-base HEAD master')
		if status == 0:
		    merge_base=result[0].strip()

            # Find commits marked for stable in the provided range, and
            # save hints added for which versions the commit should be
            # backported or cherry-picked
            stdo("\r%s" % (' ' * 80))
            stdo("\rLooking for stable commits inside provided range...")
            status, result = run_command('git log --reverse --format=%%H %s'
                                         % (self.cfg['range']))
            if status != 0:
                raise GitError("\n".join(result))
            cc = 1
            ccstable = compile(r'^\s*Cc:.*\b(stable)\b.*', IGNORECASE | MULTILINE)
            cchint = compile(r'((?P<for>\b(for)\b)|(?P<gr>\s*>\s*)|(?P<ge>\s*>=\s*)|(\s*))(?P<v>[v]*)(?P<kver>[0-9]\.[0-9][^\s+,\]]*)(?P<plus>[+]*)[,\]]*((?P<only>[\s]+only)|(?P<later>[\s]+and later)|(\s*))')
            fixes = compile(r'^\s*Fixes:\s*([a-f0-9]{6,}).*', IGNORECASE | MULTILINE)
            forstable = []
            fixeslist = []
            for c in result:
                stdo("\rLooking for stable commits inside provided range (%d/%d)..."
                     % (cc, len(result)))
                status, body = getstatusoutput('git log -n 1 --format=%%B %s' % (c))
                if status != 0:
                    eout(body)
                    continue
                s = ccstable.search(body)
                if s:
                    forvers = []
                    sline = s.group(0)
                    s2 = cchint.search(sline)
                    while s2:
                        if 'verbose' in self.cfg:
                            stdo("\ncommit %s is marked for version %s" %
                                 (c, s2.group('kver')))
                        forvers.append(KernelVersion(s2.group('kver')))
                        sline = sline[s2.end():]
                        s2 = cchint.search(sline)
                    if 'verbose' in self.cfg and forvers:
                        print("")
                    forstable.append([c, forvers])
                elif 'check_fixes' in self.cfg:
                    # search for 'Fixes: <SHA1>' lines
                    s = fixes.search(body)
                    if s:
                        sha1 = s.group(1)
                        if self.check_fix(sha1, cur_branch, merge_base):
                            fixeslist.append([c, sha1])
                cc += 1

            #stdo("\n")
            #for c in forstable:
            #    print c[0]
            #    if c[1]:
            #        for d in c[1]:
            #            print d.version, d.patchlevel, d.sublevel, d.plus
            #    else:
            #        print "None"
            #return 0

            # Try to apply the stable patches to the current branch. The
            # patch is created with git format-patch, and applied with
            # git am.
            #
            # Before applying patches, 5 directories are created if they
            # don't exist:
            # * AlreadyCommitted: patches which were already committed
            #            to the current branch as indicated by the
            #            presence of a "commit {sha} upstream." string
            #            (searching for these is enabled by --check-already)
            # * Applied: patches which succesfuly apply to the current
            #            branch are copied to this directory
            # * Ignored: patches which are marked for a different stable
            #            version from the kernel version in the current
            #            branch, are ignored (not applied) and copied to
            #            this directory. In case there the patch must be
            #            applied, it should be moved to the Fixed
            #            directory, to be applied on a next run
            # * Failed: patches which fail to apply are copied to this
            #           directory, to be fixed
            # * Fixed: after fixing a patch which failed, the user
            #          removes the patch from Failed directory, and
            #          copies the fixed patch with same name to this
            #          directory. This scripts sees the patch in Fixed,
            #          and applies it instead of taking the original
            #          broken patch obtained with git format-patch
            # * Discarded: after seeing that a patch which failed, or
            #              was applied, shouldn't be applied to the
            #              current branch, the user moves the patch
            #              from Failed or Applied to the Discarded
            #              directory. This scripts sees it and
            #              doesn't try to apply it again on a second
            #              run. This keeps the workflow sane, eg.
            #              in the end the Failed directory shouldn't
            #              have no patches, all patches which failed
            #              should have a fixed version in Fixed
            #              directory, or discarded.
            stdo("\r%s" % (' ' * 80))
            stdo("\rApplying stable changes found in the current branch...\n")
            applied_dir = 'Applied'
            already_dir = 'AlreadyCommitted'
            ignored_dir = 'Ignored'
            failed_dir = 'Failed'
            fixed_dir = 'Fixed'
            discarded_dir = 'Discarded'
            if not path.exists(applied_dir):
                mkdir(applied_dir)
	    if not path.exists(already_dir) and 'check_already' in self.cfg:
                mkdir(already_dir)
            if not path.exists(ignored_dir):
                mkdir(ignored_dir)
            if not path.exists(failed_dir):
                mkdir(failed_dir)
            if not path.exists(fixed_dir):
                mkdir(fixed_dir)
            if not path.exists(discarded_dir):
                mkdir(discarded_dir)
            kernel = KernelVersion(Kernel().version())
            for change in forstable:
                status, title = run_command('git log -n 1 --format=%%s %s' % (change[0]))
                if status != 0:
                    eout(result)
                    continue
                stdo('Applying "%s"... ' % (title[0]))
                status, result = run_command('git format-patch -k %s^..%s'
                                             % (change[0], change[0]))
                if status != 0:
                    eout(result)
                    continue
                filename = result[0]

		# Replace the useless 0001- prefix with the short sha of
		# the upstream commit to avoid filename collision when
		# two commits have similar or identical titles.
		short_sha_pfx = '%s-' % change[0][:8]
		newfilename = filename.replace('0001-', short_sha_pfx, 1)
		rename(filename, newfilename)
		filename = newfilename

                self.modify_patch(filename, change[0], self.cfg['sob'], ccstable)
                applied_file = '%s/%s' % (applied_dir, filename)
                if path.exists(applied_file):
                    remove(applied_file)
                discarded_file = '%s/%s' % (discarded_dir, filename)
                if path.exists(discarded_file):
                    remove(filename)
                    print("discarded")
                    continue
                patch_file = '%s/%s' % (fixed_dir, filename)
                if not path.exists(patch_file):
                    patch_file = filename
                    if change[1]:
                        ignore = True
                        for kver in change[1]:
                            if kernel.compare(kver) >= 0:
                                ignore = False
                                break
                        if ignore:
                            ignored_file = '%s/%s' % (ignored_dir, filename)
                            if path.exists(ignored_file):
                                remove(ignored_file)
                            move(filename, ignored_dir)
                            print("ignored")
                            continue
                else:
                    remove(filename)
		if 'check_already' in self.cfg:
		    status, result = run_command('git log --oneline -n 1 %s..HEAD -i --grep="^commit %s upstream\.$"' % (merge_base, change[0]) )
		    if result[0].strip() != '':
			already_file = '%s/%s' % (already_dir, filename)
			if path.exists(already_file):
			    remove(already_file)
			move(patch_file, already_dir)
			print("already-committed")
			continue
                status, result = run_command('git am -k %s' % patch_file)
                if status != 0:
                    if 'verbose' in self.cfg:
                        eout(result)
                    failed_file = '%s/%s' % (failed_dir, filename)
                    if path.exists(failed_file):
                        remove(failed_file)
                    move(patch_file, failed_dir)
                    print("failed")
                    status, result = run_command('git am --abort')
                    if 'stop_on_fail' in self.cfg:
                        print("Stopping because a patch failed to apply.")
                        break
                    continue
                if patch_file == filename:
                    move(filename, applied_dir)
                print("success")

            if 'check_fixes' in self.cfg:
                stdo("\n\rPossible fixes found:\n")
                fixes_dir = 'Possible-Fixes'
                if not path.exists(fixes_dir):
                    mkdir(fixes_dir)

                for change in fixeslist:
                    status, title = run_command('git log -n 1 --format=%%s %s' % (change[0]))
                    if status != 0:
                        eout(result)
                        continue
                    print('Commit "%s" fixes %s' % (title[0], change[1]))
                    status, result = run_command('git format-patch -k %s^..%s' % (change[0], change[0]))
                    if status != 0:
                        eout(result)
                        continue
                    filename = result[0]
                    short_sha_pfx = '%s-' % change[0][:8]
                    newfilename = filename.replace('0001-', short_sha_pfx, 1)
                    rename(filename, newfilename)
                    filename = newfilename

                    fixes_file = '%s/%s' % (fixes_dir, filename)
                    if path.exists(fixes_file):
                        remove(filename)
                        continue
                    self.modify_patch(filename, change[0], self.cfg['sob'], ccstable)
                    move(filename, fixes_file)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        except GitError as e:
            eout(e.msg)

        return

if __name__ == '__main__':
    app = ApplyStablePatches()
    app.main()

# vi:set ts=4 sw=4 expandtab:

