#!/usr/bin/env python
#

from sys                                import argv
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, run_command
from ktl.std_app                        import StdApp
from launchpadlib.launchpad             import Launchpad
from os.path                            import basename
from urllib                             import urlopen
import json
import re

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': print e
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--deleted] [--obsolete] [--superceded] [--allinfo] [--config=<cfg file>] [--debug=<dbg options>]  outfile    \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Fetch package information from the kernel team PPA and put it into a json file           \n")
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --deleted                                                                            \n")
        stdo("                         Include packages which have been deleted from the PPA               \n")
        stdo("                                                                                             \n")
        stdo("        --obsolete                                                                           \n")
        stdo("                         Include packages which are obsolete                                 \n")
        stdo("                                                                                             \n")
        stdo("        --superseded                                                                         \n")
        stdo("                         Include packages which are superseded                               \n")
        stdo("                                                                                             \n")
        stdo("        --allinfo                                                                            \n")
        stdo("                         includes all available information for the package                  \n")
        stdo("                                                                                             \n")
        stdo("        --config=<cfg file>                                                                  \n")
        stdo("                         The full path to the configuration file to use instead of           \n")
        stdo("                         the default location.                                               \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'deleted', 'obsolete', 'superseded', 'allinfo', 'config=', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)
            if len(args) != 1:
                raise CmdlineError('You must supply an output file name\n\n')
                
            self.cfg['args'] = args

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif (opt == '--deleted'):
                    self.cfg['deleted'] = True

                elif (opt == '--obsolete'):
                    self.cfg['obsolete'] = True

                elif (opt == '--superseded'):
                    self.cfg['superseded'] = True

                elif (opt == '--allinfo'):
                    self.cfg['allinfo'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        return

def contains(theString, theQueryValue):
  return theString.find(theQueryValue) > -1

# 
#
class PPAinfo(StdApp):
    # __init__
    #
    def __init__(self, name, ppaname):
        StdApp.__init__(self)
        self.defaults = {}
        cachedir = "/tmp/.launchpadlib/cache/"

        self.name = 'canonical-kernel-team'
        self.ppaname = 'ppa'
        self.person = None
        self.ppa = None

        self.launchpad = Launchpad.login_anonymously('kernel team tools', 'production', cachedir)
        self.person = self.launchpad.people[self.name]
        self.ppa = self.person.getPPAByName(name=ppaname)

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)
            return

        # by default we want these
        statuses = ['Pending', 'Published']

        if 'deleted' in self.cfg:
            print 'Also fetching Deleted packages\n'
            statuses.append('Deleted')
        else:
            print 'Skipping Deleted Packages\n'

        if 'obsolete' in self.cfg:
            print 'Also fetching Obsolete packages\n'
            statuses.append('Obsolete')
        else:
            print 'Skipping Obsolete Packages\n'

        if 'superseded' in self.cfg:
            print 'Also fetching Superseded packages\n'
            statuses.append('Superseded')
        else:
            print 'Skipping Superseded Packages\n'

        if 'allinfo' in self.cfg:
            print 'Including all package information in json output\n'

        jf = open(self.cfg['args'][0], 'w+')

        outdict = {}

        archive = self.ppa
        for astatus in statuses:
            psrc = archive.getPublishedSources(status=astatus)
            for p in  psrc:
                print '\n', p.display_name, ':', p.status,
                #print p.self_link
                fd = urlopen(p.self_link)
                sourceinfo = json.load(fd)


                # Add some plain text fields for some info
                sourceinfo['creator'] = sourceinfo['package_creator_link'].split('/')[-1].strip('~') 
                sourceinfo['signer'] = sourceinfo['package_signer_link'].split('/')[-1].strip('~') 
                sourceinfo['distribution'] = p.distro_series_link.split('/')[-1]

                # And strip some things we don't care about
                if not 'allinfo' in self.cfg:
                    for delkey in ['archive_link', 'distro_series_link', 'http_etag', 'package_maintainer_link', \
                                       'resource_type_link', 'package_creator_link', 'package_signer_link', \
                                       'section_name', 'scheduled_deletion_date', 'removal_comment', 'removed_by_link']:
                        del sourceinfo[delkey]
   
                key = p.source_package_name + '-' + p.source_package_version
                outdict[key] = sourceinfo
        jf.write(json.dumps(outdict, sort_keys=True, indent=4))
        return

if __name__ == '__main__':
#    app = PPAinfo('sconklin')
    app = PPAinfo('canonical-kernel-team', 'ppa')
    app.main()

# vi:set ts=4 sw=4 expandtab:

