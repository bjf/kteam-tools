#!/usr/bin/env python
#

from sys                                import argv
from os                                 import path, _exit
from getopt                             import getopt, GetoptError
from ktl.utils                          import stdo, error
from ktl.std_app                        import StdApp
from ktl.ubuntu                         import Ubuntu

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
# Do all the command line processing.
#
class Cmdline:
    # __init__
    #
    def __init__(self):
        self.cfg = {}

    # error
    #
    def error(self, e, defaults):
        if e != '': error(e)
        self.usage(defaults)

    # usage
    #
    # Prints out the help text which explains the command line options.
    #
    def usage(self, defaults):
        stdo("    Usage:                                                                                   \n")
        stdo("        %s [--verbose] [--debug=<dbg options>] <path-to-changes>                             \n" % self.cfg['app_name'])
        stdo("                                                                                             \n")
        stdo("    Options:                                                                                 \n")
        stdo("        --help           Prints this text.                                                   \n")
        stdo("                                                                                             \n")
        stdo("        --verbose        Give some feedback of what is happening while the script is         \n")
        stdo("                         running.                                                            \n")
        stdo("                                                                                             \n")
        stdo("        --debug=<debug options>                                                              \n")
        stdo("                         Performs additional output related to the option enabled and        \n")
        stdo("                         the application defined support for the option.                     \n")
        stdo("                                                                                             \n")
        stdo("    Examples:                                                                                \n")
        stdo("        %s --verbose                                                                         \n" % self.cfg['app_name'])
        stdo("        %s ./linux_2.6.24-28.83_source.changes                                               \n" % self.cfg['app_name'])

    # process
    #
    # As you can probably tell from the name, this method is responsible
    # for calling the getopt function to process the command line. All
    # parameters are processed into class variables for use by other
    # methods.
    #
    def process(self, argv, defaults):
        self.cfg['app_name'] = argv[0]
        result = True
        try:
            optsShort = ''
            optsLong  = ['help', 'verbose', 'config=', 'debug=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif (opt == '--verbose'):
                    self.cfg['verbose'] = True

                elif opt in ('--config'):
                    self.cfg['configuration_file'] = val

                elif opt in ('--debug'):
                    self.cfg['debug'] = val.split(',')

            self.cfg['changes'] = args

        except GetoptError, error:
            print(error, defaults)
            raise CmdlineError('')

        return self.cfg

    # verify_options
    #
    def verify_options(self, cfg):
        if ('changes' not in self.cfg) or (len(self.cfg['changes']) == 0):
            raise CmdlineError('At least one change file must be specified.\n')

        for cf in self.cfg['changes']:
            if not path.exists(cf):
                raise CmdlineError('The specified path (%s) does not exist.\n' % cf)

        return


# CheckPackage
#
class CheckPackage(StdApp):
    # __init__
    #
    def __init__(self):
        StdApp.__init__(self)
        self.defaults = {}

    # main
    #
    def main(self):
        cmdline = Cmdline()
        try:
            self.merge_config_options(self.defaults, cmdline.process(argv, self.defaults))
            cmdline.verify_options(self.cfg)

            ubuntu = Ubuntu()
            for cf in self.cfg['changes']:
                state = ''
                checked = 0
                with open(cf, 'r') as f:
                    for line in f:
                        line = line.rstrip()

                        # There is a version line in the changes file. We use that to determine
                        # which checksum values to compare against.
                        #
                        # Ex: 'Version: 2.6.24-28.84'
                        #
                        if 'Version: 2.6' in line:
                            (key, val) = line.split()
                            (ver, abi) = val.split('-')
                            record = ubuntu.lookup(ver)
                            if record == None:
                                error("Failed to find the matching version (%s) in the kernel-version to ubuntu-release map dictionary." % ver)
                                _exit(-1)
                            continue

                        # Detect the section containing the sha1 checksum for the orig.tar.gz
                        #
                        if 'Sha1' in line:
                            state = 'sha1'
                            continue
                        elif state == 'sha1':
                            if 'orig.tar.gz' in line:
                                (chksum, size, filename) = line.split()
                                checked += 1
                                state = ''
                            continue

                        # Detect the section containing the md5 checksum for the orig.tar.gz
                        #
                        if 'Files' in line:
                            state = 'md5'
                            continue
                        elif state == 'md5':
                            if 'orig.tar.gz' in line:
                                (chksum, size, j1, j2, filename) = line.split()
                                checked += 1
                                state = ''
                            continue


                if checked < 2:
                    error("%s doesn't have both checksums\n           (sha1 and md5). This could be due to not using the '-sa' command line\n           option when creating the package.\n" % cf)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        # Handle command line errors.
        #
        except CmdlineError as e:
            cmdline.error(e.msg, self.defaults)

        return

if __name__ == '__main__':
    app = CheckPackage()
    app.main()

# vi:set ts=4 sw=4 expandtab:

