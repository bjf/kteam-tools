#!/usr/bin/env python
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from ktl.utils                          import eout
from ktl.git                            import Git, GitError
from ktl.debian                         import Debian, DebianError
from ktl.tracking_bug                   import TrackingBug
from lpltk.LaunchpadService             import LaunchpadService, LaunchpadServiceError

# AppError
#
# A general exception that can be raised when an error is encountered in the app.
#
class AppError(Exception):
    # __init__
    #
    def __init__(self, error=''):
        self.msg = error

# CreateTrackingBug
#
class CreateTrackingBug():
    # __init__
    #
    def __init__(self, args):
        self.args = args

    # initialize
    #
    def initialize(self):
        defaults = {}
        defaults['launchpad_client_name'] = 'kernel-team-create-release-tracker'
        if self.args.staging:
            defaults['launchpad_services_root'] = 'qastaging'
        try:
            self.lp = LaunchpadService(defaults)
        except LaunchpadServiceError as e:
            print(e.msg)
            raise

    # main
    #
    def main(self):
        try:
            self.initialize()

            # Require --force
            #
            if not self.args.force:
                raise AppError('Are you sure you shouldn\'t be using start-sru-cycle?\n            If you are sure, you must run this with the --force\n            command line option.')

            # Check: Are we currently in a git repository?
            #
            if not Git.is_repo():
                raise AppError('This script can only be run from within a git repository.')

            changelog = Debian.changelog(local=True)

            if changelog[0]['series'] == 'UNRELEASED':
                raise AppError('You must set the changelog series to something other than UNRELEASED.')

            # -------------------------------------------------------------------------------------
            # B U G   W O R K

            tb = TrackingBug(self.lp, self.args.staging)
            bug = tb.open(changelog[0]['package'],
                          changelog[0]['version'],
                          changelog[0]['ABI'] != changelog[1]['ABI'],
                          self.args.master_bug,
                          changelog[0]['series'])

            if self.args.cycle is not None:
                bug.tags.append(self.args.cycle)

            # -------------------------------------------------------------------------------------
            # C H A N G E L O G   W O R K

            # Pull the entire changelog file into a list
            #
            changelog, changelog_path = Debian.raw_changelog(local=True)
            with open(changelog_path, 'r') as f:
                thelog = f.readlines()

            with open(changelog_path, 'w') as f:
                f.write(thelog[0])
                f.write(thelog[1])
                f.write("  [ %s ]\n" % (bug.owner.display_name))
                f.write("\n")
                f.write("  * Release Tracking Bug\n")
                f.write("    - LP: #%s\n" % (bug.id))
                f.write("\n")
                for line in thelog[2:]:
                    f.write(line)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except GitError as e:
            eout(e.msg)

        except DebianError as e:
            eout(e.msg)

        except AppError as e:
            eout(e.msg)

        return

if __name__ == '__main__':
    app_description = '''
    '''

    app_epilog = '''
    '''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--force', action='store_true', default=False, help='People should really be using start-sru-cycle. However, if they have to use this, require the --force.')
    parser.add_argument('--staging', action='store_true', default=False, help='Use the staging LP server to create the bug. This is just for testing and will go away when the staging database is reset.')
    parser.add_argument('--master_bug', default=None, help='If you are running this from a derivative or backport branch, you should use this option to specify the number of the tracking bug for the master branch release where this was rebased on.')
    parser.add_argument('--cycle', default=None, help='The sru cycle tag to be applied to the bug that is created.')

    args = parser.parse_args()

    exit(CreateTrackingBug(args).main())

# vi:set ts=4 sw=4 expandtab:
