#!/usr/bin/env python
#
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(sys.argv[0]), 'ktl'))

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING
import socket
import threading
import Queue
from ktl.log                            import cdebug, center, cleave
import ssl
from ktl.msgq                           import MsgQueue
from ktl.utils                          import json_load
import json
import re
from string                             import punctuation

class IrcClientCommand(object):
    """
    A command to the client thread. Each command type has its associated
    data:

    SEND:       Data string
    EXIT:       None
    """
    SEND, EXIT, NOTICE, IRC_RAW, MSGQ_RAW = range(5)

    def __init__(s, type, data=None):
        s.type = type
        s.data = data


class MsgqReader(threading.Thread):
    # __init__
    #
    def __init__(s, mq, cmd_q, queue):
        center('MsgqReader::__init__')
        super(MsgqReader, s).__init__()
        s.mq = mq
        s.cmd_q = cmd_q
        s.queue = queue
        s.daemon = True
        cleave('MsgqReader::__init__')

    # _handler
    #
    def _handler(s, payload):
        s.cmd_q.put(IrcClientCommand(IrcClientCommand.MSGQ_RAW, payload))

    # run
    #
    def run(s):
        center('MsgqReader::run')
        try:
            s.mq.listen(s.queue, 'kernel.#', s._handler)
        except Exception as e:
            s.cmd_q.put(IrcClientCommand(IrcClientCommand.EXIT, e))
            raise e
        cleave('MsgqReader::run')


class IrcClientReader(threading.Thread):
    # __init__
    #
    def __init__(s, socket, cmd_q):
        center('IrcClientReader::__init__')
        super(IrcClientReader, s).__init__()
        s.socket = socket
        s.cmd_q = cmd_q
        s.alive = threading.Event()
        s.alive.set()
        s.daemon = True
        cleave('IrcClientReader::__init__')

    # run
    #
    def run(s):
        center('IrcClientReader::run')
        while s.alive.isSet():
            try:
                cdebug("IrcClientReader: Waiting on IRC")
                data = s.socket.recv(4096)
                lines = data.split('\r\n')
                for line in lines:
                    cdebug("Got line: <" + line + ">")
                    # Ignore blank lines
                    if line == "":
                        continue

                    s.cmd_q.put(IrcClientCommand(IrcClientCommand.IRC_RAW, line))
            except Exception as e:
                s.cmd_q.put(IrcClientCommand(IrcClientCommand.EXIT, e))
                raise e
        cleave('IrcClientReader::run')

    # join
    #
    def join(s, timeout=None):
        s.alive.clear()
        threading.Thread.join(s, timeout)


class IrcClient:
    # __init__
    #
    def __init__(s, cmd_q=Queue.Queue(), reply_q=Queue.Queue(), cfg={}, msgq=None, queue=None):
        s.cmd_q = cmd_q
        s.reply_q = reply_q
        s.alive = threading.Event()
        s.alive.set()
        s.socket = None
        s.msgq = msgq
        s.queue = queue

        s.logged_in     = False
        s.sent_password = False
        s.sent_nick     = False
        s.sent_user     = False
        s.sent_join     = False
        s.sent_pong     = False

        s.handlers = {
            IrcClientCommand.EXIT:    s._handle_EXIT,
            IrcClientCommand.SEND:    s._handle_SEND,
            IrcClientCommand.NOTICE:  s._handle_NOTICE,
            IrcClientCommand.IRC_RAW: s._handle_IRC_RAW,
            IrcClientCommand.MSGQ_RAW: s._handle_MSGQ_RAW,
        }
        s.cfg = cfg

        if isinstance(cfg['channel'], str):
            cfg['channel'] = list(cfg['channel'])

        s._connect(cfg['host'], cfg['port'], cfg['ssl'])

        # Start the IRC reader thread.
        s.irc_client_reader = IrcClientReader(s.client_ssl_socket, s.cmd_q)
        s.irc_client_reader.start()

        # Start the MsgQ listener.
        s.msgq_listener = MsgqReader(s.msgq, s.cmd_q, s.queue)
        s.msgq_listener.start()

    # irc_decode
    #
    def irc_decode(s, line):
        who = 'UNKNOWN'
        if line[0] == ':':
            (who, line) = line.split(' ', 1)
            who = who[1:].split('!')[0]

        bits = line.split(' :')
        cmd = bits[0].split(' ')
        if len(bits) > 0:
            cmd.append(bits[1])

        return who, cmd

    # on_ping
    #
    def on_ping(s, line):
        center('IrcClient::on_ping')

        sent = s.client_ssl_socket.send('PONG %s\r\n' % (line.replace('PING :', '')))
        cdebug('sending PONG')
        s.sent_pong = True

        cleave('IrcClient::on_ping')

    # on_join
    #
    def on_join(s, line):
        center('IrcClient::on_join')

        (who, cmd) = s.irc_decode(line)

        cdebug('line: "%s"' % line)
        cdebug('who: "%s"' % who)
        cdebug('cmd: "%s"' % str(cmd))

        if who == s.cfg['nick']:
            cdebug('I just joined')
            sent = s.client_ssl_socket.send('PRIVMSG %s :%s\r\n' % (cmd[1], '\o/'))
        else:
            cdebug('%s just joined' % who)

        cleave('IrcClient::on_join')

    # privmsg_parse
    #
    def privmsg_parse(s, line):
        center('IrcClient::privmsg_parse')

        cmd  = None
        chan = None
        msg  = None
        who  = None
        me   = False

        s1 = line.split(':', 2)
        cdebug('s1: %s' % str(s1))

        # If it's not for me, ignore it
        #
        if s1[2].startswith(s.cfg['nick']):

            s2 = s1[1].split(' ')
            cdebug('s2: %s' % str(s2))

            cdebug('line: "%s"' % line)

            cmd  = s2[1]
            chan = s2[2]
            msg  = s1[2].replace(s.cfg['nick'], '', 1).strip(punctuation + ' ')

            who = line.split('!')[0].replace(':', '')
            cdebug('     cmd: %s' % cmd)
            cdebug('    chan: %s' % chan)
            cdebug('     msg: "%s"' % msg)
            cdebug('     who: %s' % who)

            me = True

        cdebug(' ')

        cleave('IrcClient::privmsg_parse')
        return [me, cmd, chan, msg, who]

    # on_privmsg
    #
    def on_privmsg(s, line):
        center('IrcClient::on_privmsg')

        (forme, cmd, chan, msg, who) = s.privmsg_parse(line)

        if forme:
            cdebug('      me: %s' % forme)
            cdebug('     cmd: %s' % cmd)
            cdebug('    chan: %s' % chan)
            cdebug('     msg: "%s"' % msg)
            cdebug('     who: %s' % who)

            if 'quit' == msg:
                s.privmsg(chan, '%s, going, going, gone.' % who)
                sys.exit(1)

        cleave('IrcClient::on_privmsg')

    # privmsg
    #
    def privmsg(s, chan, msg):
        sent = s.client_ssl_socket.send('PRIVMSG %s :%s\r\n' % (chan, msg))

    # irc_state_machine
    #
    def irc_state_machine(s):
        if not s.logged_in:
            if not s.sent_password:
                cdebug('sending PASS')
                sent = s.client_ssl_socket.send('PASS ' + s.cfg['password'] + '\r\n')
                s.sent_password = True
            elif not s.sent_nick:
                cdebug('sending NICK')
                sent = s.client_ssl_socket.send('NICK ' + s.cfg['nick'] + '\r\n')
                s.sent_nick = True
            elif not s.sent_user:
                cdebug('sending USER')
                sent = s.client_ssl_socket.send('USER %s 0 * :%s\r\n' % (s.cfg['user'], s.cfg['name']))
                s.sent_user = True
            elif s.sent_pong:
                if not s.sent_join:
                    cdebug('sending JOIN')
                    for channel in s.cfg['channel']:
                        sent = s.client_ssl_socket.send('JOIN ' + channel + '\r\n')
                    s.sent_join = True
                    s.logged_in = True

    # run
    #
    def run(s):
        while s.alive.isSet():
            s.irc_state_machine()
            try:
                # Queue.get with timeout to allow checking s.alive
                cmd = s.cmd_q.get(True)
                s.handlers[cmd.type](cmd)
                s.cmd_q.task_done()

            except Queue.Empty as e:
                continue

    # join
    #
    def join(s, timeout=None):
        s.alive.clear()
        threading.Thread.join(s, timeout)

    # _connect
    #
    def _connect(s, host, port, use_ssl):
        center('IrcClient::__init__')
        s.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.client_socket.connect((host, port))
        s.client_ssl_socket = ssl.wrap_socket(s.client_socket)
        #s.client_socket.settimeout(15)
        cleave('IrcClient::__init__')

    # _handle_EXIT
    #
    def _handle_EXIT(s, cmd):
        center('IrcClient::_handle_EXIT')
        if cmd.data:
            raise cmd.data
        s.alive.clear()
        #s.irc_client_reader.join()
        s.client_ssl_socket.close()
        s.client_socket.close()
        cleave('IrcClient::_handle_EXIT')

    # _handle_SEND
    #
    def _handle_SEND(s, cmd):
        center('IrcClient::_handle_SEND')
        (channel, line) = cmd.data
        sent = s.client_ssl_socket.send('PRIVMSG %s :%s\r\n' % (channel, line))
        cleave('IrcClient::_handle_SEND')

    # _handle_NOTICE
    #
    def _handle_NOTICE(s, cmd):
        center('IrcClient::_handle_SEND')
        (channel, line) = cmd.data
        sent = s.client_ssl_socket.send('NOTICE %s :%s\r\n' % (channel, line))
        cleave('IrcClient::_handle_SEND')

    # _handle_IRC_RAW
    #
    def _handle_IRC_RAW(s, cmd):
        center('IrcClient::_handle_IRC_RAW')
        line = cmd.data
        cdebug('line: "%s"' % line)
        # We only care about 3 commands. PING, JOIN and PRIVMSG.
        if 'PING ' in line:
            s.on_ping(line)
            s.sent_pong = True

        elif 'JOIN ' in line:
            s.on_join(line)

        elif 'PRIVMSG ' in line:
            # We care that the other end is alive, their version request is sufficient.
            s.sent_pong = True
            s.on_privmsg(line)
        cleave('IrcClient::_handle_IRC_RAW')

    # decode_payload
    #
    def decode_payload(s, payload):
        center('TheApp::decode_payload')
        retval = []
        content = ""

        if payload['key'] == 'kernel.irc':
            content = payload['msg']
            retval.append(content)

        else:
            # We don't recognize this payload. Dump out some information that would help
            # us understand it.
            #
            if 'key' in payload:
                content += 'unknown key: %s' % payload['key']
            else:
                content += 'unrecognized payload with no \'key\': %s' % json.dumps(payload, sort_keys=True, indent=4)
            retval.append(content)

        cleave('TheApp::decode_payload')
        return retval

    # _handler
    #
    def _handler(s, payload):
        center("TheApp::_handler")
        cdebug('----------------------------------------------------------------------------')

        if 'key' in payload:
            cdebug("TheApp::_handler payload={}".format(payload['key']))
            if payload['key'] == 'kernel.irc':
                content = s.decode_payload(payload)
                channel = payload.get('channel', s.cfg['channel'][0])
                # If they send things to the wrong channel ...
                if channel not in s.cfg['channel']:
                    channel = s.cfg['channel'][0]

                cdebug('content: "%s"' % str(content))
                cdebug('channel: "%s"' % str(channel))

                if payload['notice']:
                    for line in content:
                        s.cmd_q.put(IrcClientCommand(IrcClientCommand.NOTICE, (channel, line)))
                else:
                    for line in content:
                        s.cmd_q.put(IrcClientCommand(IrcClientCommand.SEND, (channel, line)))

        else:
            content = 'unrecognized payload with no \'key\': %s' % json.dumps(payload, sort_keys=True, indent=4)
            s.cmd_q.put(IrcClientCommand(IrcClientCommand.SEND, (s.irc.cfg['channel'][0], content)))

        cleave("TheApp::_handler")

    # _handle_MSGQ_RAW
    #
    def _handle_MSGQ_RAW(s, cmd):
        center('IrcClient::_handle_MSGQ_RAW')
        s._handler(cmd.data)
        cleave('IrcClient::_handle_MSGQ_RAW')


# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args
        s.queue_name = 'kernel-irc-kmsgq'

    # main
    #
    def main(s, cfg):
        '''
        '''
        center("TheApp::main")
        retval = 1

        try:
            if args.local:
                mq = MsgQueue(address='localhost', port=9123)
            else:
                mq = MsgQueue()

            irc_cfg = {
                'host'     : cfg['server'],
                'port'     : cfg['port'],
                'ssl'      : True,
                'user'     : cfg['user'],
                'password' : cfg['passwd'],
                'nick'     : cfg['nick'],
                'name'     : 'Kernel Bot',
                'channel'  : cfg['channel'],
            }
            s.irc = IrcClient(cfg=irc_cfg, msgq=mq, queue=args.queue)

            s.irc.run()

            print("done")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        cleave("TheApp::main")
        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    KernelMQ --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--config',  required=True,  type=str, help="Points at the configuration file")
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('queue', help='Name of the queue to use')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    cfg = json_load(args.config)

    app = TheApp(args)
    exit(app.main(cfg))


# vi:set ts=4 sw=4 expandtab:

