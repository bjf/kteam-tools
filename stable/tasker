#!/usr/bin/env python3
#
# tasker - A tool for development and testing of the individual task handlers
#

import sys
import os
sys.path.append(os.path.join('..'))
sys.path.append(os.path.join(os.path.expanduser('~'), '.python3'))

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, INFO
import yaml

from wfl.log                            import Clog, center, cleave, cdebug, cinfo
from wfl.launchpad                      import Launchpad
from wfl.bug                            import WorkflowBug
from wfl.bugmail                        import BugMailConfigFileMissing
import wfl.wft

class TaskHandlersMap(dict):
    # __init__
    #
    def __init__(s, lp, task, bug):
        s['Automated-testing'          ] = wfl.wft.AutomatedTesting(lp, task, bug)
        s['Certification-testing'      ] = wfl.wft.CertificationTesting(lp, task, bug)
        s['Prepare-package'            ] = wfl.wft.PreparePackage(lp, task, bug)
        s['Prepare-package-lbm'        ] = wfl.wft.PreparePackageLBM(lp, task, bug)
        s['Prepare-package-meta'       ] = wfl.wft.PreparePackageMeta(lp, task, bug)
        s['Prepare-package-signed'     ] = wfl.wft.PreparePackageSigned(lp, task, bug)
        s['Promote-to-proposed'        ] = wfl.wft.PromoteToProposed(lp, task, bug)
        s['Promote-to-updates'         ] = wfl.wft.PromoteToUpdates(lp, task, bug)
        s['Promote-to-security'        ] = wfl.wft.PromoteToSecurity(lp, task, bug)
        s['Promote-to-release'         ] = wfl.wft.PromoteToRelease(lp, task, bug)
        s['Security-signoff'           ] = wfl.wft.SecuritySignoff(lp, task, bug)
        s['Verification-testing'       ] = wfl.wft.VerificationTesting(lp, task, bug)
        s['Regression-testing'         ] = wfl.wft.RegressionTesting(lp, task, bug)
        s['Upload-to-ppa'              ] = wfl.wft.UploadToPPA(lp, task, bug)
        s['Prepare-package-ports-meta' ] = wfl.wft.PreparePackagePortsMeta(lp, task, bug)

class Tasker(object):
    # __init__
    #
    def __init__(s, args):
        center(s.__class__.__name__ + '.__init__')
        s.args = args
        s._lp = None
        cleave(s.__class__.__name__ + '.__init__')

    @property
    def lp(s):
        if s._lp is None:
            s._lp = Launchpad(False)
        return s._lp

    # drive
    #
    def drive(s, workflow_task_name, bugid):
        center(s.__class__.__name__ + '.drive')

        try:
            WorkflowBug.sauron            = s.args.sauron
            WorkflowBug.dryrun            = s.args.dryrun
            WorkflowBug.no_status_changes = s.args.no_status_changes
            WorkflowBug.no_phase_changes  = s.args.no_phase_changes
            WorkflowBug.no_assignments    = s.args.no_assignments
            WorkflowBug.no_announcements  = s.args.no_announcements
            WorkflowBug.no_timestamps     = s.args.no_timestamps

            bug = WorkflowBug(s.lp.default_service, bugid)
            task = bug.tasks_by_name[workflow_task_name.lower()]
            handlers = TaskHandlersMap(s.lp, task, bug)
            handler = handlers[workflow_task_name]

            cinfo('    ---------------------------------------------------------------------------------------------------------', 'blue')
            cinfo('    %s' % workflow_task_name)
            handler.jumper[task.status]()
            cinfo('    ---------------------------------------------------------------------------------------------------------', 'blue')
            cleave(s.__class__.__name__ + '.drive')
        except BugMailConfigFileMissing as e:
            print(e.message)

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I drive individual task handlers.
    '''
    app_epilog = '''
examples:
    tasker automatic-testing 1134424
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--logfile',                                       default=None, help='Where to log the output.')
    parser.add_argument('--debug',                      action='store_true', default=False, help='')
    parser.add_argument('--dryrun',                      action='store_true', default=False, help='')
    parser.add_argument('--no-status-changes',          action='store_true', default=False, help='Make no status changes.')
    parser.add_argument('--no-phase-changes',           action='store_true', default=False, help='Make no phase changes.')
    parser.add_argument('--no-assignments',             action='store_true', default=False, help='Make no assignee assignments.')
    parser.add_argument('--no-announcements',           action='store_true', default=True, help='Send no email, msgq or other announcements.')
    parser.add_argument('--no-timestamps',              action='store_true', default=False, help='Don\'t set any timestamps in the properties.')
    parser.add_argument('bug',  metavar='BUG', nargs=1,                    default=None, help='A single Launchpad bug id that is to be processed.')
    parser.add_argument('task',  metavar='TASK', nargs=1,                  default=None, help='The task that is to be processed.')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    args.sauron = True
    Clog.dbg = False

    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(filename=None, level=DEBUG, format=log_format)
        Clog.dbg = True
    else:
        log_format = "%(message)s"
        basicConfig(filename=None, level=INFO, format=log_format)
        Clog.dbg = False

    if (args.task and not args.bug) or (args.bug and not args.task):
        print('')
        print('  *** Error: Both a task and a bug must be supplied.')
        print('')
        cleave('__main__')
        exit(0)

    center('__main__')
    if args.debug:
        cdebug('Configuration:')
        for arg in vars(args):
            cdebug('    %s: %s' % (arg, getattr(args, arg)))

    args.task = args.task[0]
    args.bug  = args.bug[0]
    tasker = Tasker(args)
    if args.task and args.bug:
        tasker.drive(args.task, args.bug)

    #exit(WorkflowManager(args).manage())
    cleave('__main__')

# vi:set ts=4 sw=4 expandtab:
