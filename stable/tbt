#!/usr/bin/env python3
#
from sys                                import stderr
from time                               import sleep
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, INFO
import signal
import traceback
from ktl.log                            import center, cleave, Clog
from wfl.launchpad                      import Launchpad
from wfl.bug                            import WorkflowBug

# TheApp
#
class TheApp(object):
    '''
    '''

    # __init__
    #
    def __init__(s):
        '''
        '''
        center(s.__class__.__name__ + '.__init__')
        cleave(s.__class__.__name__ + '.__init__')

    # sigterm_handler
    #
    def sigterm_handler(s, signu, frame):
        center(s.__class__.__name__ + '.sigterm_handler')
        cleave(s.__class__.__name__ + '.sigterm_handler')

    # sighup_handler
    #
    def sighup_handler(s, signu, frame):
        center(s.__class__.__name__ + '.sighup_handler')
        cleave(s.__class__.__name__ + '.sighup_handler')

    # main
    #
    def main(s, args):
        center(s.__class__.__name__ + '.main')
        retval = 0

        signal.signal(signal.SIGTERM, s.sigterm_handler)
        signal.signal(signal.SIGHUP,  s.sighup_handler)

        while True:
            sleep(60)

        cleave(s.__class__.__name__ + '.main (%s)' % retval)
        return retval

# Tasks
#
class Tasks(object):
    '''
    '''

    # __init__
    #
    def __init__(s):
        '''
        '''
        center(s.__class__.__name__ + '.__init__')
        s._lp = None
        cleave(s.__class__.__name__ + '.__init__')

    @property
    def lp(s):
        if s._lp is None:
            s._lp = Launchpad(False)
        return s._lp

    # retest
    #
    def retest(s, args):
        '''
        '''
        center(s.__class__.__name__ + '.retest')
        retval = 0
        WorkflowBug.local_msgqueue_port = args.local_msgqueue_port

        for b in args.bugs:
            wb = WorkflowBug(s.lp.default_service, b)
            wb.send_proposed_testing_requests()

        cleave(s.__class__.__name__ + '.retest')
        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    This app is used to perform a variety of tasks on tracking bugs or dealing with
    the SRU process.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='')
    subparsers = parser.add_subparsers()

    retest = subparsers.add_parser('retest')
    retest.set_defaults(func=Tasks.retest)
    retest.add_argument('bugs',  metavar='BUGS', nargs="*", default=None, help='A list of Launchpad bug ids that are to be processed.')
    parser.add_argument('--local-msgqueue-port',  type=int, default=None, help='The local port to be used to talk to the Rabbit MQ service.')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    if args.debug:
        log_format = "%(levelname)s - %(message)s"
        basicConfig(level=DEBUG, format=log_format)
        Clog.dbg = True
    else:
        log_format = "%(message)s"
        basicConfig(level=INFO, format=log_format)

    center('__main__')
    try:
        app = Tasks()
        retval = args.func(app, args)
    except KeyboardInterrupt:
        pass
    except Exception:
        trace = traceback.format_exc()
        try:
            stderr.write(trace)
        except:
            pass
        logfile = open('/tmp/exceptions.log', 'w')
        logfile.write('Critical exception in tbt')
        logfile.write(trace)
        logfile.write('----------------------------------------\n\n')
        logfile.close()
        retval = -2

    cleave('__main__ (%s)' % (retval))
    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
