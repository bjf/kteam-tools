#!/usr/bin/env python3
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from ktl.kernel_series                  import KernelSeries
import json
import requests
import re

# TheApp
#
class TheApp(object):
    '''
    '''

    # main
    #
    def main(s, args):
        retval = 0
        ks     = KernelSeries()

        #                              .- package name (group(1))
        #                             /           .- kernel version (group(2))
        #                            /           /          .- version/abi separator (group(3))
        #                           /           /          /
        ver_rc     = re.compile("(\S+): (\d+\.\d+\.\d+)([-\.])(\d+)\.(\d+)([~a-z\d.]*)")
        #                                                       /      /       /
        #                                                      /      /       .- backport extra (m.group(6))
        #                                                     /      .- upload number (m.group(5))
        #                                                    .- abi (group(4))

        y = {}
        r = requests.get('http://kernel.ubuntu.com/sru/kernel-sru-workflow.json')
        trackers = json.loads(r.text)

        for project in ['kernel-sru-workflow']:
            if project not in trackers['bug-collections']:
                continue
            for x in trackers['bug-collections'][project]['bugs']:
                bug = trackers['bug-collections'][project]['bugs'][x]
                title = bug['title']

                m = ver_rc.search(title)
                if m is not None:
                    if m.group(1) != 'linux' and '-lts-' not in m.group(1) and 'linux-hwe' not in m.group(1):
                        continue

                    if args.no_devel and bug['series name'] == trackers['info']['dev series']:
                        continue

                    if args.no_esm and bug['series name'] in trackers['info']['esm series']:
                        continue

                    version = '%s%s%s.%s%s' % (m.group(2), m.group(3), m.group(4), m.group(5), m.group(6))

                    if bug['series name'] not in y:
                        y[bug['series name']] = {}
                    y[bug['series name']][m.group(1)] = version

        print('Kernel Versions')
        print('====================================================================')
        for series in sorted(ks.series, key=ks.key_series_name, reverse=True):
            cn = series.codename
            if cn not in y:
                continue
            print('%s:' % cn)
            for p in sorted(y[cn]):
                print('    %-20s %s' % (p + ':', y[cn][p]))

        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    Generate the list of kernel versions currently in SRU, based on the list of
    open tracking bugs.
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--no-devel', action='store_true', default=False,
                        help='do not include the development series')
    parser.add_argument('--no-esm', action='store_true', default=False,
                        help='do not include ESM series')
    args = parser.parse_args()

    app = TheApp()
    retval = app.main(args)

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
