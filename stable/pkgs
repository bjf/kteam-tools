#!/usr/bin/env python
#
# shank is the "stable bot" or "stab-bot".
#

from os                                 import path
from ktl.utils                          import stdo
from datetime                           import datetime
from urllib2                            import HTTPError
from ktl.termcolor                      import colored
import json

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO, DEBUG, WARNING
from sb.log                             import Clog, cinfo
from sb.launchpad                       import Launchpad
from sb.workflow_engine                 import WorkflowEngine

def verbose(msg, color='green'):
    stdo(colored(msg, color))

# TaskActions
#
class TaskActions(dict):
    '''
    For every workflow task there is one or more action(s) that are to
    be perfomed on it. The action the be performed depends on the current
    state (status) of that task.

    This class (a dictionary) helps building the master dictionary of
    tasks and actions.
    '''
    # __init__
    #
    def __init__(s, d, *args):
        dict.__init__(s, *args)
        s.actions = {}

        # Initialize them all to 'None'
        #
        for t in ['New', 'Incomplete', 'Opinion', 'Invalid', 'Won\'t Fix', 'Expired', 'Confirmed', 'Triaged', 'In Progress', 'Fix Committed', 'Fix Released', 'Unknown']:
            s[t] = None

        # Set the individual ones that have a non-None value
        #
        for k in d:
            s[k] = d[k]

# WorkflowManager
#
class WorkflowManager():
    # __init__
    #
    def __init__(s, args):
        s.args = args

    # get_buglist
    #
    def get_buglist(s, project):
        '''
        Perform a search of Launchpad to get a list of all the bugs that match
        our criteria.

        A list of the bug ids is returned.
        '''
        retval = []

        search_tags            = [   # A list of the tags we care about
                'kernel-release-tracking-bug'
            ]
        search_tags_combinator = "All"
        search_status          = ["New", "In Progress", "Incomplete", "Fix Committed"] # A list of the bug statuses that we care about
        search_since           = datetime(year=2013, month=1, day=1)
        lp_project = s.lp.default_service.projects[project]
        tasks = lp_project.search_tasks(status=search_status, tags=search_tags, tags_combinator=search_tags_combinator, modified_since=search_since)

        for task in tasks:
            bug = task.bug
            cinfo('found: %s' % bug.id)
            retval.append(bug.id)

        return retval

    # main
    #
    def main(s):
        '''
        This drives the overall process. It gets a list of the bugs that need to
        be worked (if not specified) and then runs through each of them.
        '''
        try:
            # Load our config options.
            #
            cfg_path = path.dirname(__file__) + '/sru-workflow.cfg'
            with open(cfg_path, 'r') as f:
                s.cfg = json.load(f)

            s.lp = Launchpad(s.args.staging)

            s.projects_tracked = [ 'kernel-development-workflow', 'kernel-sru-workflow' ]
            engine = WorkflowEngine(s.args, s.lp)
            engine.cfg = s.cfg                              # This needs fixing!
            engine.projects_tracked = s.projects_tracked    # .. and this
            if s.args.bugs:
                for bugid in s.args.bugs:
                    engine.crank(bugid, s.args.sauron)

            else:
                for project in s.projects_tracked:
                    cinfo('Project: %s' % project)

                    for bugid in s.get_buglist(project):
                        engine.crank(bugid, s.args.sauron)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return 0

    # end of main

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I do increadible things to kernel workflow bugs.
    '''
    app_epilog = '''
examples:
    sb
    sb --verbose
    sb --verbose --dry-run
    sb --verbose --staging
    sb --bugs=1134424,1133589
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--verbose',                    action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--debug',                      action='store_true', default=False, help='')
    parser.add_argument('--debug-assignee',                                  default=None,  help='')
    parser.add_argument('--dry-run', '--dryrun',        action='store_true', default=True, help='Don\'t modify the bug(s). Should be used with --verbose.', dest='dryrun')
    parser.add_argument('--dryrun-email',               action='store_true', default=True, help='')
    parser.add_argument('--dryrun-derivative-trackers', action='store_true', default=True, help='')
    parser.add_argument('--dryrun-ignore-promotions',   action='store_true', default=False, help='')
    parser.add_argument('--staging',                    action='store_true', default=False, help='Use the staging LP service instead of the production one.')
    parser.add_argument('--sauron',                     action='store_true', default=False, help='I\'m a professional, I know what I\'m doing. (will work on bugs marked \'invalid\')')
    parser.add_argument('--ignore-timestamp',           action='store_true', default=False, help='Don\'t check timestamps during operation.')
    parser.add_argument('--bugs',                                            default=None,  help='A comma seperated list of bug ids. Only these bug ids will be processed.')
    parser.add_argument('--logfile',                                         default=None,  help='Where to log the output.')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(filename=args.logfile, level=DEBUG, format=log_format)
        Clog.dbg = True
    elif args.verbose:
        basicConfig(filename=args.logfile, level=INFO, format=log_format)
    else:
        basicConfig(filename=args.logfile, level=WARNING, format=log_format)

    if args.bugs:
        args.bugs = args.bugs.replace(' ', '')
        if ',' in args.bugs:
            args.bugs = args.bugs.split(',')
        else:
            args.bugs = [args.bugs]

    try:
        app = WorkflowManager(args)
        exit(app.main())
    except HTTPError, err:
        if err.code == 503:
            print 'Launchpad server is down (503)'
        else:
            print 'Launchpad returned error %d' % err.code
            raise

# vi:set ts=4 sw=4 expandtab:

