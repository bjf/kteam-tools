#!/usr/bin/env python3
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from ktl.ubuntu                         import Ubuntu
import json
import yaml

# Crankers
#
class Crankers():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args

    # main
    #
    def main(s):
        retval = 1
        try:
            data = {}
            ubuntu = Ubuntu()
            for series in sorted(ubuntu.index_by_series_name, reverse=True):
                record = ubuntu.index_by_series_name[series]
                if record['supported']:
                    data[series] = {}
                    data[series]['debs'] = []
                    for package in record['packages']:
                        data[series]['debs'].append(package)

            if s.args.yaml:
                print(yaml.dump(data, default_flow_style=False, indent=4, explicit_start=True))

            elif s.args.json:
                print(json.dumps(data, sort_keys=True, indent=4))

            else:
                for series in sorted(data):
                    print(series)
                    print('    debs:')
                    for deb in sorted(data[series]['debs']):
                        print('        ' + deb)

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        if retval > 0:
            print("")
            print("Due to the above error(s), this script is unable to continue and is terminating.")
            print("")

        return retval

if __name__ == '__main__':
    app_description = '''
    '''

    app_epilog = '''
    '''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--yaml', action='store_true', default=False, help='Dump it out in yaml format')
    parser.add_argument('--json', action='store_true', default=False, help='Dump it out in json format')

    args = parser.parse_args()

    exit(Crankers(args).main())

# vi:set ts=4 sw=4 expandtab syntax=python:
