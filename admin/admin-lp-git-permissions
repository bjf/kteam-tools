#!/usr/bin/python3
from __future__ import print_function

from copy                               import deepcopy
import json
import os
import sys
import yaml
import argparse

from launchpadlib.launchpad             import Launchpad

# Add ../libs to the Python search path
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__),
                                              os.pardir, 'libs')))

from ktl.kernel_series                  import KernelSeries

crankers = ['/~canonical-kernel-crankers']

def generate_grant(create=False, push=False, rewind=False, person=None):
    grant = {}

    if person == 'owner':
        grant['grantee_type'] = "Repository owner"
        grant['grantee_link'] = None
    elif person:
        grant['grantee_type'] = "Person"
        grant['grantee_link'] = 'https://api.launchpad.net/devel' + person
    else:
        raise ValueError("owner or person required")

    grant['can_create'] = create
    grant['can_push'] = push
    grant['can_force_push'] = rewind

    return grant

def sort_grants(grants):
    return sorted(deepcopy(grants), key=lambda x: (x['grantee_type'], x['grantee_link']))

def update_rules(git_repo, rules, show=False):
    # Get and sort the rules so we can compare against them.
    current_rules = git_repo.getRules()
    for rule in current_rules:
        rule['grants'] = sort_grants(rule['grants'])

    if current_rules != rules or show is True:
        print(" is:")
        rule_txt = yaml.dump(current_rules, default_flow_style=False)
        for line in rule_txt.split('\n'):
            print("  " + line)

    if current_rules != rules:
        print(" want:")
        rule_txt = yaml.dump(rules, default_flow_style=False)
        for line in rule_txt.split('\n'):
            print("  " + line)
        print(" rules updated")
        git_repo.setRules(rules=rules)

def update_subscriptions(git_repo, crankers):
    if not git_repo.private:
        return

    # For private repositories we need to add an empty subscription
    # for each cranker.  Look up all the existing subscriptions.
    subscriber_seen = set()
    for subscription in git_repo.subscriptions:
        #print(subscription, subscription.person)
        subscriber_seen.add(subscription.person.name)

    for cranker in crankers:
        cranker = cranker[2:]
        if cranker not in subscriber_seen:
            person = lp.people(cranker)
            print(" cranker:")
            print("  " + cranker)
            git_repo.subscribe(person=person,
                code_review_level='No email',
                max_diff_lines="Don't send diffs",
                notification_level='No email')

webhook_url = 'http://10.15.182.10/webhooks'
webhook_events = ['git:push:0.1']
def update_webhooks(git_repo):
    live_hook = None
    for hook in git_repo.webhooks:
        print(hook, hook.delivery_url, hook.event_types, hook.active)
        if hook.delivery_url == webhook_url:
            live_hook = hook
            break
    else:
        live_hook = git_repo.newWebhook(delivery_url=webhook_url, event_types=webhook_events, active=True)

    update_hook = False
    if live_hook.active != True:
        live_hook.active = True
        update_hook = True
    if live_hook.event_types != webhook_events:
        live_hook.event_types = webhook_events
        update_hook = True
    if update_hook:
        live_hook.lp_save()

def list_all(args):
    me = lp.people(args.user)
    for repo in lp.git_repositories.getRepositories(target=me):
        print(repo)
        current_rules = repo.getRules()
        rule_txt = yaml.dump(current_rules, default_flow_style=False)
        for line in rule_txt.split('\n'):
            print("  " + line)
        sys.stdout.flush()

def sync_misc(args):
    kernel_series = KernelSeries()

    admins = '/~canonical-kernel-repo-admins-active'

    series = [x for x in kernel_series.series if x.supported or x.development]
    fw_branches = [(x.codename, x.development) for x in series]

    for repo_path, repo_branches in [
            ['~canonical-kernel/+git/kteam-tools', [('master', False)]],
            ['~canonical-kernel/+git/adt-matrix-hints', [('master', False)]],
            ['~ubuntu-kernel/ubuntu/+source/linux-firmware', [('master', False)] + fw_branches],
            ]:

        rules = []

        for branch, allow_rewind in repo_branches:
            grants = []

            for person in (
                    "/~canonical-kernel-committers",
                    "/~canonical-kernel-hwe-committers",
                    "/~canonical-kernel-tools-committers",
                    ):
                grants.append(generate_grant(person=person, push=True, rewind=allow_rewind))
            grants.append(generate_grant(person=admins, create=True, push=True, rewind=True))
            if admins != 'owner':
                grants.append(generate_grant(person='owner'))
            rules.append(
                {
                    'ref_pattern': "refs/heads/{}".format(branch),
                    'grants': sort_grants(grants),
                },
                )

        git_repo = lp.git_repositories.getByPath(path=repo_path)
        print(git_repo)
        update_rules(git_repo, rules)
        update_subscriptions(git_repo, crankers)
        update_webhooks(git_repo)
        sys.stdout.flush()

def sync_esm(args):
    admins = '/~canonical-kernel-repo-admins-active'

    kernel_series = KernelSeries()


    in_esm = set()
    for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
        if not series.esm:
            continue
        in_esm.add(series.codename)

    grants = []
    grants.append(generate_grant(person=admins, create=True, push=True, rewind=True))
    if admins != 'owner':
        grants.append(generate_grant(person='owner'))
    rules = [
        {
        'ref_pattern': "*",
        'grants': sort_grants(grants),
        },
        ]

    for team_name in ('ubuntu-kernel', 'canonical-kernel'):
        team = lp.people(team_name)
        for git_repo in lp.git_repositories.getRepositories(target=team):
            bits = git_repo.self_link.split('/')
            if bits[-2] != '+git' or bits[-1] not in in_esm:
                continue
            print(git_repo, 'ESM')
            update_rules(git_repo, rules)
            update_subscriptions(git_repo, crankers)
            update_webhooks(git_repo)
            sys.stdout.flush()

# XXX: we need a better way to control this.
def is_hwe(source):
    return source.name.startswith('linux-oem') or source.name in (
            'linux-cascade', 'linux-bluefield', 'linux-denver', 'linux-fde')

def sync_primary(args):
    admins = '/~canonical-kernel-repo-admins-active'

    #for person in (lp.people('ubuntu-kernel'), lp.people('canonical-kernel')):
    #    for repo in lp.git_repositories.getRepositories(target=person):
    #        print(repo, repo.getRules())
    #
    # rules = generate_rules(owner_all=True, people=[
    #     '/~canonical-kernel-committers',
    #     '/~canonical-kernel-hwe-committers',
    #     ])
    #
    #print(json.dumps(uules, sort_keys=True, indent=4))

    kernel_series = KernelSeries()

    repo_things = {}

    for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
        #if series.codename != 'bionic':
        #    continue
        if series.opening_ready('repositories') is False:
            continue

        for source in sorted(series.sources, key=lambda x: x.name):
            #if series.codename != 'bionic' or source.name != 'linux':
            #    continue
            #if series.codename != 'focal':
            #    continue
            #if source.name != 'linux-denver':
            #    continue

            #print("APW", source, source.packages, source.snaps)
            for thing in source.packages + source.snaps:
                #print("APW", thing)
                if thing.repo is None:
                    continue
                url = thing.repo.url

                if 'git.launchpad.net' not in url:
                    continue
                if 'tillamook' in url:
                    continue

                bits = url.split('~', 1)
                if len(bits) != 2:
                    continue

                path = '~' + bits[1]

                repo_things.setdefault(path, []).append(thing)
                #branch = package.repo.branch
                #repo_packages.setdefault(path, []).append(branch)
                #if branch.endswith('-next'):
                #    repo_packages.setdefault(path).append(branch[:-5])

    for (path, path_things) in repo_things.items():
        rules = []
        rules_wild = []
        version_people = dict()

        any_supported = False
        for thing in path_things:
            print(thing, thing.source.development, thing.source.supported)
            if not is_hwe(thing.source) and thing.source.development is False and thing.source.supported is False:
                continue
            #if thing.series.supported is False:
            #    continue

            any_supported = True
            print(thing, thing.source.development, thing.source.supported)

            thing_type = getattr(thing, 'type', 'snap')

            people = ['/~canonical-kernel-committers']
            if is_hwe(thing.source):
                people.append('/~canonical-kernel-hwe-committers')
            #admins = 'owner'
            #if series.esm or package.name.endswith('ibm-gt'):
            #    admins = '/~canonical-kernel-repo-admins'
            # XXX: until we drop people from the ubuntu-kernel and canonical-kernel
            #      we need to bodge their admin-ness away.

            branch = thing.repo.branch
            branches = []
            # Order here matters to launchpad, see LP: #1815431.
            if branch.endswith('-next'):
                branches.append(branch[:-5])
            print(thing, branch)
            branches.append(branch)
            if getattr(thing, 'type', 'other') in (None, 'main'):
                branches.append(branches[0] + '-prep')
            for branch in branches:
                if thing.series.development:
                    rewind = True
                elif thing.source.derived_from is not None and thing_type in (None, 'main'):
                    rewind = True
                elif branch.endswith('-next') or branch.endswith('-prep'):
                    rewind = True
                else:
                    rewind = False
                grants = []
                for person in people:
                    grants.append(generate_grant(person=person, create=True, push=True, rewind=rewind))
                rules.append(
                    {
                        'ref_pattern': "refs/heads/{}".format(branch),
                        'grants': sort_grants(grants),
                    },
                    )

            # TAGS: allow Ubuntu-<branch>- prefixed tags.
            if thing_type == 'snap':
                branch_prefix = '-' + branch
            else:
                branch_prefix = thing.source.name.replace('linux', '')
            branch_prefixes = [ branch_prefix ]
            if branch_prefix.startswith('-pc'):
                branch_prefixes.append(branch_prefix[3:])
            elif branch_prefix.startswith('-lts-'):
                branch_prefixes.append('-lts')
            rewind_tags = thing.series.development
            grants = []
            for person in people:
                grants.append(generate_grant(person=person, create=True, rewind=rewind_tags))
            for branch_prefix in branch_prefixes:
                rules_wild.append(
                    {
                        'ref_pattern': "refs/tags/Ubuntu{}-[0-9]*".format(branch_prefix),
                        'grants': sort_grants(grants),
                    },
                    )

            # TAGS: for main packages allow version tags to be pushed too.
            if thing_type in (None, 'main'):
                pkg_versions = thing.source.versions
                if pkg_versions is not None:
                    for version in pkg_versions:
                        for person in people:
                            version_people.setdefault(version, set()).add(person)

        # Add the administrator rules.
        grants = []
        series = path_things[0].series
        grants.append(generate_grant(person=admins, create=True, push=True, rewind=True))
        if admins != 'owner':
            grants.append(generate_grant(person='owner'))

        # Add versioned tag rules.
        for version, people in version_people.items():
            if version.endswith('.0'):
                version = version[:-2]
            vgrants = []
            for person in people:
                vgrants.append(generate_grant(person=person, create=True, push=True, rewind=rewind_tags))
            vgrants += grants
            rules_wild.append(
                {
                    'ref_pattern': "refs/tags/v{}*".format(version),
                    'grants': sort_grants(vgrants),
                },
                )

        rules_wild.append(
            {
                'ref_pattern': "*",
                'grants': sort_grants(grants),
            },
            )

        # XXX: build rules to avoid launchpad Assertion.
        rules_wild = sorted(rules_wild, key=lambda x: x['ref_pattern'])
        rules = sorted(rules, key=lambda x: x['ref_pattern'])
        rules += rules_wild

        git_repo = lp.git_repositories.getByPath(path=path)
        if git_repo is None:
            print("  invalid repository path {} for {}".format(path, thing.name))
            continue
        print(git_repo)
        update_rules(git_repo, rules)
        update_subscriptions(git_repo, crankers)
        update_webhooks(git_repo)
        sys.stdout.flush()

def sync_all(args):
    print("SYNC: primary")
    sync_primary(args)
    print("SYNC: esm")
    sync_esm(args)
    print("SYNC: misc")
    sync_misc(args)

desc = "List or update permissions for kernel team repositories in Launchpad."
parser = argparse.ArgumentParser(description=desc)

subparsers = parser.add_subparsers(help="commands", dest="command", required=True)

subparser = subparsers.add_parser("list-all", help="list permissions for users")
subparser.add_argument("user", help="launchpad user")
subparser.set_defaults(func=list_all)

subparser = subparsers.add_parser("sync-misc", help="update misc repository permissions")
subparser.set_defaults(func=sync_misc)

subparser = subparsers.add_parser("sync-esm", help="update ESM repository permissions")
subparser.set_defaults(func=sync_esm)

subparser = subparsers.add_parser("sync-primary", help="update primary repository permissions")
subparser.set_defaults(func=sync_primary)

subparser = subparsers.add_parser("sync-all", help="update all repository permissions")
subparser.set_defaults(func=sync_all)

args = parser.parse_args()

lp = Launchpad.login_with('admin-lp-git-permissions', 'production', version='devel')
args.func(args)
