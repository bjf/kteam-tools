#!/bin/bash

queue='/home/kernel-ppa/kteam-tools/mainline-build/mainline-work-kmsgq'

find public_html/test-build/ -name '*.log' -print | \
while read log
do
    which=$( grep \
            -e "dpkg-deb: error: obsolete compression type 'bzip2'; use xz or gzip instead" \
            -e "dpkg-deb (subprocess): compressing tar member: lzma error: Cannot allocate memory" \
            -e "No space left on device" \
            -e "/usr/bin/python3: bad interpreter: No such file or directory" \
            -e "dpkg-buildpackage: unknown option or argument" \
            -e "aarch64-linux-gnu-gcc: command not found" \
            -e "dpkg-deb: error: invalid compressor parameters: unknown compression strategy" \
            -e "Cannot use CONFIG_CC_STACKPROTECTOR_STRONG: -fstack-protector-strong not supported by compiler" \
            -e "-- -Zgzip -- -Zgzip" \
            -e "Error: attempt to move .org backwards" \
            -e 'error: code model kernel does not support PIC mode' \
            -e "tail: cannot open 'debian/changelog' for reading: No such file or directory" \
            -e ": chroot not found (" \
            -e "fatal: empty ident name (for" \
        "$log" | head -1
    )
    case "$which" in
    *"dpkg-deb: error: obsolete compression type 'bzip2'; use xz or gzip instead"*)
        which='use xz or gzip instead' ;;
    *"dpkg-deb (subprocess): compressing tar member: lzma error: Cannot allocate memory"*)
        which='Cannot allocate memory' ;;
    *"No space left on device"*)
        which='Out of disk space' ;;
    *"/usr/bin/python3: bad interpreter: No such file or directory"*)
        which='No python3 in chroot' ;;
    *"dpkg-buildpackage: unknown option or argument"*)
        which='bad -a usage in older releases' ;;
    *"aarch64-linux-gnu-gcc: command not found"*)
        which='missing cross-compilers' ;;
    *"dpkg-deb: error: invalid compressor parameters: unknown compression strategy"*)
        which='compression strategy' ;;
    *"Cannot use CONFIG_CC_STACKPROTECTOR_STRONG: -fstack-protector-strong not supported by compiler"*)
        which='reset failure' ;;
    *"-- -Zgzip -- -Zgzip"*)
        which='double Zgzip' ;;
    *"Error: attempt to move .org backwards"*)
        which='wrong source' ;;
    *"error: code model kernel does not support PIC mode"*)
        which='PIC mode' ;;
    *"tail: cannot open 'debian/changelog' for reading: No such file or directory"*)
        which='did not clean' ;;
    *": chroot not found ("*)
        which='broken chroots' ;;
    *"fatal: empty ident name (for"*)
        which='broken git configuration' ;;
    esac
#    if [ "$count" -eq 0 ]; then
#        count=$( grep -c "dpkg-deb: error: obsolete compression type 'bzip2'; use xz or gzip instead" "$log" )
#        which='use xz or gzip instead'
#    fi
#    if [ "$count" -eq 0 ]; then
#        count=$( grep -c "dpkg-deb (subprocess): compressing tar member: lzma error: Cannot allocate memory" "$log" )
#        which='Cannot allocate memory'
#    fi
#    if [ "$count" -eq 0 ]; then
#        count=$( grep -c "No space left on device" "$log" )
#        which='Out of disk space'
#    fi
#    if [ "$count" -eq 0 ]; then
#        count=$( grep -c "/usr/bin/python3: bad interpreter: No such file or directory" "$log" )
#        which='No python3 in chroot'
#    fi
#    if [ "$count" -eq 0 ]; then
#        count=$( grep -c "dpkg-buildpackage: unknown option or argument" "$log" )
#        which='bad -a usage in older releases'
#    fi
#    if [ "$count" -eq 0 ]; then
#        count=$( grep -c "aarch64-linux-gnu-gcc: command not found" "$log" )
#        which='missing cross-compilers'
#    fi
    if [ "$which" != '' ]; then
        echo "$(dirname "$log") $which"
    fi
    count=0
    if [ "$count" -gt 0 ]; then
        #echo "$log $which" 1>&2
        echo "$(dirname "$log") $which"
    fi
done | sort -u | \
while read dir which
do
    echo "$queue $( cat "$dir/REBUILD" )  # $which"
done
#
#        dir=$( dirname "$log" )
#        echo "# $dir ... $which ($count)"
#        if [ -f "$dir/REBUILD" ]; then
#            echo "$queue $( cat "$dir/REBUILD" )"
#            continue;
#        fi
#        read tag <"$dir/COMMIT"
#        case "$tag" in
#        v*)
#            echo "# INTUITED"
#            echo "$queue mainline-build crack $tag"
#            ;;
#        cod/tip/*)
#            IFS="/" read junk junk base date <"$dir/COMMIT"
#            case "$base" in
#            daily)              abi=999 ;;
#            drm-next)           abi=996 ;;
#            drm-intel-next)     abi=997 ;;
#            drm-intel-nightly)  abi=994 ;;
#            drm-tip)            abi=994 ;;
#            *)                  abi=999 ;;
#            esac
#    
#            echo "# INTUITED"
#            echo "$queue mainline-build crack $tag $abi $base $date"
#            ;;
#        esac
#        ##egrep -h " $tag( |$)" $HOME/logs/cod-enqueue-2017-*
#    fi
#done
