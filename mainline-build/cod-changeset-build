#!/bin/bash
P='cod-changeset-build'

# Options.

# If the order is missing throw a 0 in, this allows rebuilds to work.
if [ "$#" -eq 5 ]; then
	set - "$@" 0
fi
if [ "$#" -ne 6 ]; then
	echo "Usage: $0 <series> <package> <remote> <commit-ish> <id> <order>" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

. "$here/lib-build"
. "$here/lib-chroot"

series="$1"
package="$2"
remote="$3"
commit="$4"
id="$5"
order="$6"

master_tree_select

result="../RESULT"
rm -rf "$result"
mkdir -p "$result"

echo "$P '$series' '$package' '$remote' '$commit' '$id'" >"$result/REBUILD"

# Ensure we have the commit identified.
repo_remote_update_list $remote

build_release="$series"

# Make sure git is ready for anything...
rm -rf .git/rebase-apply
git reset --hard HEAD
git clean -x -f -d

# Make a branch at the specified commit.
git checkout HEAD^ --
git branch -D "changeset-$id" || true
git checkout -b "changeset-$id" "$commit"

# Arbitrary patch trigger support.
adhoc="$here/adhoc"
for trigger in "$adhoc"/*.trigger
do
	[ -x "$trigger" ] && "$trigger" "$series" "$build_release"
done

# Find the commit time.
sha=$( git log -1 --pretty=format:%H "$commit" )
cts=$( git log -1 --pretty=format:%ct "$commit" )
cts="$cts.$order"
title=$( git log -1 --pretty=format:%s "$commit" )

# Clean the tree so we can tell what architectures need building.
git clean -x -f -d
do_chroot "$build_release-amd64" \
	fakeroot debian/rules clean
archs=$(
	grep Architecture debian/control |
	awk '{ for (c=2; c <= NF; c++) { print $c } }' |
	sed -e 's/all/amd64/' |
	sort -u
)

host=$( hostname )
time=$( date +%s )
cat - <<EOL >"$result/SUMMARY"
Host: $host
Series: $series
Package: $package
Subject: $title
Hash: $sha
Id: $id
Committed: $cts
Start: $time
EOL
for arch in $archs
do
	case "$arch" in
	all|x32)	continue ;;
	amd64)		build=-b ;;
	*)		build=-B ;;
	esac

	case "$arch" in
	amd64|i386)	barch="$arch" ;;
	*)		barch="amd64" ;;
	esac

	echo "build $arch on $barch ..."

	# Make things shiney.
	git clean -x -f -d
	do_chroot "$build_release-amd64" \
		fakeroot debian/rules clean
	{
		version=$(do_chroot_quiet "$build_release-$barch" dpkg-buildpackage --version | \
			awk '(found == 1) {next;} {found=1; print $NF;}')
		echo "dpkg-buildpackage version=$version"
		opts="-uc"
		if dpkg --compare-versions "$version" ge "1.18.19"; then
			opts="$opts -ui"
		fi
		do_chroot "$build_release-$barch" \
			dpkg-buildpackage $opts -a"$arch" "$build" -d
		rc="$?"
		echo "$rc" >"$result/$arch.status"
	} 2>&1 | tee -a "$result/$arch.log"
	read rc <"$result/$arch.status"
	echo "Status: $arch $rc" >>"$result/SUMMARY"
	echo "build $arch on $barch ... rc=$rc"
done

time=$( date +%s )
echo "End: $time" >>"$result/SUMMARY"

# Clean out any build artifacts ...
rm -f "$master_main"/*.deb "$master_main"/*.udeb "$master_main"/*.tar.gz

# Output.
publish="$HOME/public_html/test-build/$series/$package/$id--$sha"
mkdir -p "$publish"
mv "$result"/* "$publish"
