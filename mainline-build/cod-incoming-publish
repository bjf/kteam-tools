#!/bin/bash
#
# cod-incoming-publish -- pull publishable images out of incoming and 
# install them, upload them, and/or announce them as required.
#
P="cod-incoming-publish"

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

incoming="$HOME/incoming"
lock_tmp="$incoming/.LOCK-$$"
lock="$incoming/.LOCK"

outgoing="$HOME/public_html/mainline"

# One at a time please...
mkdir -p "$incoming"

echo "$$" >"$lock_tmp"
while ! ln "$lock_tmp" "$lock" 2>/dev/null
do
    echo "$P: incoming locked ... waiting" 1>&2
    sleep 15
done
rm -f "$lock_tmp"

# Pull out any published images ...
(cd "$incoming/mainline" && find . -name COMMIT) | \
while read commit
do
	build=`dirname "$commit"`
	build=${build#./}

	echo "$P: $build: publishing ..."
	announce=-2
	if [ -d "$outgoing/$build" ]; then
		echo "$P: $build: result already published, removing previous ..."
		rm -rf "$outgoing/$build"
		announce=-1
	fi
	mkdir -p "$outgoing/`dirname "$build"`"
	mv "$incoming/mainline/$build" "$outgoing/$build" && \
	{
		# Sign the publication.
		rm -f "$outgoing/$build/CHECKSUMS.gpg"
		gpg -a -b --sign --output "$outgoing/$build/CHECKSUMS.gpg" "$outgoing/$build/CHECKSUMS"

		case "$build" in
		*/*)	;;
		*)	announce="${announce#-}" ;;
		esac
	}
	if [ "$announce" -gt 0 ]; then
		echo "$P: $build: announcing ..."
		"$here/mainline-announce" `head -1 "$outgoing/$build/COMMIT"` "$build" "$announce"
	fi
done

# Look for any uploads for various PPAs.
for ppa in 'test-devel' 'pre-proposed'
do
	(
		cd "$incoming/upload/$ppa" || exit 1
		mkdir -p failed

		for package in *_source.changes
		do
			package=${package%_source.changes}
			if [ "$package" = "*" ]; then
				continue
			fi

			echo "$P: $package: uploading ..."

			# Sign the package we are meant to be uploading.
			echo "n" | debsign -kkernel-ppa "${package}_source.changes"

			# And upload it.
			dput "$ppa" ${package}_source.changes && \
				rm -f "${package}"* || mv "${package}"* failed
		done
	)
done

# Copy in incoming configuration dumps.
mkdir -p "$HOME/public_html/config"
cp -rp "$HOME/incoming/config/" "$HOME/public_html/"

# Finally re-evaluate any 'current' links.
(
	cd "$outgoing" || exit 1

	find . -name current | \
	while read current
	do
		dir=`dirname "$current"`
		latest=`ls -1 "$dir" | grep -v '^current$' | tail -1`

		is=`readlink "$current"`
		if [ "$is" != "$latest" ]; then
			echo "$P: $dir: updating current to $latest"
			rm -f "$current"
			ln -s "$latest" "$current"
		fi
	done
)
# We are done.
rm -f "$lock"

echo "$P: publishing run complete"
