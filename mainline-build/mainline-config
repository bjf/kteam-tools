#!/usr/bin/python3
from __future__ import print_function

import sys
import textwrap

from ktl.kernel_series import KernelSeries

def usage():
    print("""
Usage: mainline-config <mode>
       mode:
         lib-build      -- repository configuration for lib-build
         changeset      -- supported packages for changeset tracking
          """.strip(), file=sys.stderr)
    sys.exit(1)

if len(sys.argv) != 2:
    usage()

mode = sys.argv[1]

kernel_series = KernelSeries()

if mode == 'lib-build':
    for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
        if not series.opening_ready('repositories'):
            continue
        for source in sorted(series.sources, key=lambda x: x.name):
            for package in sorted(source.packages, key=lambda x: x.name):
                repo = package.repo
                if repo:
                    if source.name == 'linux' and package.name == source.name:
                        print("repo_remote_url_set '{}' '{}';".format(series.codename, repo.url))
                    print("repo_remote_url_set '{}--{}' '{}';".format(series.codename, package.name, repo.url))

    version_hint = None
    version_map = {}
    version_supported = {}
    version_development = {}
    for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
        if not series.opening_ready('repositories', 'chroots'):
            continue
        for source in series.sources:
            if source.name != 'linux' or not source.versions:
                continue

            version = source.versions[-1]
            if version.endswith('.0'):
                version = version[:-2]

            version_hint = version
            version_map[version] = series.codename
            if series.supported and not series.esm:
                version_supported[version] = True
            if series.development:
                version_development[version] = True

    supported_map = {}
    supported = None
    series_latest = None
    series_first = None
    for series in sorted(kernel_series.series, key=KernelSeries.key_series_name, reverse=True):
            if not series.opening_ready('repositories', 'chroots'):
                continue
            if series.supported or series.development:
                supported = series.codename
            supported_map[series.codename] = supported
            if not series_latest:
                series_latest = supported
            series_first = supported

    # Build a wider list of versions so we can enumerate them for
    # the validators.
    version_cursor = [2, 6, 1]
    version_list = []
    while True:
        version = ".".join(map(str, version_cursor))
        version_list.append(version)
        version_cursor[-1] = version_cursor[-1] + 1
        if version_cursor == [2, 6, 40]:
            version_cursor = [3, 0]
        elif len(version_cursor) == 2 and version_cursor[-1] == 20:
            version_cursor = [version_cursor[0] + 1, 0]
        if version == version_hint:
            break

    # Emit a shell mapping from version to series.
    print(textwrap.dedent("""
        map_version_to_series()
        {
            case $1 in
        """).strip())
    series = 'unstable'
    version_list.reverse()
    for version in version_list:
        series = version_map.get(version, series)
        print("    {version}|{version}.*)\tRET='{series}' ;;".format(version=version, series=series))
    print(textwrap.dedent("""\
            *)\tRET='unstable' ;;
            esac;
        };
        """).rstrip())

    print(textwrap.dedent("""
        map_series_to_build_series()
        {
            case "$1" in
        """).strip())
    for (series, supported) in supported_map.items():
        print("    {series})\tRET='{supported}' ;;".format(series=series, supported=supported))
    print("    {series})\tRET='{supported}' ;;".format(series='*', supported=series_latest))
    print(textwrap.dedent("""\
            esac;
        };
        """).strip())

    print(textwrap.dedent("""
        live_version_tags_pattern()
        {{
            RET="{tags}";
        }};
        """).strip().format(tags="v" + ".*|v".join(version_supported.keys()) + '.*'))

    print(textwrap.dedent("""
        dev_version_tags_pattern()
        {{
            RET="{tags}";
        }};
        """).strip().format(tags="v" + ".*|v".join(version_development.keys()) + '.*'))

elif mode == 'changeset':
    for series in sorted(kernel_series.series, key=KernelSeries.key_series_name):
        if not series.opening_ready('repositories', 'chroots'):
            continue
        if not series.supported and not series.development:
            continue
        # The bot cannot currently get these sources.
        if series.esm:
            continue
        for source in sorted(series.sources, key=lambda x: x.name):
            if not source.supported:
                continue

            if source.derived_from or source.copy_forward:
                continue

            for package in sorted(source.packages, key=lambda x: x.name):
                if package.type not in (None, 'main'):
                    continue

                repo = package.repo
                if not repo:
                    continue
                branch = repo.branch

                print(series.codename, source.name, branch)
else:
    usage()
