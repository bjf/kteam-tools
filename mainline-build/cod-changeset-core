#!/bin/bash
P='cod-changeset-core'

# Options.
if [ "$#" -ne 6 ]; then
	echo "Usage: $0 <series> <package> <remote> <commit-ish> <id> <order>" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

. "$here/lib-build"
. "$here/lib-chroot"

series="$1"
package="$2"
remote="$3"
commit="$4"
id="$5"
order="$6"

build_release="$series"
build_arch=$(dpkg --print-architecture)

master_tree_select

result="../RESULT"
rm -rf "$result"
mkdir -p "$result"

echo "$P $series $package $remote $commit $id $order" >"$result/REBUILD"

host=$( hostname )
start_time=$( date +%s )

# Ensure we have the commit identified.
repo_remote_update_list $remote

# Make sure git is ready for anything...
rm -rf .git/rebase-apply
git reset --hard HEAD
git clean -x -f -d

# Make a branch at the specified commit.
git checkout HEAD^ --
git branch -D "tip-$id" || true
git checkout -b "tip-$id" "$commit"

# Find the commit time.
sha=$( git log -1 --pretty=format:%H "$commit" )
cts=$( git log -1 --pretty=format:%ct "$commit" )
cts="$cts.$order"
title=$( git log -1 --pretty=format:%s "$commit" | sed -e "s/'/''/g" )

# Clean the tree so we can tell what architectures need building.
git clean -x -f -d
do_chroot "$build_release-$build_arch" \
	fakeroot debian/rules clean
archs=$(
	grep Architecture debian/control |
	awk '{ for (c=2; c <= NF; c++) { print $c } }' |
	sed -e 's/all/amd64/' |
	sort -u
)

build_archs=""
for arch in $archs
do
	case "$arch" in
	all|x32)	continue ;;
	*)		;;
	esac

	build_archs="$build_archs $arch"
done

build_archs_list=$(echo "$build_archs" | sed -e 's/^ */[/' -e 's/ *$/]/' -e 's/  */, /g')

end_time=$( date +%s )
cat - <<EOL >"$result/summary.yaml"
build-host: $host
testsets: $build_archs_list
series: $series
commit: $commit
commit-title: '$title'
commit-time: $cts
commit-hash: $sha
commit-label: $id
start-time: $start_time
end-time: $end_time
package: $package
EOL

# Priority inheritance.
priority=
if [ -n "$CONTEXT_PRIORITY" ]; then
	priority="--priority $(($CONTEXT_PRIORITY - 1)) "
fi

# Drop a set of messages to enqueue.
for arch in $build_archs
do
	echo "${priority}cod-tip-build.$arch $series $remote $commit $arch test-build/$series/$package/$id--$sha"
done >"$result/REBUILD.submit"

# Finally mark this as a partial result.
echo "core" >"$result/@publish@"

# Output.
publish="$HOME/public_html/test-build/$series/$package/$id--$sha"
mkdir -p "$publish"
mv "$result"/* "$publish"
