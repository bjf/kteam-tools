#!/bin/bash
P="cod-changeset-trigger"

set -e

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

. "$here/lib-build"

# Ensure we have our state directory.
mkdir -p "$master_main/state/changeset"

#
# UBUNTU SOURCE: tips of the ubuntu trees et al
#
now_tm=`date +%s`
date=`date +%Y%m%d%H%M`

repo="linux"

# Work out where we are going to push the tags et al to.
repo_remote_url "crack-push"; push_url="$RET"

"$here/mainline-config" 'changeset' | \
while read series package branch
do
	current="${series}_${package}_${branch}"
	curr="$master_main/state/changeset/$current"
	remote="$series--$package"
	branch="$remote/$branch"

	repo_update_remote "$repo" "$remote"

	tip=$( cd "$master_main/$repo" && git log -1 --format=%H "$branch" )
	if [ ! -f "$curr" ]; then
		echo "previously unscanned tip, only rebuilding tip"
		prev=$( cd "$master_main/$repo" && git log -1 --format=%H "$branch^" )
		echo "$prev" >"$curr.new"
		mv -f "$curr.new" "$curr"
	fi
	prev=$( cat "$curr" )

	echo "repo<$repo> branch<$branch> tip<$tip> prev<$prev> curr<$curr>"

	# If the tip matches our last upload then there is nothing to do.
	if [ "$tip" = "$prev" ]; then
		echo "nominal tip unchanged, skipping"
		continue
	fi

	(
		cd "$master_main/$repo" || exit 1

		"$here/git-changeset" "$prev" "$tip" | \
		while read sha1 changeset order title
		do
			# We cannot assume any remote machine has this sha1 so tag it with a
			# temporary name, and publish that into the crack repository.
			tag="cod/changeset/$series/hash--$sha1"
			git tag -d "$tag" || true
			git tag "$tag" "$sha1"

			# Note if this fails the job will fail, but it is better that the job
			# is created and logged so we can rerun it rather than never knowing
			# about it.
			git push --force "$push_url" tag "$tag"

			# Queue up the build.
			"$here/cod-enqueue" "cod-changeset-core" \
				"$series" "$package" "crack" "$tag" "$changeset" "$order"
		done
	)
		
	# Commit the new tip.
	echo "$tip" >"$curr.new"
	mv -f "$curr.new" "$curr"
done
