#! /bin/bash

P="build-mainline-one"

if [ "$#" -ne 2 -a "$#" -ne 3 ]; then
	echo "Usage: $P <tag> <series> [<abinum>" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

commit="$1"
series="$2"
abinum="$3"

# Previous LTS.
#case "$series" in
#hardy)					build_release="hardy" ;;
#lucid|maverick|natty|oneiric) 		build_release="lucid" ;;
#precise|quantal|raring|saucy)		build_release="precise" ;;
#trusty|*)				build_release="trusty" ;;
#esac

# We cannot use the previous LTS as we are tied somewhat to compiler
# versions and features in later releases.
case "$series" in
hardy|intrepid|jaunty|karmic|lucid|maverick|natty|oneiric|precise|quantal|raring|saucy)
	build_release="precise" ;;
trusty|utopic)
	build_release="trusty" ;;
unstable)
	build_release="artful" ;;
*)
	build_release="$series" ;;
esac

# Arches to build
case "$series" in
hardy|lucid)			arches="amd64 i386" ;;
maverick|natty|oneiric)		arches="amd64 i386 armel" ;;
precise|quantal)		arches="amd64 i386 armel armhf" ;;
raring|saucy)			arches="amd64 i386 armhf" ;;
trusty|utopic|vivid|wily)	arches="amd64 i386 armhf ppc64el" ;;
*)				arches="amd64 i386 armhf arm64 ppc64el s390x" ;;
esac

{
	time=`date +%s`
	echo "Release: $build_release"
	echo "Host: `hostname`"
	echo "Start: $time"
} >../BUILT

slist="`schroot --list 2>/dev/null | sed -e 's/^/ /' -e 's/$/ /'`"
dlist="`dchroot -l 2>/dev/null`,"
do_chroot()
{
	typeset chroot="$1"
	typeset series
	typeset cmd
	shift

	# Some systems use <series> for <series>-amd64, so try both.
	series="${chroot%-amd64}"
	case "$slist$dlist" in
	*\ $chroot[\ ,]*)	;;
	*\ $series[\ ,]*)	chroot="$series" ;;
	*)	echo "$chroot: chroot not found ($slist::$dlist)" 1>&2; exit 1 ;;
	esac

	# Ok we do have the chroot in one of the tools, fire it up.
	case "$slist" in
	*\ $chroot[\ ,]*)	cmd='schroot' ;;
	*)			cmd='dchroot' ;;
	esac
	echo -- "$cmd" -c "$chroot" --directory=`pwd` -- "$@"
	"$cmd" -c "$chroot" --directory=`pwd` -- "$@"
}

echo "*** BUILDING: commit:$commit series:$series abinum:$abinum ..."

log_enabled=1

long=`git describe "$commit"`
if [ "$?" -ne 0 ]; then
	echo "$P: $commit: invalid commit" 1>&2
	exit 1
fi
#case "$long" in
#v*-*[0-9]-g*)
#	full_version="${long#v}"
#	full_version="${full_version%-*}"
#	full_version="${full_version%-*}"
#	long_abinum="$full_version${long##*-}"
#	log_enabled=1
#	;;
#v*)
#	full_version="${long#v}"
#	long_abinum="$full_version"
#	log_enabled=1
#	;;
#*)
#	echo "$P: $commit: mapped to '$long' unable to process" 1>&2
#	exit 1
#esac
full_version=`git cat-file -p "$commit:Makefile" | awk '
	/^VERSION/	{ version=$3 }
	/^PATCHLEVEL/	{ patchlevel=$3 }
	/^SUBLEVEL/	{ sublevel=$3 }
	/^EXTRAVERSION/	{ extraversion=$3 }
	END		{ print version "." patchlevel "." sublevel extraversion }
'`

if [ "$abinum" = "" ]; then
	abinum="$full_version"
fi

# use the date as an upload number so we can tell different builds apart.
upload=".`date +%Y%m%d%H%M`"

# Produce CHANGES fragment.
if [ "$log_enabled" -eq 1 ]; then
	log_from=`git describe "$commit^"`
	if [ "$?" -eq 0 ]; then
		log_from="${log_from%-*}"
		log_from="${log_from%-*}"

		git shortlog "$log_from..$commit" >"../CHANGES"
	fi
fi

# The base version is always the first X.Y.Z part of the version number.  If we
# do not maintain this then the modules directory will not match uname -r.
version=`echo "$full_version" | cut -d. -f1-3 | cut -d- -f1`
if [ "$(echo $version|cut -d. -f3)" = "" ]; then
	version="${version}.0"
fi

# Encode the real version number as the ABI.  We encode the version
# number by expanding the numbers to be at least 2 digits and removing the
# '.' and '-' characters, for example:
#
#  2.6.27.12	02062712
#  2.6.29-rc3   020629rc3
#
abinum=`echo "$abinum" | awk -F'[.-]' '{
	for (i = 1; i <= NF; i++) {
		if ($i ~ /^[0-9][0-9]*$/) {
			printf("%02d", $i);
		} else {
			printf("%s", $i);
		}
	}
}'`

echo "full_version<$full_version>"
echo "version<$version>"
echo "long<$long>"
echo "abinum<$abinum>"

# NOTE: a - in the branch name seems to be causing issues.
branch="BUILD.$abinum"
branch=`echo "$branch" | sed -e 's/-/./g'`

# Make sure git is ready for anything...
rm -rf .git/rebase-apply
git clean -x -f -d

# Ensure we get the uptodate machinary.
git fetch "$series"
git checkout HEAD^ --
git branch -D "$branch"

# Ensure the source directory is pristine before we start.
rm -rf .dotest

#
# Checkout the source at the specified version.
#
git checkout -b "$branch" "$commit" -- || exit 1

# Report the head for posterity.
echo "vvv - build head"
git log -1 HEAD
echo "^^^ - build head"

#
# Pull in the packaging from the head of our tree.
#
git checkout "$series/master" -- debian || \
	git checkout "$series/master-next" -- debian
git checkout "$series/master" -- debian.master || \
	git checkout "$series/master-next" -- debian.master

# Disable the ABI, module, and aliases checks.
for i in debian/scripts/*-check debian.master/scripts/*-check debian.master/reconstruct
do
	if [ -f "$i" ]; then
		cat - <<EOM >"$i"
#!/bin/sh
exit 0
EOM
		chmod 755 "$i"
	fi
done

# Ensure we do not have any unexpected version tags.
rm -f localversion-*

# Commit the packaging.
git commit -a -m "base packaging"

# Arbitrary patch trigger support.
adhoc="$here/adhoc"
for trigger in "$adhoc"/*.trigger
do
	[ -x "$trigger" ] && "$trigger" "$series" "$build_release"
done

# Find our debian directory.
for debian in "debian.master" "debian"
do
	[ -d "$debian" ] && break
done 

# Identify the last Ubuntu version which used the same main version
# to use for the configs.
find=`echo "$full_version" | cut -d. -f1-2 | cut -d- -f1`.9999999

found="0"
fbranch=""
for branch in master-next master
do
	let off=-1
	while :
	do
		let "off=$off+1"
		fversion=`git cat-file -p "$series/$branch:debian.master/changelog" | \
			    dpkg-parsechangelog -l- --count 1 --offset "$off" | awk '
			BEGIN				{ v="END"; }
			/^Version:/			{ v=$2; last }
			END				{ print v }
		'`
		[ "$fversion" = 'END' ] && break
		dpkg --compare-versions "$fversion" lt "$find" && break
	done

	[ "$fversion" = 'END' ] && continue
	dpkg --compare-versions "$fversion" lt "$found" && break
	found="$fversion"
	fbranch="$branch"
done
configs="Ubuntu-$found"

#
# Rebuild the changelog.
#
changelog="$debian/changelog"
rm -f "$changelog"

{
	cat - <<EOL
linux (${version}-$abinum$upload) $series; urgency=low

  Mainline build at commit: $long

 -- Mainline Build <$(id -n -u)@$(hostname)>  $(date -R)

EOL
	cat "$changelog"
} >"$changelog.new"
mv -f "$changelog.new" "$changelog"
git commit -a -m "debian changelog"

#
# Pull the specified version of the configs and default any new
# configuration options.
#
echo "*** using configs from $configs ($fbranch) ..."
git checkout "$configs" -- debian.master/config || git checkout "$series/$fbranch" -- debian.master/config

if [ -f "$here/config.$series" ]; then
	cp "$here/config.$series" "$debian/config/OVERRIDES"
fi
#BUILD_CONFIG_OVERRIDE="$here/config.$series"
do_chroot "$build_release-amd64" \
	fakeroot debian/rules clean defaultconfigs
git commit -a -m "configs (based on $configs)"

#
# Record the patches.
#
git format-patch -o ".." "$commit..HEAD"

# Ensure the build directories are pristine.
git clean -x -f -d

build_common()
{
	:
#	cat - <<EOM
#	ccache="$CCACHE_DIR"
#EOM
#	cat - <<'EOM'
#	if [ "$ccache" != "" -a -d /usr/lib/ccache ]; then
#		export PATH=/usr/lib/ccache:$PATH
#		export CCACHE_DIR="$ccache"
#
#		echo "Using ccache in $CCACHE_DIR"
#		test -d $CCACHE_DIR || mkdir -p $CCACHE_DIR
#	fi
#EOM
}

#
# Build the source package.
#
#dpkg-buildpackage -S -sd -rfakeroot -I.git -I.gitignore -i'\.git.*'
#dpkg-buildpackage -b
echo "-+++- begin binary-headers -+++-"
do_chroot "$build_release-i386" \
	fakeroot debian/rules clean
do_chroot "$build_release-i386" \
	fakeroot debian/rules do_tools=0 no_dumpfile=1 binary-headers
echo "-+++- status binary-headers $? -+++-"
echo "-+++- end binary-headers -+++-"
for arch in $arches; do
	if [ "$arch" = 'amd64' -o "$arch" = 'i386' ]; then
		carch=$arch
		cross_prefix=""
		cross_overrides=""
	else
		carch='amd64'
		cross_prefix="dpkg-architecture -a$arch -c"
		cross_overrides=""

		if [ "$arch" = "ppc64el" ]; then
			cross_overrides="BOOT_TARGETS1=vmlinux.strip"
		fi
	fi
	echo "-+++- begin $arch -+++-"
	do_chroot "$build_release-$carch" \
		fakeroot debian/rules clean
	{
	        build_common
		# fakeroot is very slow, only use for packaging as per
		# dpkg-buildpackage.
	        cat - <<-EOM
	        $cross_prefix debian/rules $cross_overrides do_mainline_build=true do_extras_package=false do_tools=0 no_dumpfile=1 build-arch
	        $cross_prefix fakeroot debian/rules $cross_overrides do_mainline_build=true do_extras_package=false do_tools=0 no_dumpfile=1 binary-debs
		echo "-+++- status $arch \$? -+++-"
		EOM
	} | do_chroot "$build_release-$carch" "/bin/bash"
	echo "-+++- end $arch -+++-"
done

{
	echo "Debian: $series"
	echo "Configs: $configs"
	time=`date +%s`
	echo "End: $time"
} >>../BUILT
