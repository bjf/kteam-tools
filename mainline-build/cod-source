#! /bin/bash

P="cod-source"

if [ "$#" -ne 5 -a "$#" -ne 6 ]; then
	echo "Usage: $P <ppa> <repo> <series> <commit> <tag> [<abi override>]" 1>&2
	exit 1
fi

here=`dirname $0`
case "$here" in
/*) ;;
*)  here="`pwd`/$here" ;;
esac

. "$here/lib-build"

ppa="$1"
repo="$2"
series="$3"
commit="$4"
tag="$5"
abi="$6"

slist="`schroot --list 2>/dev/null | sed -e 's/^/ /' -e 's/$/ /'`"
dlist="`dchroot -l 2>/dev/null`,"
do_chroot()
{
	typeset chroot="$1"
	typeset series
	typeset cmd
	shift

	# Some systems use <series> for <series>-amd64, so try both.
	series="${chroot%-amd64}"
	case "$slist$dlist" in
	*\ $chroot[\ ,]*)	;;
	*\ $series[\ ,]*)	chroot="$series" ;;
	*)	echo "$chroot: chroot not found ($slist::$dlist)" 1>&2; exit 1 ;;
	esac

	# Ok we do have the chroot in one of the tools, fire it up.
	case "$slist" in
	*\ $chroot[\ ,]*)	cmd='schroot' ;;
	*)			cmd='dchroot' ;;
	esac
	echo -- "$cmd" -c "$chroot" --directory=`pwd` -- "$@"
	"$cmd" -c "$chroot" --directory=`pwd` -- "$@"
}

echo "*** BUILDING SOURCE: ppa:$ppa repo:$repo commit:$commit series:$series tag:$tag..."

build_release="precise"

repo_update_ubuntu "$repo" "$series"

master_tree="$master_main/$repo"

cd "$master_tree" || exit 1

# NOTE: a - in the branch name seems to be causing issues.
branch="BUILD.source.$series"
branch=`echo "$branch" | sed -e 's/-/./g'`

# Ensure we get the uptodate machinary.
git fetch "$series"
git checkout -f "$series/master"
git branch -D "$branch"

#
# Checkout the source at the specified version.
#
git checkout -b "$branch" "$commit" -- || exit 1

# Ensure the build directories are pristine.
git clean -x -f -d

# Report the head for posterity.
echo "vvv - build head"
git --no-pager log -1 HEAD
echo "^^^ - build head"

#
# Rebuild the changelog.
#
if [ -f 'debian/debian.env' ]; then
	debian=`sed -ne 's/DEBIAN=//p' 'debian/debian.env'`
else
	for debian in 'debian.master' 'debian' 'meta-source/debian'
	do
		[ -d "$debian" ] && break
	done fi
changelog="$debian/changelog"

unreleased=`head -1 "$changelog" | grep -c UNRELEASED`
if [ "$unreleased" -eq 0 ]; then
	tag="pre$tag"
else
	tag="~pre$tag"
fi
echo "using tag<$tag> for the changelog"

# Build the version number and pocket, and commit the changelog.
if [ "$abi" != "" ]; then
	sed -i -e"1s/^\\(.*(.*\\.\\)[^\\.]*\\(\\.[^\\.]*).*\\)/\\1$abi\\2/" \
		$changelog
fi
sed -i \
	-e "1 s/)/$tag)/" \
	-e "1 s/ UNRELEASED;/ $series;/" \
	-e "1 s/ $series-[^;]*;/ $series;/" \
    $changelog
do_chroot "$build_release-amd64" \
        fakeroot debian/rules insertchanges
git commit -a -m "CHANGES"

# Clean out the rubbish.
rm -f "$master_main"/*.tar.gz "$master_main"/*.dsc "$master_main"/*.changes "$master_main"/*.upload

#
# Build the source package.
#
git clean -x -f -d
if [ -d debian ]; then
	do_chroot "$build_release-amd64" \
		fakeroot debian/rules clean
	do_chroot "$build_release-amd64" \
		dpkg-buildpackage -kkernel-ppa@canonical.com -S -rfakeroot -I.git -I.gitignore -i'\.git.*' -sa

elif [ -d meta-source ]; then
	(
		cd meta-source
		do_chroot "$build_release-amd64" \
			fakeroot debian/rules clean
		do_chroot "$build_release-amd64" \
			dpkg-buildpackage -kkernel-ppa@canonical.com -S -rfakeroot -I.git -I.gitignore -i'\.git.*' -sa
	)
	mv *.tar.gz *.dsc *.changes ..
fi

# Move the upload to the incoming directory.
mkdir -p "$HOME/public_html/upload/$ppa"
mv "$master_main"/*.tar.gz "$master_main"/*.dsc "$master_main"/*.changes \
	"$HOME/public_html/upload/$ppa"
